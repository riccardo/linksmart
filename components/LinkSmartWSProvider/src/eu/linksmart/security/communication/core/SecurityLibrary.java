/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
package eu.linksmart.security.communication.core;

import eu.linksmart.security.communication.CryptoException;
import eu.linksmart.security.communication.VerificationFailureException;

/**
 * This interface defines methods to be used by Core Hydra security.
 * 
 * @author Julian Sch√ºtte
 * 
 */
public interface SecurityLibrary {
	public static final short CONF_NULL=0;
	public static final short CONF_ENC=1;
	public static final short CONF_ENC_SIG_SPORADIC=2;
	public static final short CONF_ENC_SIG=3;
	public static final String CORE_SECURITY_NAMESPACE = "http://linksmart.eu/ns/security/core";
	public static final String CORE_SIGNED_MESSAGE_NAMESPACE = "http://linksmart.eu/ns/security/core_sig";
	public static final String CORE_PROTECTED_MESSAGE_NAME = "linksmart:CoreProtectedMessage";
	public static final String CORE_SIGNED_MESSAGE_NAME = "linksmart:CoreSignedProtectedMessage";
	public static final String CORE_NONCE_ELEMENT = "linksmart:CoreNonce";
	public static final String CORE_CONTENT_ELEMENT = "linksmart:CoreContent";
	public static final String CORE_PROTECTED_ELEMENT = "linksmart:CoreProtected";
	
	/**
	 * Applies encryption and replay-prevention to plaintextData using the
	 * predefined key in keyStoreFile and returns a self-contained protected
	 * CoreHydra-message in XML format. If the core Hydra key cannot be found in
	 * keystore, the keystore file is not accessible or any other error occurred
	 * during the cryptographic operations, this method throws and exception.
	 * The method never returns null.
	 * 
	 * @param plaintextData
	 * @return a XML formatted Core Hydra message
	 * @throws CryptoException
	 */
	public String protectCoreMessage(String plaintextData) throws CryptoException;

	/**
	 * Configures the protection level that applies to Core Hydra security.
	 * <p>
	 * One of the following constants can be used:<br>
	 * <code>SecurityLibrary.CONF_NULL</code><br>
	 * <code>SecurityLibrary.CONF_ENC</code><br>
	 * <code>SecurityLibrary.CONF_ENC_SIG_SPORADIC</code><br>
	 * <code>SecurityLibrary.CONF_NULL_SIG</code><br>
	 * 
	 * @param config
	 */
	public void setConfiguration(short config);
	
	/**
	 * Returns the actual configuration of core security.
	 * @return configuration
	 */
	public short getConfig();
	
	/**
	 * Gets a self-contained protected Core Hydra message (as generated by
	 * protectCoreMessage()) as input, decrypts the content, verifies checksum
	 * and replay-protection and returns plaintext. If the checksum is invalid
	 * or the message has been replayed, a respective
	 * VerificationFailureException will be thrown. Further, if the keystore is
	 * not accessible or any other error occurred during the operation, an
	 * Exception will be thrown. This method never returns null.
	 * 
	 * @param protectedData
	 *            a XMl formatted Core Hydra message.
	 * @return plain content of the Core Hydra message.
	 * @throws VerificationFailureException
	 * @throws CryptoException
	 */
	public String unprotectCoreMessage(String protectedData) throws VerificationFailureException, CryptoException;

	/**
	 * Checks if <code>message</code> is a valid Hydra Core message.
	 * <p>
	 * "Valid" means that the message is correctly formatted. It does NOT mean
	 * that the message can be decrypted or verified.
	 * 
	 * @param message Message
	 * @return
	 */
	public boolean isValidCoreMessage(String message);

	
	/**
	 * Returns the current configuration of this instance.
	 * <p>
	 * See constants <code>SecurityLibrary.CONF_*</code> for possible value.
	 * @return
	 */

	public boolean isValidCoreSigMessage(String message);
	/**
	 * Protect messages for Inside Hydra communication (Network Manager ->
	 * Network manager) (encryption and signing), uses signingID and receiverID
	 * to access the keys in keystore, returns the protected message with
	 * XMLEnc/Sign, exception thrown on error.
	 * 
	 * @param plainData
	 * @param signingID
	 * @param receiverHID
	 * @return
	 */

}
