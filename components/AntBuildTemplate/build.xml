<!--
  This is a template local build file that you can use as a starting point to build your own build file.
  
  Your build file must at least support the two targets "make" and "test".
  
  There are a number of properties pre-defined (inherited from the root build file) that you can use:
  - javaLibDir          the directory that contains all Java libraries
  - dotnetLibDir        the directory that contains all .NET libraries
  - rootBuildDir        the directory within which you should create your directory for the intermediate compilation results
  - rootDistributionDir the directory where you should put your compiled bundles
-->
<project name="hydra.AntBuildTemplate" default="fail" xmlns:ivy="antlib:org.apache.ivy.ant">
 <target name="fail">
  <fail message="please use the root ant build file"/>
 </target>
 
 <!-- Adjust this name to fit the directory name of your component -->
 <property name="moduleName" value="AntBuildTemplate"/>
 <!-- Convenience name to access source files -->
 <property name="src.dir" value="${basedir}/src"/>
 <!-- Convenience property: to where you should compile your intermediate results -->
 <property name="build.dir" value="${rootBuildDir}/${moduleName}"/>
 <!-- Convenience property: to what name (JAR file for Java, directory for .NET) you should package your component -->
 <property name="distribution" value="${rootDistributionDir}/${moduleName}"/>
 
 <!-- 
    Compile and make distribution bundle ready. 
    
    This is only an example: your "make" will look completely different!
    -->
 <target name="make" depends="generate-src">
  <echo message="Example compiling source from ${basedir} to ${build.dir} and then distribute to ${distribution.dir}"/>
  <!-- here comes the magic line: asks ivy to resolve a dependency on commons-lang 2.1 and to build ant path with it from its cache -->
  <ivy:cachepath organisation="commons-lang" module="commons-lang" revision="2.1" pathid="lib.path.id" inline="true"/>
  <echo message="compiling..."/>
  <mkdir dir="${build.dir}"/>
  <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id"/>   
  <echo>We are now ready to execute our simple program with its dependency on commons-lang.</echo>
 </target>
 
  <!-- 
    Run the unit tests of this component.
    
    There are no unit tests, just run the component.
 -->
 <target name="test" depends="make">
 <java classname="example.Hello">
   <classpath>
    <path refid="lib.path.id"/>
    <path location="${build.dir}"/>
   </classpath>
  </java>
 </target>
 
 <!-- 
      Helpers needed by the example targets. Remove!
   -->
 <target name="generate-src" depends="check-source-exists" unless="source.exists">
  <echo>Create example source code file</echo>
  <mkdir dir="${src.dir}/example"/>
  <echo file="${src.dir}/example/Hello.java">
   package example;
   import org.apache.commons.lang.WordUtils;
   public class Hello {
     public static void main(String[] args) {
       String  message = "hello ivy !";
       System.out.println("standard message : " + message);
       System.out.println("capitalized by " + WordUtils.class.getName() + " : " + WordUtils.capitalizeFully(message));
     }
   }
  </echo>
 </target>
 
 <target name="check-source-exists">
  <available file="${src.dir}/example/Hello.java" property="source.exists"/>
 </target>
</project>