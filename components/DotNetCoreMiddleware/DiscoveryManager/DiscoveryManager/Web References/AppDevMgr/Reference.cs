/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace DiscoveryManager.AppDevMgr {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IApplicationDeviceManager", Namespace="http://tempuri.org/")]
    public partial class ApplicationDeviceManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllGatewaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResolveDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscoverDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessErrorMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTDevicesEndpointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTDevicesFromTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTDevicesFromXpathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnresolvedDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceOntologyDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvokeIoTServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvokeServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvokeServiceXPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRegisteredOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWSEndpointOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIoTWSEndpointOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDACEndpointOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWSDLOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHIDsFromXPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHIDsbyNMDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLocalHIDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLocalDeviceXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterCallBackUrlOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ApplicationDeviceManager() {
            this.Url = global::DiscoveryManager.Properties.Settings.Default.DiscoveryManager_AppDevMgr_ApplicationDeviceManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllGatewaysCompletedEventHandler GetAllGatewaysCompleted;
        
        /// <remarks/>
        public event ResolveDevicesCompletedEventHandler ResolveDevicesCompleted;
        
        /// <remarks/>
        public event DiscoverDevicesCompletedEventHandler DiscoverDevicesCompleted;
        
        /// <remarks/>
        public event ProcessErrorMessageCompletedEventHandler ProcessErrorMessageCompleted;
        
        /// <remarks/>
        public event GetDeviceXMLCompletedEventHandler GetDeviceXMLCompleted;
        
        /// <remarks/>
        public event GetIoTDevicesCompletedEventHandler GetIoTDevicesCompleted;
        
        /// <remarks/>
        public event GetIoTDevicesEndpointsCompletedEventHandler GetIoTDevicesEndpointsCompleted;
        
        /// <remarks/>
        public event GetIoTDevicesFromTypeCompletedEventHandler GetIoTDevicesFromTypeCompleted;
        
        /// <remarks/>
        public event GetIoTDevicesFromXpathCompletedEventHandler GetIoTDevicesFromXpathCompleted;
        
        /// <remarks/>
        public event GetUnresolvedDevicesCompletedEventHandler GetUnresolvedDevicesCompleted;
        
        /// <remarks/>
        public event GetDeviceOntologyDescriptionCompletedEventHandler GetDeviceOntologyDescriptionCompleted;
        
        /// <remarks/>
        public event InvokeIoTServiceCompletedEventHandler InvokeIoTServiceCompleted;
        
        /// <remarks/>
        public event InvokeServiceCompletedEventHandler InvokeServiceCompleted;
        
        /// <remarks/>
        public event InvokeServiceXPathCompletedEventHandler InvokeServiceXPathCompleted;
        
        /// <remarks/>
        public event AddDeviceCompletedEventHandler AddDeviceCompleted;
        
        /// <remarks/>
        public event RemoveDeviceCompletedEventHandler RemoveDeviceCompleted;
        
        /// <remarks/>
        public event IsRegisteredCompletedEventHandler IsRegisteredCompleted;
        
        /// <remarks/>
        public event GetIoTIDCompletedEventHandler GetIoTIDCompleted;
        
        /// <remarks/>
        public event GetIoTURLCompletedEventHandler GetIoTURLCompleted;
        
        /// <remarks/>
        public event GetWSEndpointCompletedEventHandler GetWSEndpointCompleted;
        
        /// <remarks/>
        public event GetIoTWSEndpointCompletedEventHandler GetIoTWSEndpointCompleted;
        
        /// <remarks/>
        public event GetDACEndpointCompletedEventHandler GetDACEndpointCompleted;
        
        /// <remarks/>
        public event GetWSDLCompletedEventHandler GetWSDLCompleted;
        
        /// <remarks/>
        public event StartDevicesCompletedEventHandler StartDevicesCompleted;
        
        /// <remarks/>
        public event StopDevicesCompletedEventHandler StopDevicesCompleted;
        
        /// <remarks/>
        public event GetHIDCompletedEventHandler GetHIDCompleted;
        
        /// <remarks/>
        public event GetHIDsFromXPathCompletedEventHandler GetHIDsFromXPathCompleted;
        
        /// <remarks/>
        public event GetHIDsbyNMDescriptionCompletedEventHandler GetHIDsbyNMDescriptionCompleted;
        
        /// <remarks/>
        public event GetAllLocalHIDSCompletedEventHandler GetAllLocalHIDSCompleted;
        
        /// <remarks/>
        public event GetAllLocalDeviceXmlCompletedEventHandler GetAllLocalDeviceXmlCompleted;
        
        /// <remarks/>
        public event RegisterCallBackUrlCompletedEventHandler RegisterCallBackUrlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetAllGateways", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetAllGateways() {
            object[] results = this.Invoke("GetAllGateways", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllGatewaysAsync() {
            this.GetAllGatewaysAsync(null);
        }
        
        /// <remarks/>
        public void GetAllGatewaysAsync(object userState) {
            if ((this.GetAllGatewaysOperationCompleted == null)) {
                this.GetAllGatewaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllGatewaysOperationCompleted);
            }
            this.InvokeAsync("GetAllGateways", new object[0], this.GetAllGatewaysOperationCompleted, userState);
        }
        
        private void OnGetAllGatewaysOperationCompleted(object arg) {
            if ((this.GetAllGatewaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllGatewaysCompleted(this, new GetAllGatewaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/ResolveDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResolveDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string discovermanagertype) {
            this.Invoke("ResolveDevices", new object[] {
                        gateway,
                        discovermanagertype});
        }
        
        /// <remarks/>
        public void ResolveDevicesAsync(string gateway, string discovermanagertype) {
            this.ResolveDevicesAsync(gateway, discovermanagertype, null);
        }
        
        /// <remarks/>
        public void ResolveDevicesAsync(string gateway, string discovermanagertype, object userState) {
            if ((this.ResolveDevicesOperationCompleted == null)) {
                this.ResolveDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResolveDevicesOperationCompleted);
            }
            this.InvokeAsync("ResolveDevices", new object[] {
                        gateway,
                        discovermanagertype}, this.ResolveDevicesOperationCompleted, userState);
        }
        
        private void OnResolveDevicesOperationCompleted(object arg) {
            if ((this.ResolveDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResolveDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/DiscoverDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DiscoverDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway) {
            this.Invoke("DiscoverDevices", new object[] {
                        gateway});
        }
        
        /// <remarks/>
        public void DiscoverDevicesAsync(string gateway) {
            this.DiscoverDevicesAsync(gateway, null);
        }
        
        /// <remarks/>
        public void DiscoverDevicesAsync(string gateway, object userState) {
            if ((this.DiscoverDevicesOperationCompleted == null)) {
                this.DiscoverDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscoverDevicesOperationCompleted);
            }
            this.InvokeAsync("DiscoverDevices", new object[] {
                        gateway}, this.DiscoverDevicesOperationCompleted, userState);
        }
        
        private void OnDiscoverDevicesOperationCompleted(object arg) {
            if ((this.DiscoverDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscoverDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/ProcessErrorMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ProcessErrorMessage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string theMessage) {
            object[] results = this.Invoke("ProcessErrorMessage", new object[] {
                        deviceid,
                        theMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessErrorMessageAsync(string deviceid, string theMessage) {
            this.ProcessErrorMessageAsync(deviceid, theMessage, null);
        }
        
        /// <remarks/>
        public void ProcessErrorMessageAsync(string deviceid, string theMessage, object userState) {
            if ((this.ProcessErrorMessageOperationCompleted == null)) {
                this.ProcessErrorMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessErrorMessageOperationCompleted);
            }
            this.InvokeAsync("ProcessErrorMessage", new object[] {
                        deviceid,
                        theMessage}, this.ProcessErrorMessageOperationCompleted, userState);
        }
        
        private void OnProcessErrorMessageOperationCompleted(object arg) {
            if ((this.ProcessErrorMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessErrorMessageCompleted(this, new ProcessErrorMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetDeviceXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetDeviceXML([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            object[] results = this.Invoke("GetDeviceXML", new object[] {
                        deviceid,
                        idtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceXMLAsync(string deviceid, string idtype) {
            this.GetDeviceXMLAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void GetDeviceXMLAsync(string deviceid, string idtype, object userState) {
            if ((this.GetDeviceXMLOperationCompleted == null)) {
                this.GetDeviceXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceXMLOperationCompleted);
            }
            this.InvokeAsync("GetDeviceXML", new object[] {
                        deviceid,
                        idtype}, this.GetDeviceXMLOperationCompleted, userState);
        }
        
        private void OnGetDeviceXMLOperationCompleted(object arg) {
            if ((this.GetDeviceXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceXMLCompleted(this, new GetDeviceXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway) {
            object[] results = this.Invoke("GetIoTDevices", new object[] {
                        gateway});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTDevicesAsync(string gateway) {
            this.GetIoTDevicesAsync(gateway, null);
        }
        
        /// <remarks/>
        public void GetIoTDevicesAsync(string gateway, object userState) {
            if ((this.GetIoTDevicesOperationCompleted == null)) {
                this.GetIoTDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTDevicesOperationCompleted);
            }
            this.InvokeAsync("GetIoTDevices", new object[] {
                        gateway}, this.GetIoTDevicesOperationCompleted, userState);
        }
        
        private void OnGetIoTDevicesOperationCompleted(object arg) {
            if ((this.GetIoTDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTDevicesCompleted(this, new GetIoTDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTDevicesEndpoints", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTDevicesEndpoints([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway) {
            object[] results = this.Invoke("GetIoTDevicesEndpoints", new object[] {
                        gateway});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTDevicesEndpointsAsync(string gateway) {
            this.GetIoTDevicesEndpointsAsync(gateway, null);
        }
        
        /// <remarks/>
        public void GetIoTDevicesEndpointsAsync(string gateway, object userState) {
            if ((this.GetIoTDevicesEndpointsOperationCompleted == null)) {
                this.GetIoTDevicesEndpointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTDevicesEndpointsOperationCompleted);
            }
            this.InvokeAsync("GetIoTDevicesEndpoints", new object[] {
                        gateway}, this.GetIoTDevicesEndpointsOperationCompleted, userState);
        }
        
        private void OnGetIoTDevicesEndpointsOperationCompleted(object arg) {
            if ((this.GetIoTDevicesEndpointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTDevicesEndpointsCompleted(this, new GetIoTDevicesEndpointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTDevicesFromType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTDevicesFromType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string devicetype) {
            object[] results = this.Invoke("GetIoTDevicesFromType", new object[] {
                        gateway,
                        devicetype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTDevicesFromTypeAsync(string gateway, string devicetype) {
            this.GetIoTDevicesFromTypeAsync(gateway, devicetype, null);
        }
        
        /// <remarks/>
        public void GetIoTDevicesFromTypeAsync(string gateway, string devicetype, object userState) {
            if ((this.GetIoTDevicesFromTypeOperationCompleted == null)) {
                this.GetIoTDevicesFromTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTDevicesFromTypeOperationCompleted);
            }
            this.InvokeAsync("GetIoTDevicesFromType", new object[] {
                        gateway,
                        devicetype}, this.GetIoTDevicesFromTypeOperationCompleted, userState);
        }
        
        private void OnGetIoTDevicesFromTypeOperationCompleted(object arg) {
            if ((this.GetIoTDevicesFromTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTDevicesFromTypeCompleted(this, new GetIoTDevicesFromTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTDevicesFromXpath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTDevicesFromXpath([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath) {
            object[] results = this.Invoke("GetIoTDevicesFromXpath", new object[] {
                        xpath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTDevicesFromXpathAsync(string xpath) {
            this.GetIoTDevicesFromXpathAsync(xpath, null);
        }
        
        /// <remarks/>
        public void GetIoTDevicesFromXpathAsync(string xpath, object userState) {
            if ((this.GetIoTDevicesFromXpathOperationCompleted == null)) {
                this.GetIoTDevicesFromXpathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTDevicesFromXpathOperationCompleted);
            }
            this.InvokeAsync("GetIoTDevicesFromXpath", new object[] {
                        xpath}, this.GetIoTDevicesFromXpathOperationCompleted, userState);
        }
        
        private void OnGetIoTDevicesFromXpathOperationCompleted(object arg) {
            if ((this.GetIoTDevicesFromXpathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTDevicesFromXpathCompleted(this, new GetIoTDevicesFromXpathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetUnresolvedDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetUnresolvedDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway) {
            object[] results = this.Invoke("GetUnresolvedDevices", new object[] {
                        gateway});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnresolvedDevicesAsync(string gateway) {
            this.GetUnresolvedDevicesAsync(gateway, null);
        }
        
        /// <remarks/>
        public void GetUnresolvedDevicesAsync(string gateway, object userState) {
            if ((this.GetUnresolvedDevicesOperationCompleted == null)) {
                this.GetUnresolvedDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnresolvedDevicesOperationCompleted);
            }
            this.InvokeAsync("GetUnresolvedDevices", new object[] {
                        gateway}, this.GetUnresolvedDevicesOperationCompleted, userState);
        }
        
        private void OnGetUnresolvedDevicesOperationCompleted(object arg) {
            if ((this.GetUnresolvedDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnresolvedDevicesCompleted(this, new GetUnresolvedDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetDeviceOntologyDescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetDeviceOntologyDescription([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceontology_id) {
            object[] results = this.Invoke("GetDeviceOntologyDescription", new object[] {
                        deviceontology_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceOntologyDescriptionAsync(string deviceontology_id) {
            this.GetDeviceOntologyDescriptionAsync(deviceontology_id, null);
        }
        
        /// <remarks/>
        public void GetDeviceOntologyDescriptionAsync(string deviceontology_id, object userState) {
            if ((this.GetDeviceOntologyDescriptionOperationCompleted == null)) {
                this.GetDeviceOntologyDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceOntologyDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetDeviceOntologyDescription", new object[] {
                        deviceontology_id}, this.GetDeviceOntologyDescriptionOperationCompleted, userState);
        }
        
        private void OnGetDeviceOntologyDescriptionOperationCompleted(object arg) {
            if ((this.GetDeviceOntologyDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceOntologyDescriptionCompleted(this, new GetDeviceOntologyDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/InvokeIoTService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InvokeIoTService([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string method, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arguments) {
            object[] results = this.Invoke("InvokeIoTService", new object[] {
                        deviceid,
                        idtype,
                        method,
                        arguments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvokeIoTServiceAsync(string deviceid, string idtype, string method, string arguments) {
            this.InvokeIoTServiceAsync(deviceid, idtype, method, arguments, null);
        }
        
        /// <remarks/>
        public void InvokeIoTServiceAsync(string deviceid, string idtype, string method, string arguments, object userState) {
            if ((this.InvokeIoTServiceOperationCompleted == null)) {
                this.InvokeIoTServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvokeIoTServiceOperationCompleted);
            }
            this.InvokeAsync("InvokeIoTService", new object[] {
                        deviceid,
                        idtype,
                        method,
                        arguments}, this.InvokeIoTServiceOperationCompleted, userState);
        }
        
        private void OnInvokeIoTServiceOperationCompleted(object arg) {
            if ((this.InvokeIoTServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvokeIoTServiceCompleted(this, new InvokeIoTServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/InvokeService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InvokeService([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string service, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string method, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arguments) {
            object[] results = this.Invoke("InvokeService", new object[] {
                        deviceid,
                        idtype,
                        service,
                        method,
                        arguments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvokeServiceAsync(string deviceid, string idtype, string service, string method, string arguments) {
            this.InvokeServiceAsync(deviceid, idtype, service, method, arguments, null);
        }
        
        /// <remarks/>
        public void InvokeServiceAsync(string deviceid, string idtype, string service, string method, string arguments, object userState) {
            if ((this.InvokeServiceOperationCompleted == null)) {
                this.InvokeServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvokeServiceOperationCompleted);
            }
            this.InvokeAsync("InvokeService", new object[] {
                        deviceid,
                        idtype,
                        service,
                        method,
                        arguments}, this.InvokeServiceOperationCompleted, userState);
        }
        
        private void OnInvokeServiceOperationCompleted(object arg) {
            if ((this.InvokeServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvokeServiceCompleted(this, new InvokeServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/InvokeServiceXPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InvokeServiceXPath([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string serviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string method, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arguments) {
            object[] results = this.Invoke("InvokeServiceXPath", new object[] {
                        xpath,
                        serviceid,
                        method,
                        arguments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvokeServiceXPathAsync(string xpath, string serviceid, string method, string arguments) {
            this.InvokeServiceXPathAsync(xpath, serviceid, method, arguments, null);
        }
        
        /// <remarks/>
        public void InvokeServiceXPathAsync(string xpath, string serviceid, string method, string arguments, object userState) {
            if ((this.InvokeServiceXPathOperationCompleted == null)) {
                this.InvokeServiceXPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvokeServiceXPathOperationCompleted);
            }
            this.InvokeAsync("InvokeServiceXPath", new object[] {
                        xpath,
                        serviceid,
                        method,
                        arguments}, this.InvokeServiceXPathOperationCompleted, userState);
        }
        
        private void OnInvokeServiceXPathOperationCompleted(object arg) {
            if ((this.InvokeServiceXPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvokeServiceXPathCompleted(this, new InvokeServiceXPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/AddDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string devicedescription) {
            object[] results = this.Invoke("AddDevice", new object[] {
                        devicedescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddDeviceAsync(string devicedescription) {
            this.AddDeviceAsync(devicedescription, null);
        }
        
        /// <remarks/>
        public void AddDeviceAsync(string devicedescription, object userState) {
            if ((this.AddDeviceOperationCompleted == null)) {
                this.AddDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDeviceOperationCompleted);
            }
            this.InvokeAsync("AddDevice", new object[] {
                        devicedescription}, this.AddDeviceOperationCompleted, userState);
        }
        
        private void OnAddDeviceOperationCompleted(object arg) {
            if ((this.AddDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDeviceCompleted(this, new AddDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/RemoveDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            this.Invoke("RemoveDevice", new object[] {
                        deviceid,
                        idtype});
        }
        
        /// <remarks/>
        public void RemoveDeviceAsync(string deviceid, string idtype) {
            this.RemoveDeviceAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void RemoveDeviceAsync(string deviceid, string idtype, object userState) {
            if ((this.RemoveDeviceOperationCompleted == null)) {
                this.RemoveDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDeviceOperationCompleted);
            }
            this.InvokeAsync("RemoveDevice", new object[] {
                        deviceid,
                        idtype}, this.RemoveDeviceOperationCompleted, userState);
        }
        
        private void OnRemoveDeviceOperationCompleted(object arg) {
            if ((this.RemoveDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/IsRegistered", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsRegistered([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string HID, out bool IsRegisteredResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsRegisteredResultSpecified) {
            object[] results = this.Invoke("IsRegistered", new object[] {
                        HID});
            IsRegisteredResult = ((bool)(results[0]));
            IsRegisteredResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void IsRegisteredAsync(string HID) {
            this.IsRegisteredAsync(HID, null);
        }
        
        /// <remarks/>
        public void IsRegisteredAsync(string HID, object userState) {
            if ((this.IsRegisteredOperationCompleted == null)) {
                this.IsRegisteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRegisteredOperationCompleted);
            }
            this.InvokeAsync("IsRegistered", new object[] {
                        HID}, this.IsRegisteredOperationCompleted, userState);
        }
        
        private void OnIsRegisteredOperationCompleted(object arg) {
            if ((this.IsRegisteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRegisteredCompleted(this, new IsRegisteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            object[] results = this.Invoke("GetIoTID", new object[] {
                        deviceid,
                        idtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTIDAsync(string deviceid, string idtype) {
            this.GetIoTIDAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void GetIoTIDAsync(string deviceid, string idtype, object userState) {
            if ((this.GetIoTIDOperationCompleted == null)) {
                this.GetIoTIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTIDOperationCompleted);
            }
            this.InvokeAsync("GetIoTID", new object[] {
                        deviceid,
                        idtype}, this.GetIoTIDOperationCompleted, userState);
        }
        
        private void OnGetIoTIDOperationCompleted(object arg) {
            if ((this.GetIoTIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTIDCompleted(this, new GetIoTIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTURL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTURL([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string gateway, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderHID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionid) {
            object[] results = this.Invoke("GetIoTURL", new object[] {
                        gateway,
                        deviceid,
                        idtype,
                        senderHID,
                        sessionid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTURLAsync(string gateway, string deviceid, string idtype, string senderHID, string sessionid) {
            this.GetIoTURLAsync(gateway, deviceid, idtype, senderHID, sessionid, null);
        }
        
        /// <remarks/>
        public void GetIoTURLAsync(string gateway, string deviceid, string idtype, string senderHID, string sessionid, object userState) {
            if ((this.GetIoTURLOperationCompleted == null)) {
                this.GetIoTURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTURLOperationCompleted);
            }
            this.InvokeAsync("GetIoTURL", new object[] {
                        gateway,
                        deviceid,
                        idtype,
                        senderHID,
                        sessionid}, this.GetIoTURLOperationCompleted, userState);
        }
        
        private void OnGetIoTURLOperationCompleted(object arg) {
            if ((this.GetIoTURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTURLCompleted(this, new GetIoTURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetWSEndpoint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetWSEndpoint([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            object[] results = this.Invoke("GetWSEndpoint", new object[] {
                        deviceid,
                        idtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWSEndpointAsync(string deviceid, string idtype) {
            this.GetWSEndpointAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void GetWSEndpointAsync(string deviceid, string idtype, object userState) {
            if ((this.GetWSEndpointOperationCompleted == null)) {
                this.GetWSEndpointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWSEndpointOperationCompleted);
            }
            this.InvokeAsync("GetWSEndpoint", new object[] {
                        deviceid,
                        idtype}, this.GetWSEndpointOperationCompleted, userState);
        }
        
        private void OnGetWSEndpointOperationCompleted(object arg) {
            if ((this.GetWSEndpointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWSEndpointCompleted(this, new GetWSEndpointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetIoTWSEndpoint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetIoTWSEndpoint([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            object[] results = this.Invoke("GetIoTWSEndpoint", new object[] {
                        deviceid,
                        idtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIoTWSEndpointAsync(string deviceid, string idtype) {
            this.GetIoTWSEndpointAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void GetIoTWSEndpointAsync(string deviceid, string idtype, object userState) {
            if ((this.GetIoTWSEndpointOperationCompleted == null)) {
                this.GetIoTWSEndpointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIoTWSEndpointOperationCompleted);
            }
            this.InvokeAsync("GetIoTWSEndpoint", new object[] {
                        deviceid,
                        idtype}, this.GetIoTWSEndpointOperationCompleted, userState);
        }
        
        private void OnGetIoTWSEndpointOperationCompleted(object arg) {
            if ((this.GetIoTWSEndpointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIoTWSEndpointCompleted(this, new GetIoTWSEndpointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetDACEndpoint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetDACEndpoint([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            object[] results = this.Invoke("GetDACEndpoint", new object[] {
                        deviceid,
                        idtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDACEndpointAsync(string deviceid, string idtype) {
            this.GetDACEndpointAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void GetDACEndpointAsync(string deviceid, string idtype, object userState) {
            if ((this.GetDACEndpointOperationCompleted == null)) {
                this.GetDACEndpointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDACEndpointOperationCompleted);
            }
            this.InvokeAsync("GetDACEndpoint", new object[] {
                        deviceid,
                        idtype}, this.GetDACEndpointOperationCompleted, userState);
        }
        
        private void OnGetDACEndpointOperationCompleted(object arg) {
            if ((this.GetDACEndpointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDACEndpointCompleted(this, new GetDACEndpointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetWSDL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetWSDL([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idtype) {
            object[] results = this.Invoke("GetWSDL", new object[] {
                        deviceid,
                        idtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWSDLAsync(string deviceid, string idtype) {
            this.GetWSDLAsync(deviceid, idtype, null);
        }
        
        /// <remarks/>
        public void GetWSDLAsync(string deviceid, string idtype, object userState) {
            if ((this.GetWSDLOperationCompleted == null)) {
                this.GetWSDLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWSDLOperationCompleted);
            }
            this.InvokeAsync("GetWSDL", new object[] {
                        deviceid,
                        idtype}, this.GetWSDLOperationCompleted, userState);
        }
        
        private void OnGetWSDLOperationCompleted(object arg) {
            if ((this.GetWSDLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWSDLCompleted(this, new GetWSDLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/StartDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath) {
            this.Invoke("StartDevices", new object[] {
                        xpath});
        }
        
        /// <remarks/>
        public void StartDevicesAsync(string xpath) {
            this.StartDevicesAsync(xpath, null);
        }
        
        /// <remarks/>
        public void StartDevicesAsync(string xpath, object userState) {
            if ((this.StartDevicesOperationCompleted == null)) {
                this.StartDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartDevicesOperationCompleted);
            }
            this.InvokeAsync("StartDevices", new object[] {
                        xpath}, this.StartDevicesOperationCompleted, userState);
        }
        
        private void OnStartDevicesOperationCompleted(object arg) {
            if ((this.StartDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/StopDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath) {
            this.Invoke("StopDevices", new object[] {
                        xpath});
        }
        
        /// <remarks/>
        public void StopDevicesAsync(string xpath) {
            this.StopDevicesAsync(xpath, null);
        }
        
        /// <remarks/>
        public void StopDevicesAsync(string xpath, object userState) {
            if ((this.StopDevicesOperationCompleted == null)) {
                this.StopDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopDevicesOperationCompleted);
            }
            this.InvokeAsync("StopDevices", new object[] {
                        xpath}, this.StopDevicesOperationCompleted, userState);
        }
        
        private void OnStopDevicesOperationCompleted(object arg) {
            if ((this.StopDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetHID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetHID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string application, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string devicelocalid) {
            object[] results = this.Invoke("GetHID", new object[] {
                        application,
                        devicelocalid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHIDAsync(string application, string devicelocalid) {
            this.GetHIDAsync(application, devicelocalid, null);
        }
        
        /// <remarks/>
        public void GetHIDAsync(string application, string devicelocalid, object userState) {
            if ((this.GetHIDOperationCompleted == null)) {
                this.GetHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHIDOperationCompleted);
            }
            this.InvokeAsync("GetHID", new object[] {
                        application,
                        devicelocalid}, this.GetHIDOperationCompleted, userState);
        }
        
        private void OnGetHIDOperationCompleted(object arg) {
            if ((this.GetHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHIDCompleted(this, new GetHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetHIDsFromXPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetHIDsFromXPath([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string application, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hidtype) {
            object[] results = this.Invoke("GetHIDsFromXPath", new object[] {
                        application,
                        xpath,
                        hidtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHIDsFromXPathAsync(string application, string xpath, string hidtype) {
            this.GetHIDsFromXPathAsync(application, xpath, hidtype, null);
        }
        
        /// <remarks/>
        public void GetHIDsFromXPathAsync(string application, string xpath, string hidtype, object userState) {
            if ((this.GetHIDsFromXPathOperationCompleted == null)) {
                this.GetHIDsFromXPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHIDsFromXPathOperationCompleted);
            }
            this.InvokeAsync("GetHIDsFromXPath", new object[] {
                        application,
                        xpath,
                        hidtype}, this.GetHIDsFromXPathOperationCompleted, userState);
        }
        
        private void OnGetHIDsFromXPathOperationCompleted(object arg) {
            if ((this.GetHIDsFromXPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHIDsFromXPathCompleted(this, new GetHIDsFromXPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetHIDsbyNMDescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetHIDsbyNMDescription([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string description) {
            object[] results = this.Invoke("GetHIDsbyNMDescription", new object[] {
                        description});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHIDsbyNMDescriptionAsync(string description) {
            this.GetHIDsbyNMDescriptionAsync(description, null);
        }
        
        /// <remarks/>
        public void GetHIDsbyNMDescriptionAsync(string description, object userState) {
            if ((this.GetHIDsbyNMDescriptionOperationCompleted == null)) {
                this.GetHIDsbyNMDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHIDsbyNMDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetHIDsbyNMDescription", new object[] {
                        description}, this.GetHIDsbyNMDescriptionOperationCompleted, userState);
        }
        
        private void OnGetHIDsbyNMDescriptionOperationCompleted(object arg) {
            if ((this.GetHIDsbyNMDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHIDsbyNMDescriptionCompleted(this, new GetHIDsbyNMDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetAllLocalHIDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetAllLocalHIDS([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hidtype) {
            object[] results = this.Invoke("GetAllLocalHIDS", new object[] {
                        hidtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLocalHIDSAsync(string hidtype) {
            this.GetAllLocalHIDSAsync(hidtype, null);
        }
        
        /// <remarks/>
        public void GetAllLocalHIDSAsync(string hidtype, object userState) {
            if ((this.GetAllLocalHIDSOperationCompleted == null)) {
                this.GetAllLocalHIDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLocalHIDSOperationCompleted);
            }
            this.InvokeAsync("GetAllLocalHIDS", new object[] {
                        hidtype}, this.GetAllLocalHIDSOperationCompleted, userState);
        }
        
        private void OnGetAllLocalHIDSOperationCompleted(object arg) {
            if ((this.GetAllLocalHIDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLocalHIDSCompleted(this, new GetAllLocalHIDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/GetAllLocalDeviceXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetAllLocalDeviceXml() {
            object[] results = this.Invoke("GetAllLocalDeviceXml", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLocalDeviceXmlAsync() {
            this.GetAllLocalDeviceXmlAsync(null);
        }
        
        /// <remarks/>
        public void GetAllLocalDeviceXmlAsync(object userState) {
            if ((this.GetAllLocalDeviceXmlOperationCompleted == null)) {
                this.GetAllLocalDeviceXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLocalDeviceXmlOperationCompleted);
            }
            this.InvokeAsync("GetAllLocalDeviceXml", new object[0], this.GetAllLocalDeviceXmlOperationCompleted, userState);
        }
        
        private void OnGetAllLocalDeviceXmlOperationCompleted(object arg) {
            if ((this.GetAllLocalDeviceXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLocalDeviceXmlCompleted(this, new GetAllLocalDeviceXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IApplicationDeviceManager/RegisterCallBackUrl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterCallBackUrl([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string url) {
            this.Invoke("RegisterCallBackUrl", new object[] {
                        url});
        }
        
        /// <remarks/>
        public void RegisterCallBackUrlAsync(string url) {
            this.RegisterCallBackUrlAsync(url, null);
        }
        
        /// <remarks/>
        public void RegisterCallBackUrlAsync(string url, object userState) {
            if ((this.RegisterCallBackUrlOperationCompleted == null)) {
                this.RegisterCallBackUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterCallBackUrlOperationCompleted);
            }
            this.InvokeAsync("RegisterCallBackUrl", new object[] {
                        url}, this.RegisterCallBackUrlOperationCompleted, userState);
        }
        
        private void OnRegisterCallBackUrlOperationCompleted(object arg) {
            if ((this.RegisterCallBackUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCallBackUrlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllGatewaysCompletedEventHandler(object sender, GetAllGatewaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllGatewaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllGatewaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResolveDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DiscoverDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessErrorMessageCompletedEventHandler(object sender, ProcessErrorMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessErrorMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessErrorMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDeviceXMLCompletedEventHandler(object sender, GetDeviceXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTDevicesCompletedEventHandler(object sender, GetIoTDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTDevicesEndpointsCompletedEventHandler(object sender, GetIoTDevicesEndpointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTDevicesEndpointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTDevicesEndpointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTDevicesFromTypeCompletedEventHandler(object sender, GetIoTDevicesFromTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTDevicesFromTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTDevicesFromTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTDevicesFromXpathCompletedEventHandler(object sender, GetIoTDevicesFromXpathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTDevicesFromXpathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTDevicesFromXpathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUnresolvedDevicesCompletedEventHandler(object sender, GetUnresolvedDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnresolvedDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnresolvedDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDeviceOntologyDescriptionCompletedEventHandler(object sender, GetDeviceOntologyDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceOntologyDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceOntologyDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvokeIoTServiceCompletedEventHandler(object sender, InvokeIoTServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvokeIoTServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvokeIoTServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvokeServiceCompletedEventHandler(object sender, InvokeServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvokeServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvokeServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvokeServiceXPathCompletedEventHandler(object sender, InvokeServiceXPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvokeServiceXPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvokeServiceXPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddDeviceCompletedEventHandler(object sender, AddDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsRegisteredCompletedEventHandler(object sender, IsRegisteredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool IsRegisteredResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsRegisteredResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTIDCompletedEventHandler(object sender, GetIoTIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTURLCompletedEventHandler(object sender, GetIoTURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWSEndpointCompletedEventHandler(object sender, GetWSEndpointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWSEndpointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWSEndpointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIoTWSEndpointCompletedEventHandler(object sender, GetIoTWSEndpointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIoTWSEndpointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIoTWSEndpointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDACEndpointCompletedEventHandler(object sender, GetDACEndpointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDACEndpointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDACEndpointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWSDLCompletedEventHandler(object sender, GetWSDLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWSDLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWSDLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StartDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StopDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetHIDCompletedEventHandler(object sender, GetHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetHIDsFromXPathCompletedEventHandler(object sender, GetHIDsFromXPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHIDsFromXPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHIDsFromXPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetHIDsbyNMDescriptionCompletedEventHandler(object sender, GetHIDsbyNMDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHIDsbyNMDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHIDsbyNMDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllLocalHIDSCompletedEventHandler(object sender, GetAllLocalHIDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLocalHIDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLocalHIDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllLocalDeviceXmlCompletedEventHandler(object sender, GetAllLocalDeviceXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLocalDeviceXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLocalDeviceXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterCallBackUrlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591