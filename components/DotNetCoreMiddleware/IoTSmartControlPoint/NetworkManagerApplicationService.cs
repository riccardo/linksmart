/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace NetworkManager
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.3038.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "NetworkManagerApplicationSoapBinding", Namespace = "http://ws.network.IoT.eu.com")]
    public partial class NetworkManagerApplicationService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback openSessionOperationCompleted;

        private System.Threading.SendOrPostCallback sendDataOperationCompleted;

        private System.Threading.SendOrPostCallback receiveDataOperationCompleted;

        private System.Threading.SendOrPostCallback closeSessionOperationCompleted;

        private System.Threading.SendOrPostCallback getSessionParameterOperationCompleted;

        private System.Threading.SendOrPostCallback setSessionParameterOperationCompleted;

        private System.Threading.SendOrPostCallback synchronizeSessionsListOperationCompleted;

        private System.Threading.SendOrPostCallback addSessionRemoteClientOperationCompleted;

        private System.Threading.SendOrPostCallback createHIDOperationCompleted;

        private System.Threading.SendOrPostCallback createHID1OperationCompleted;

        private System.Threading.SendOrPostCallback createHIDwDescOperationCompleted;

        private System.Threading.SendOrPostCallback createHIDwDesc1OperationCompleted;

        private System.Threading.SendOrPostCallback renewHIDOperationCompleted;

        private System.Threading.SendOrPostCallback renewHIDInfoOperationCompleted;

        private System.Threading.SendOrPostCallback addContextOperationCompleted;

        private System.Threading.SendOrPostCallback getHostHIDsOperationCompleted;

        private System.Threading.SendOrPostCallback getHIDsOperationCompleted;

        private System.Threading.SendOrPostCallback getContextHIDsOperationCompleted;

        private System.Threading.SendOrPostCallback getHIDsbyDescriptionOperationCompleted;

        private System.Threading.SendOrPostCallback removeHIDOperationCompleted;

        private System.Threading.SendOrPostCallback removeAllHIDOperationCompleted;

        private System.Threading.SendOrPostCallback startNMOperationCompleted;

        private System.Threading.SendOrPostCallback stopNMOperationCompleted;

        private System.Threading.SendOrPostCallback getHostHIDsAsStringOperationCompleted;

        private System.Threading.SendOrPostCallback getHIDsAsStringOperationCompleted;

        private System.Threading.SendOrPostCallback getContextHIDsAsStringOperationCompleted;

        private System.Threading.SendOrPostCallback getHIDsbyDescriptionAsStringOperationCompleted;

        private System.Threading.SendOrPostCallback getNMPositionOperationCompleted;

        private System.Threading.SendOrPostCallback getDescriptionbyHIDOperationCompleted;

        private System.Threading.SendOrPostCallback getHostHIDsbyDescriptionOperationCompleted;

        private System.Threading.SendOrPostCallback getHostHIDsbyDescriptionAsStringOperationCompleted;

        private System.Threading.SendOrPostCallback getInformationAssociatedWithHIDOperationCompleted;

        private System.Threading.SendOrPostCallback getNMPositionAuthOperationCompleted;

        private System.Threading.SendOrPostCallback getHIDByAttributesOperationCompleted;

        private System.Threading.SendOrPostCallback createCryptoHIDOperationCompleted;

        private System.Threading.SendOrPostCallback createCryptoHIDfromReferenceOperationCompleted;

        /// <remarks/>
        public NetworkManagerApplicationService()
        {
            this.Url = "http://localhost:8082/axis/services/NetworkManagerApplication";
        }

        /// <remarks/>
        public event openSessionCompletedEventHandler openSessionCompleted;

        /// <remarks/>
        public event sendDataCompletedEventHandler sendDataCompleted;

        /// <remarks/>
        public event receiveDataCompletedEventHandler receiveDataCompleted;

        /// <remarks/>
        public event closeSessionCompletedEventHandler closeSessionCompleted;

        /// <remarks/>
        public event getSessionParameterCompletedEventHandler getSessionParameterCompleted;

        /// <remarks/>
        public event setSessionParameterCompletedEventHandler setSessionParameterCompleted;

        /// <remarks/>
        public event synchronizeSessionsListCompletedEventHandler synchronizeSessionsListCompleted;

        /// <remarks/>
        public event addSessionRemoteClientCompletedEventHandler addSessionRemoteClientCompleted;

        /// <remarks/>
        public event createHIDCompletedEventHandler createHIDCompleted;

        /// <remarks/>
        public event createHID1CompletedEventHandler createHID1Completed;

        /// <remarks/>
        public event createHIDwDescCompletedEventHandler createHIDwDescCompleted;

        /// <remarks/>
        public event createHIDwDesc1CompletedEventHandler createHIDwDesc1Completed;

        /// <remarks/>
        public event renewHIDCompletedEventHandler renewHIDCompleted;

        /// <remarks/>
        public event renewHIDInfoCompletedEventHandler renewHIDInfoCompleted;

        /// <remarks/>
        public event addContextCompletedEventHandler addContextCompleted;

        /// <remarks/>
        public event getHostHIDsCompletedEventHandler getHostHIDsCompleted;

        /// <remarks/>
        public event getHIDsCompletedEventHandler getHIDsCompleted;

        /// <remarks/>
        public event getContextHIDsCompletedEventHandler getContextHIDsCompleted;

        /// <remarks/>
        public event getHIDsbyDescriptionCompletedEventHandler getHIDsbyDescriptionCompleted;

        /// <remarks/>
        public event removeHIDCompletedEventHandler removeHIDCompleted;

        /// <remarks/>
        public event removeAllHIDCompletedEventHandler removeAllHIDCompleted;

        /// <remarks/>
        public event startNMCompletedEventHandler startNMCompleted;

        /// <remarks/>
        public event stopNMCompletedEventHandler stopNMCompleted;

        /// <remarks/>
        public event getHostHIDsAsStringCompletedEventHandler getHostHIDsAsStringCompleted;

        /// <remarks/>
        public event getHIDsAsStringCompletedEventHandler getHIDsAsStringCompleted;

        /// <remarks/>
        public event getContextHIDsAsStringCompletedEventHandler getContextHIDsAsStringCompleted;

        /// <remarks/>
        public event getHIDsbyDescriptionAsStringCompletedEventHandler getHIDsbyDescriptionAsStringCompleted;

        /// <remarks/>
        public event getNMPositionCompletedEventHandler getNMPositionCompleted;

        /// <remarks/>
        public event getDescriptionbyHIDCompletedEventHandler getDescriptionbyHIDCompleted;

        /// <remarks/>
        public event getHostHIDsbyDescriptionCompletedEventHandler getHostHIDsbyDescriptionCompleted;

        /// <remarks/>
        public event getHostHIDsbyDescriptionAsStringCompletedEventHandler getHostHIDsbyDescriptionAsStringCompleted;

        /// <remarks/>
        public event getInformationAssociatedWithHIDCompletedEventHandler getInformationAssociatedWithHIDCompleted;

        /// <remarks/>
        public event getNMPositionAuthCompletedEventHandler getNMPositionAuthCompleted;

        /// <remarks/>
        public event getHIDByAttributesCompletedEventHandler getHIDByAttributesCompleted;

        /// <remarks/>
        public event createCryptoHIDCompletedEventHandler createCryptoHIDCompleted;

        /// <remarks/>
        public event createCryptoHIDfromReferenceCompletedEventHandler createCryptoHIDfromReferenceCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("openSessionReturn")]
        public string openSession(string in0, string in1)
        {
            object[] results = this.Invoke("openSession", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginopenSession(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("openSession", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndopenSession(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void openSessionAsync(string in0, string in1)
        {
            this.openSessionAsync(in0, in1, null);
        }

        /// <remarks/>
        public void openSessionAsync(string in0, string in1, object userState)
        {
            if ((this.openSessionOperationCompleted == null))
            {
                this.openSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenSessionOperationCompleted);
            }
            this.InvokeAsync("openSession", new object[] {
                    in0,
                    in1}, this.openSessionOperationCompleted, userState);
        }

        private void OnopenSessionOperationCompleted(object arg)
        {
            if ((this.openSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openSessionCompleted(this, new openSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendDataReturn")]
        public NMResponse sendData(string in0, string in1, string in2, string in3)
        {
            object[] results = this.Invoke("sendData", new object[] {
                    in0,
                    in1,
                    in2,
                    in3});
            return ((NMResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendData(string in0, string in1, string in2, string in3, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("sendData", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, callback, asyncState);
        }

        /// <remarks/>
        public NMResponse EndsendData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((NMResponse)(results[0]));
        }

        /// <remarks/>
        public void sendDataAsync(string in0, string in1, string in2, string in3)
        {
            this.sendDataAsync(in0, in1, in2, in3, null);
        }

        /// <remarks/>
        public void sendDataAsync(string in0, string in1, string in2, string in3, object userState)
        {
            if ((this.sendDataOperationCompleted == null))
            {
                this.sendDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendDataOperationCompleted);
            }
            this.InvokeAsync("sendData", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, this.sendDataOperationCompleted, userState);
        }

        private void OnsendDataOperationCompleted(object arg)
        {
            if ((this.sendDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendDataCompleted(this, new sendDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("receiveDataReturn")]
        public NMResponse receiveData(string in0, string in1, string in2, string in3)
        {
            object[] results = this.Invoke("receiveData", new object[] {
                    in0,
                    in1,
                    in2,
                    in3});
            return ((NMResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginreceiveData(string in0, string in1, string in2, string in3, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("receiveData", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, callback, asyncState);
        }

        /// <remarks/>
        public NMResponse EndreceiveData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((NMResponse)(results[0]));
        }

        /// <remarks/>
        public void receiveDataAsync(string in0, string in1, string in2, string in3)
        {
            this.receiveDataAsync(in0, in1, in2, in3, null);
        }

        /// <remarks/>
        public void receiveDataAsync(string in0, string in1, string in2, string in3, object userState)
        {
            if ((this.receiveDataOperationCompleted == null))
            {
                this.receiveDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveDataOperationCompleted);
            }
            this.InvokeAsync("receiveData", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, this.receiveDataOperationCompleted, userState);
        }

        private void OnreceiveDataOperationCompleted(object arg)
        {
            if ((this.receiveDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveDataCompleted(this, new receiveDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        public void closeSession(string in0)
        {
            this.Invoke("closeSession", new object[] {
                    in0});
        }

        /// <remarks/>
        public System.IAsyncResult BegincloseSession(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("closeSession", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public void EndcloseSession(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void closeSessionAsync(string in0)
        {
            this.closeSessionAsync(in0, null);
        }

        /// <remarks/>
        public void closeSessionAsync(string in0, object userState)
        {
            if ((this.closeSessionOperationCompleted == null))
            {
                this.closeSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseSessionOperationCompleted);
            }
            this.InvokeAsync("closeSession", new object[] {
                    in0}, this.closeSessionOperationCompleted, userState);
        }

        private void OncloseSessionOperationCompleted(object arg)
        {
            if ((this.closeSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSessionParameterReturn")]
        public string getSessionParameter(string in0, string in1)
        {
            object[] results = this.Invoke("getSessionParameter", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetSessionParameter(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getSessionParameter", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetSessionParameter(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getSessionParameterAsync(string in0, string in1)
        {
            this.getSessionParameterAsync(in0, in1, null);
        }

        /// <remarks/>
        public void getSessionParameterAsync(string in0, string in1, object userState)
        {
            if ((this.getSessionParameterOperationCompleted == null))
            {
                this.getSessionParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSessionParameterOperationCompleted);
            }
            this.InvokeAsync("getSessionParameter", new object[] {
                    in0,
                    in1}, this.getSessionParameterOperationCompleted, userState);
        }

        private void OngetSessionParameterOperationCompleted(object arg)
        {
            if ((this.getSessionParameterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSessionParameterCompleted(this, new getSessionParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        public void setSessionParameter(string in0, string in1, string in2)
        {
            this.Invoke("setSessionParameter", new object[] {
                    in0,
                    in1,
                    in2});
        }

        /// <remarks/>
        public System.IAsyncResult BeginsetSessionParameter(string in0, string in1, string in2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("setSessionParameter", new object[] {
                    in0,
                    in1,
                    in2}, callback, asyncState);
        }

        /// <remarks/>
        public void EndsetSessionParameter(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void setSessionParameterAsync(string in0, string in1, string in2)
        {
            this.setSessionParameterAsync(in0, in1, in2, null);
        }

        /// <remarks/>
        public void setSessionParameterAsync(string in0, string in1, string in2, object userState)
        {
            if ((this.setSessionParameterOperationCompleted == null))
            {
                this.setSessionParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSessionParameterOperationCompleted);
            }
            this.InvokeAsync("setSessionParameter", new object[] {
                    in0,
                    in1,
                    in2}, this.setSessionParameterOperationCompleted, userState);
        }

        private void OnsetSessionParameterOperationCompleted(object arg)
        {
            if ((this.setSessionParameterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSessionParameterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("synchronizeSessionsListReturn")]
        public Vector synchronizeSessionsList(string in0, string in1)
        {
            object[] results = this.Invoke("synchronizeSessionsList", new object[] {
                    in0,
                    in1});
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsynchronizeSessionsList(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("synchronizeSessionsList", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public Vector EndsynchronizeSessionsList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public void synchronizeSessionsListAsync(string in0, string in1)
        {
            this.synchronizeSessionsListAsync(in0, in1, null);
        }

        /// <remarks/>
        public void synchronizeSessionsListAsync(string in0, string in1, object userState)
        {
            if ((this.synchronizeSessionsListOperationCompleted == null))
            {
                this.synchronizeSessionsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchronizeSessionsListOperationCompleted);
            }
            this.InvokeAsync("synchronizeSessionsList", new object[] {
                    in0,
                    in1}, this.synchronizeSessionsListOperationCompleted, userState);
        }

        private void OnsynchronizeSessionsListOperationCompleted(object arg)
        {
            if ((this.synchronizeSessionsListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchronizeSessionsListCompleted(this, new synchronizeSessionsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        public void addSessionRemoteClient(string in0, string in1, string in2)
        {
            this.Invoke("addSessionRemoteClient", new object[] {
                    in0,
                    in1,
                    in2});
        }

        /// <remarks/>
        public System.IAsyncResult BeginaddSessionRemoteClient(string in0, string in1, string in2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("addSessionRemoteClient", new object[] {
                    in0,
                    in1,
                    in2}, callback, asyncState);
        }

        /// <remarks/>
        public void EndaddSessionRemoteClient(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void addSessionRemoteClientAsync(string in0, string in1, string in2)
        {
            this.addSessionRemoteClientAsync(in0, in1, in2, null);
        }

        /// <remarks/>
        public void addSessionRemoteClientAsync(string in0, string in1, string in2, object userState)
        {
            if ((this.addSessionRemoteClientOperationCompleted == null))
            {
                this.addSessionRemoteClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSessionRemoteClientOperationCompleted);
            }
            this.InvokeAsync("addSessionRemoteClient", new object[] {
                    in0,
                    in1,
                    in2}, this.addSessionRemoteClientOperationCompleted, userState);
        }

        private void OnaddSessionRemoteClientOperationCompleted(object arg)
        {
            if ((this.addSessionRemoteClientCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSessionRemoteClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("createHIDReturn")]
        public string createHID(long in0, int in1)
        {
            object[] results = this.Invoke("createHID", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateHID(long in0, int in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createHID", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndcreateHID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createHIDAsync(long in0, int in1)
        {
            this.createHIDAsync(in0, in1, null);
        }

        /// <remarks/>
        public void createHIDAsync(long in0, int in1, object userState)
        {
            if ((this.createHIDOperationCompleted == null))
            {
                this.createHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateHIDOperationCompleted);
            }
            this.InvokeAsync("createHID", new object[] {
                    in0,
                    in1}, this.createHIDOperationCompleted, userState);
        }

        private void OncreateHIDOperationCompleted(object arg)
        {
            if ((this.createHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createHIDCompleted(this, new createHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName = "createHID1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("createHIDReturn")]
        public string createHID()
        {
            object[] results = this.Invoke("createHID1", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateHID1(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createHID1", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndcreateHID1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createHID1Async()
        {
            this.createHID1Async(null);
        }

        /// <remarks/>
        public void createHID1Async(object userState)
        {
            if ((this.createHID1OperationCompleted == null))
            {
                this.createHID1OperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateHID1OperationCompleted);
            }
            this.InvokeAsync("createHID1", new object[0], this.createHID1OperationCompleted, userState);
        }

        private void OncreateHID1OperationCompleted(object arg)
        {
            if ((this.createHID1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createHID1Completed(this, new createHID1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("createHIDwDescReturn")]
        public string createHIDwDesc(string in0, string in1)
        {
            object[] results = this.Invoke("createHIDwDesc", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateHIDwDesc(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createHIDwDesc", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndcreateHIDwDesc(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createHIDwDescAsync(string in0, string in1)
        {
            this.createHIDwDescAsync(in0, in1, null);
        }

        /// <remarks/>
        public void createHIDwDescAsync(string in0, string in1, object userState)
        {
            if ((this.createHIDwDescOperationCompleted == null))
            {
                this.createHIDwDescOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateHIDwDescOperationCompleted);
            }
            this.InvokeAsync("createHIDwDesc", new object[] {
                    in0,
                    in1}, this.createHIDwDescOperationCompleted, userState);
        }

        private void OncreateHIDwDescOperationCompleted(object arg)
        {
            if ((this.createHIDwDescCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createHIDwDescCompleted(this, new createHIDwDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName = "createHIDwDesc1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("createHIDwDescReturn")]
        public string createHIDwDesc(long in0, int in1, string in2, string in3)
        {
            object[] results = this.Invoke("createHIDwDesc1", new object[] {
                    in0,
                    in1,
                    in2,
                    in3});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateHIDwDesc1(long in0, int in1, string in2, string in3, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createHIDwDesc1", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, callback, asyncState);
        }

        /// <remarks/>
        public string EndcreateHIDwDesc1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createHIDwDesc1Async(long in0, int in1, string in2, string in3)
        {
            this.createHIDwDesc1Async(in0, in1, in2, in3, null);
        }

        /// <remarks/>
        public void createHIDwDesc1Async(long in0, int in1, string in2, string in3, object userState)
        {
            if ((this.createHIDwDesc1OperationCompleted == null))
            {
                this.createHIDwDesc1OperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateHIDwDesc1OperationCompleted);
            }
            this.InvokeAsync("createHIDwDesc1", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, this.createHIDwDesc1OperationCompleted, userState);
        }

        private void OncreateHIDwDesc1OperationCompleted(object arg)
        {
            if ((this.createHIDwDesc1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createHIDwDesc1Completed(this, new createHIDwDesc1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("renewHIDReturn")]
        public string renewHID(long in0, int in1, string in2)
        {
            object[] results = this.Invoke("renewHID", new object[] {
                    in0,
                    in1,
                    in2});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginrenewHID(long in0, int in1, string in2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("renewHID", new object[] {
                    in0,
                    in1,
                    in2}, callback, asyncState);
        }

        /// <remarks/>
        public string EndrenewHID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void renewHIDAsync(long in0, int in1, string in2)
        {
            this.renewHIDAsync(in0, in1, in2, null);
        }

        /// <remarks/>
        public void renewHIDAsync(long in0, int in1, string in2, object userState)
        {
            if ((this.renewHIDOperationCompleted == null))
            {
                this.renewHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenewHIDOperationCompleted);
            }
            this.InvokeAsync("renewHID", new object[] {
                    in0,
                    in1,
                    in2}, this.renewHIDOperationCompleted, userState);
        }

        private void OnrenewHIDOperationCompleted(object arg)
        {
            if ((this.renewHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renewHIDCompleted(this, new renewHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("renewHIDInfoReturn")]
        public string renewHIDInfo(string in0, string in1, string in2)
        {
            object[] results = this.Invoke("renewHIDInfo", new object[] {
                    in0,
                    in1,
                    in2});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginrenewHIDInfo(string in0, string in1, string in2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("renewHIDInfo", new object[] {
                    in0,
                    in1,
                    in2}, callback, asyncState);
        }

        /// <remarks/>
        public string EndrenewHIDInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void renewHIDInfoAsync(string in0, string in1, string in2)
        {
            this.renewHIDInfoAsync(in0, in1, in2, null);
        }

        /// <remarks/>
        public void renewHIDInfoAsync(string in0, string in1, string in2, object userState)
        {
            if ((this.renewHIDInfoOperationCompleted == null))
            {
                this.renewHIDInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenewHIDInfoOperationCompleted);
            }
            this.InvokeAsync("renewHIDInfo", new object[] {
                    in0,
                    in1,
                    in2}, this.renewHIDInfoOperationCompleted, userState);
        }

        private void OnrenewHIDInfoOperationCompleted(object arg)
        {
            if ((this.renewHIDInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renewHIDInfoCompleted(this, new renewHIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("addContextReturn")]
        public string addContext(long in0, string in1)
        {
            object[] results = this.Invoke("addContext", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginaddContext(long in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("addContext", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndaddContext(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void addContextAsync(long in0, string in1)
        {
            this.addContextAsync(in0, in1, null);
        }

        /// <remarks/>
        public void addContextAsync(long in0, string in1, object userState)
        {
            if ((this.addContextOperationCompleted == null))
            {
                this.addContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddContextOperationCompleted);
            }
            this.InvokeAsync("addContext", new object[] {
                    in0,
                    in1}, this.addContextOperationCompleted, userState);
        }

        private void OnaddContextOperationCompleted(object arg)
        {
            if ((this.addContextCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addContextCompleted(this, new addContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHostHIDsReturn")]
        public Vector getHostHIDs()
        {
            object[] results = this.Invoke("getHostHIDs", new object[0]);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHostHIDs(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHostHIDs", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Vector EndgetHostHIDs(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public void getHostHIDsAsync()
        {
            this.getHostHIDsAsync(null);
        }

        /// <remarks/>
        public void getHostHIDsAsync(object userState)
        {
            if ((this.getHostHIDsOperationCompleted == null))
            {
                this.getHostHIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHostHIDsOperationCompleted);
            }
            this.InvokeAsync("getHostHIDs", new object[0], this.getHostHIDsOperationCompleted, userState);
        }

        private void OngetHostHIDsOperationCompleted(object arg)
        {
            if ((this.getHostHIDsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHostHIDsCompleted(this, new getHostHIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHIDsReturn")]
        public Vector getHIDs()
        {
            object[] results = this.Invoke("getHIDs", new object[0]);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHIDs(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHIDs", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Vector EndgetHIDs(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public void getHIDsAsync()
        {
            this.getHIDsAsync(null);
        }

        /// <remarks/>
        public void getHIDsAsync(object userState)
        {
            if ((this.getHIDsOperationCompleted == null))
            {
                this.getHIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHIDsOperationCompleted);
            }
            this.InvokeAsync("getHIDs", new object[0], this.getHIDsOperationCompleted, userState);
        }

        private void OngetHIDsOperationCompleted(object arg)
        {
            if ((this.getHIDsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHIDsCompleted(this, new getHIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getContextHIDsReturn")]
        public Vector getContextHIDs(string in0, string in1)
        {
            object[] results = this.Invoke("getContextHIDs", new object[] {
                    in0,
                    in1});
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetContextHIDs(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getContextHIDs", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public Vector EndgetContextHIDs(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public void getContextHIDsAsync(string in0, string in1)
        {
            this.getContextHIDsAsync(in0, in1, null);
        }

        /// <remarks/>
        public void getContextHIDsAsync(string in0, string in1, object userState)
        {
            if ((this.getContextHIDsOperationCompleted == null))
            {
                this.getContextHIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContextHIDsOperationCompleted);
            }
            this.InvokeAsync("getContextHIDs", new object[] {
                    in0,
                    in1}, this.getContextHIDsOperationCompleted, userState);
        }

        private void OngetContextHIDsOperationCompleted(object arg)
        {
            if ((this.getContextHIDsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContextHIDsCompleted(this, new getContextHIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHIDsbyDescriptionReturn")]
        public Vector getHIDsbyDescription(string in0)
        {
            object[] results = this.Invoke("getHIDsbyDescription", new object[] {
                    in0});
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHIDsbyDescription(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHIDsbyDescription", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public Vector EndgetHIDsbyDescription(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Vector)(results[0]));
        }

        /// <remarks/>
        public void getHIDsbyDescriptionAsync(string in0)
        {
            this.getHIDsbyDescriptionAsync(in0, null);
        }

        /// <remarks/>
        public void getHIDsbyDescriptionAsync(string in0, object userState)
        {
            if ((this.getHIDsbyDescriptionOperationCompleted == null))
            {
                this.getHIDsbyDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHIDsbyDescriptionOperationCompleted);
            }
            this.InvokeAsync("getHIDsbyDescription", new object[] {
                    in0}, this.getHIDsbyDescriptionOperationCompleted, userState);
        }

        private void OngetHIDsbyDescriptionOperationCompleted(object arg)
        {
            if ((this.getHIDsbyDescriptionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHIDsbyDescriptionCompleted(this, new getHIDsbyDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        public void removeHID(string in0)
        {
            this.Invoke("removeHID", new object[] {
                    in0});
        }

        /// <remarks/>
        public System.IAsyncResult BeginremoveHID(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("removeHID", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public void EndremoveHID(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void removeHIDAsync(string in0)
        {
            this.removeHIDAsync(in0, null);
        }

        /// <remarks/>
        public void removeHIDAsync(string in0, object userState)
        {
            if ((this.removeHIDOperationCompleted == null))
            {
                this.removeHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveHIDOperationCompleted);
            }
            this.InvokeAsync("removeHID", new object[] {
                    in0}, this.removeHIDOperationCompleted, userState);
        }

        private void OnremoveHIDOperationCompleted(object arg)
        {
            if ((this.removeHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeHIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        public void removeAllHID()
        {
            this.Invoke("removeAllHID", new object[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginremoveAllHID(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("removeAllHID", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public void EndremoveAllHID(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void removeAllHIDAsync()
        {
            this.removeAllHIDAsync(null);
        }

        /// <remarks/>
        public void removeAllHIDAsync(object userState)
        {
            if ((this.removeAllHIDOperationCompleted == null))
            {
                this.removeAllHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAllHIDOperationCompleted);
            }
            this.InvokeAsync("removeAllHID", new object[0], this.removeAllHIDOperationCompleted, userState);
        }

        private void OnremoveAllHIDOperationCompleted(object arg)
        {
            if ((this.removeAllHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAllHIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("startNMReturn")]
        public string startNM()
        {
            object[] results = this.Invoke("startNM", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginstartNM(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("startNM", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndstartNM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void startNMAsync()
        {
            this.startNMAsync(null);
        }

        /// <remarks/>
        public void startNMAsync(object userState)
        {
            if ((this.startNMOperationCompleted == null))
            {
                this.startNMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartNMOperationCompleted);
            }
            this.InvokeAsync("startNM", new object[0], this.startNMOperationCompleted, userState);
        }

        private void OnstartNMOperationCompleted(object arg)
        {
            if ((this.startNMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startNMCompleted(this, new startNMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("stopNMReturn")]
        public string stopNM()
        {
            object[] results = this.Invoke("stopNM", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginstopNM(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("stopNM", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndstopNM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void stopNMAsync()
        {
            this.stopNMAsync(null);
        }

        /// <remarks/>
        public void stopNMAsync(object userState)
        {
            if ((this.stopNMOperationCompleted == null))
            {
                this.stopNMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstopNMOperationCompleted);
            }
            this.InvokeAsync("stopNM", new object[0], this.stopNMOperationCompleted, userState);
        }

        private void OnstopNMOperationCompleted(object arg)
        {
            if ((this.stopNMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.stopNMCompleted(this, new stopNMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHostHIDsAsStringReturn")]
        public string getHostHIDsAsString()
        {
            object[] results = this.Invoke("getHostHIDsAsString", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHostHIDsAsString(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHostHIDsAsString", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndgetHostHIDsAsString(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getHostHIDsAsStringAsync()
        {
            this.getHostHIDsAsStringAsync(null);
        }

        /// <remarks/>
        public void getHostHIDsAsStringAsync(object userState)
        {
            if ((this.getHostHIDsAsStringOperationCompleted == null))
            {
                this.getHostHIDsAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHostHIDsAsStringOperationCompleted);
            }
            this.InvokeAsync("getHostHIDsAsString", new object[0], this.getHostHIDsAsStringOperationCompleted, userState);
        }

        private void OngetHostHIDsAsStringOperationCompleted(object arg)
        {
            if ((this.getHostHIDsAsStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHostHIDsAsStringCompleted(this, new getHostHIDsAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHIDsAsStringReturn")]
        public string getHIDsAsString()
        {
            object[] results = this.Invoke("getHIDsAsString", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHIDsAsString(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHIDsAsString", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndgetHIDsAsString(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getHIDsAsStringAsync()
        {
            this.getHIDsAsStringAsync(null);
        }

        /// <remarks/>
        public void getHIDsAsStringAsync(object userState)
        {
            if ((this.getHIDsAsStringOperationCompleted == null))
            {
                this.getHIDsAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHIDsAsStringOperationCompleted);
            }
            this.InvokeAsync("getHIDsAsString", new object[0], this.getHIDsAsStringOperationCompleted, userState);
        }

        private void OngetHIDsAsStringOperationCompleted(object arg)
        {
            if ((this.getHIDsAsStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHIDsAsStringCompleted(this, new getHIDsAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getContextHIDsAsStringReturn")]
        public string getContextHIDsAsString(string in0, string in1)
        {
            object[] results = this.Invoke("getContextHIDsAsString", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetContextHIDsAsString(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getContextHIDsAsString", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetContextHIDsAsString(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getContextHIDsAsStringAsync(string in0, string in1)
        {
            this.getContextHIDsAsStringAsync(in0, in1, null);
        }

        /// <remarks/>
        public void getContextHIDsAsStringAsync(string in0, string in1, object userState)
        {
            if ((this.getContextHIDsAsStringOperationCompleted == null))
            {
                this.getContextHIDsAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContextHIDsAsStringOperationCompleted);
            }
            this.InvokeAsync("getContextHIDsAsString", new object[] {
                    in0,
                    in1}, this.getContextHIDsAsStringOperationCompleted, userState);
        }

        private void OngetContextHIDsAsStringOperationCompleted(object arg)
        {
            if ((this.getContextHIDsAsStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContextHIDsAsStringCompleted(this, new getContextHIDsAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHIDsbyDescriptionAsStringReturn")]
        public string getHIDsbyDescriptionAsString(string in0)
        {
            object[] results = this.Invoke("getHIDsbyDescriptionAsString", new object[] {
                    in0});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHIDsbyDescriptionAsString(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHIDsbyDescriptionAsString", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetHIDsbyDescriptionAsString(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getHIDsbyDescriptionAsStringAsync(string in0)
        {
            this.getHIDsbyDescriptionAsStringAsync(in0, null);
        }

        /// <remarks/>
        public void getHIDsbyDescriptionAsStringAsync(string in0, object userState)
        {
            if ((this.getHIDsbyDescriptionAsStringOperationCompleted == null))
            {
                this.getHIDsbyDescriptionAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHIDsbyDescriptionAsStringOperationCompleted);
            }
            this.InvokeAsync("getHIDsbyDescriptionAsString", new object[] {
                    in0}, this.getHIDsbyDescriptionAsStringOperationCompleted, userState);
        }

        private void OngetHIDsbyDescriptionAsStringOperationCompleted(object arg)
        {
            if ((this.getHIDsbyDescriptionAsStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHIDsbyDescriptionAsStringCompleted(this, new getHIDsbyDescriptionAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getNMPositionReturn")]
        public string getNMPosition()
        {
            object[] results = this.Invoke("getNMPosition", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetNMPosition(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getNMPosition", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndgetNMPosition(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getNMPositionAsync()
        {
            this.getNMPositionAsync(null);
        }

        /// <remarks/>
        public void getNMPositionAsync(object userState)
        {
            if ((this.getNMPositionOperationCompleted == null))
            {
                this.getNMPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNMPositionOperationCompleted);
            }
            this.InvokeAsync("getNMPosition", new object[0], this.getNMPositionOperationCompleted, userState);
        }

        private void OngetNMPositionOperationCompleted(object arg)
        {
            if ((this.getNMPositionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNMPositionCompleted(this, new getNMPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDescriptionbyHIDReturn")]
        public string getDescriptionbyHID(string in0)
        {
            object[] results = this.Invoke("getDescriptionbyHID", new object[] {
                    in0});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetDescriptionbyHID(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getDescriptionbyHID", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetDescriptionbyHID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getDescriptionbyHIDAsync(string in0)
        {
            this.getDescriptionbyHIDAsync(in0, null);
        }

        /// <remarks/>
        public void getDescriptionbyHIDAsync(string in0, object userState)
        {
            if ((this.getDescriptionbyHIDOperationCompleted == null))
            {
                this.getDescriptionbyHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDescriptionbyHIDOperationCompleted);
            }
            this.InvokeAsync("getDescriptionbyHID", new object[] {
                    in0}, this.getDescriptionbyHIDOperationCompleted, userState);
        }

        private void OngetDescriptionbyHIDOperationCompleted(object arg)
        {
            if ((this.getDescriptionbyHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDescriptionbyHIDCompleted(this, new getDescriptionbyHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHostHIDsbyDescriptionReturn")]
        public string[] getHostHIDsbyDescription(string in0)
        {
            object[] results = this.Invoke("getHostHIDsbyDescription", new object[] {
                    in0});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHostHIDsbyDescription(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHostHIDsbyDescription", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndgetHostHIDsbyDescription(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void getHostHIDsbyDescriptionAsync(string in0)
        {
            this.getHostHIDsbyDescriptionAsync(in0, null);
        }

        /// <remarks/>
        public void getHostHIDsbyDescriptionAsync(string in0, object userState)
        {
            if ((this.getHostHIDsbyDescriptionOperationCompleted == null))
            {
                this.getHostHIDsbyDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHostHIDsbyDescriptionOperationCompleted);
            }
            this.InvokeAsync("getHostHIDsbyDescription", new object[] {
                    in0}, this.getHostHIDsbyDescriptionOperationCompleted, userState);
        }

        private void OngetHostHIDsbyDescriptionOperationCompleted(object arg)
        {
            if ((this.getHostHIDsbyDescriptionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHostHIDsbyDescriptionCompleted(this, new getHostHIDsbyDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHostHIDsbyDescriptionAsStringReturn")]
        public string getHostHIDsbyDescriptionAsString(string in0)
        {
            object[] results = this.Invoke("getHostHIDsbyDescriptionAsString", new object[] {
                    in0});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHostHIDsbyDescriptionAsString(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHostHIDsbyDescriptionAsString", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetHostHIDsbyDescriptionAsString(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getHostHIDsbyDescriptionAsStringAsync(string in0)
        {
            this.getHostHIDsbyDescriptionAsStringAsync(in0, null);
        }

        /// <remarks/>
        public void getHostHIDsbyDescriptionAsStringAsync(string in0, object userState)
        {
            if ((this.getHostHIDsbyDescriptionAsStringOperationCompleted == null))
            {
                this.getHostHIDsbyDescriptionAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHostHIDsbyDescriptionAsStringOperationCompleted);
            }
            this.InvokeAsync("getHostHIDsbyDescriptionAsString", new object[] {
                    in0}, this.getHostHIDsbyDescriptionAsStringOperationCompleted, userState);
        }

        private void OngetHostHIDsbyDescriptionAsStringOperationCompleted(object arg)
        {
            if ((this.getHostHIDsbyDescriptionAsStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHostHIDsbyDescriptionAsStringCompleted(this, new getHostHIDsbyDescriptionAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getInformationAssociatedWithHIDReturn")]
        public string getInformationAssociatedWithHID(string in0, string in1)
        {
            object[] results = this.Invoke("getInformationAssociatedWithHID", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetInformationAssociatedWithHID(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getInformationAssociatedWithHID", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetInformationAssociatedWithHID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getInformationAssociatedWithHIDAsync(string in0, string in1)
        {
            this.getInformationAssociatedWithHIDAsync(in0, in1, null);
        }

        /// <remarks/>
        public void getInformationAssociatedWithHIDAsync(string in0, string in1, object userState)
        {
            if ((this.getInformationAssociatedWithHIDOperationCompleted == null))
            {
                this.getInformationAssociatedWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInformationAssociatedWithHIDOperationCompleted);
            }
            this.InvokeAsync("getInformationAssociatedWithHID", new object[] {
                    in0,
                    in1}, this.getInformationAssociatedWithHIDOperationCompleted, userState);
        }

        private void OngetInformationAssociatedWithHIDOperationCompleted(object arg)
        {
            if ((this.getInformationAssociatedWithHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInformationAssociatedWithHIDCompleted(this, new getInformationAssociatedWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getNMPositionAuthReturn")]
        public string getNMPositionAuth(string in0)
        {
            object[] results = this.Invoke("getNMPositionAuth", new object[] {
                    in0});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetNMPositionAuth(string in0, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getNMPositionAuth", new object[] {
                    in0}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetNMPositionAuth(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getNMPositionAuthAsync(string in0)
        {
            this.getNMPositionAuthAsync(in0, null);
        }

        /// <remarks/>
        public void getNMPositionAuthAsync(string in0, object userState)
        {
            if ((this.getNMPositionAuthOperationCompleted == null))
            {
                this.getNMPositionAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNMPositionAuthOperationCompleted);
            }
            this.InvokeAsync("getNMPositionAuth", new object[] {
                    in0}, this.getNMPositionAuthOperationCompleted, userState);
        }

        private void OngetNMPositionAuthOperationCompleted(object arg)
        {
            if ((this.getNMPositionAuthCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNMPositionAuthCompleted(this, new getNMPositionAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getHIDByAttributesReturn")]
        public string getHIDByAttributes(string in0, string in1, string in2, long in3, int in4)
        {
            object[] results = this.Invoke("getHIDByAttributes", new object[] {
                    in0,
                    in1,
                    in2,
                    in3,
                    in4});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetHIDByAttributes(string in0, string in1, string in2, long in3, int in4, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getHIDByAttributes", new object[] {
                    in0,
                    in1,
                    in2,
                    in3,
                    in4}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetHIDByAttributes(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getHIDByAttributesAsync(string in0, string in1, string in2, long in3, int in4)
        {
            this.getHIDByAttributesAsync(in0, in1, in2, in3, in4, null);
        }

        /// <remarks/>
        public void getHIDByAttributesAsync(string in0, string in1, string in2, long in3, int in4, object userState)
        {
            if ((this.getHIDByAttributesOperationCompleted == null))
            {
                this.getHIDByAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHIDByAttributesOperationCompleted);
            }
            this.InvokeAsync("getHIDByAttributes", new object[] {
                    in0,
                    in1,
                    in2,
                    in3,
                    in4}, this.getHIDByAttributesOperationCompleted, userState);
        }

        private void OngetHIDByAttributesOperationCompleted(object arg)
        {
            if ((this.getHIDByAttributesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHIDByAttributesCompleted(this, new getHIDByAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("createCryptoHIDReturn")]
        public CryptoHIDResult createCryptoHID(string in0, string in1)
        {
            object[] results = this.Invoke("createCryptoHID", new object[] {
                    in0,
                    in1});
            return ((CryptoHIDResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateCryptoHID(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createCryptoHID", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public CryptoHIDResult EndcreateCryptoHID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CryptoHIDResult)(results[0]));
        }

        /// <remarks/>
        public void createCryptoHIDAsync(string in0, string in1)
        {
            this.createCryptoHIDAsync(in0, in1, null);
        }

        /// <remarks/>
        public void createCryptoHIDAsync(string in0, string in1, object userState)
        {
            if ((this.createCryptoHIDOperationCompleted == null))
            {
                this.createCryptoHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCryptoHIDOperationCompleted);
            }
            this.InvokeAsync("createCryptoHID", new object[] {
                    in0,
                    in1}, this.createCryptoHIDOperationCompleted, userState);
        }

        private void OncreateCryptoHIDOperationCompleted(object arg)
        {
            if ((this.createCryptoHIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCryptoHIDCompleted(this, new createCryptoHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://ws.network.IoT.eu.com", ResponseNamespace = "http://ws.network.IoT.eu.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("createCryptoHIDfromReferenceReturn")]
        public string createCryptoHIDfromReference(string in0, string in1)
        {
            object[] results = this.Invoke("createCryptoHIDfromReference", new object[] {
                    in0,
                    in1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateCryptoHIDfromReference(string in0, string in1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createCryptoHIDfromReference", new object[] {
                    in0,
                    in1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndcreateCryptoHIDfromReference(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createCryptoHIDfromReferenceAsync(string in0, string in1)
        {
            this.createCryptoHIDfromReferenceAsync(in0, in1, null);
        }

        /// <remarks/>
        public void createCryptoHIDfromReferenceAsync(string in0, string in1, object userState)
        {
            if ((this.createCryptoHIDfromReferenceOperationCompleted == null))
            {
                this.createCryptoHIDfromReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCryptoHIDfromReferenceOperationCompleted);
            }
            this.InvokeAsync("createCryptoHIDfromReference", new object[] {
                    in0,
                    in1}, this.createCryptoHIDfromReferenceOperationCompleted, userState);
        }

        private void OncreateCryptoHIDfromReferenceOperationCompleted(object arg)
        {
            if ((this.createCryptoHIDfromReferenceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCryptoHIDfromReferenceCompleted(this, new createCryptoHIDfromReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://ws.network.IoT.eu.com")]
    public partial class NMResponse
    {

        private string dataField;

        private string sessionIDField;

        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable = true)]
        public string data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable = true)]
        public string sessionID
        {
            get
            {
                return this.sessionIDField;
            }
            set
            {
                this.sessionIDField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://ws.network.IoT.eu.com")]
    public partial class CryptoHIDResult
    {

        private string hIDField;

        private string certRefField;

        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable = true)]
        public string HID
        {
            get
            {
                return this.hIDField;
            }
            set
            {
                this.hIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable = true)]
        public string certRef
        {
            get
            {
                return this.certRefField;
            }
            set
            {
                this.certRefField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://xml.apache.org/xml-soap")]
    public partial class Vector
    {

        private object[] itemField;

        /// <remarks/>
        public object[] item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void openSessionCompletedEventHandler(object sender, openSessionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal openSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void sendDataCompletedEventHandler(object sender, sendDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public NMResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((NMResponse)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void receiveDataCompletedEventHandler(object sender, receiveDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal receiveDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public NMResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((NMResponse)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void closeSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getSessionParameterCompletedEventHandler(object sender, getSessionParameterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSessionParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getSessionParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void setSessionParameterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void synchronizeSessionsListCompletedEventHandler(object sender, synchronizeSessionsListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchronizeSessionsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal synchronizeSessionsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Vector Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Vector)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void addSessionRemoteClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void createHIDCompletedEventHandler(object sender, createHIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void createHID1CompletedEventHandler(object sender, createHID1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createHID1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createHID1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void createHIDwDescCompletedEventHandler(object sender, createHIDwDescCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createHIDwDescCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createHIDwDescCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void createHIDwDesc1CompletedEventHandler(object sender, createHIDwDesc1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createHIDwDesc1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createHIDwDesc1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void renewHIDCompletedEventHandler(object sender, renewHIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class renewHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal renewHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void renewHIDInfoCompletedEventHandler(object sender, renewHIDInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class renewHIDInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal renewHIDInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void addContextCompletedEventHandler(object sender, addContextCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal addContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHostHIDsCompletedEventHandler(object sender, getHostHIDsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHostHIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHostHIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Vector Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Vector)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHIDsCompletedEventHandler(object sender, getHIDsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Vector Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Vector)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getContextHIDsCompletedEventHandler(object sender, getContextHIDsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContextHIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getContextHIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Vector Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Vector)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHIDsbyDescriptionCompletedEventHandler(object sender, getHIDsbyDescriptionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHIDsbyDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHIDsbyDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Vector Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Vector)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void removeHIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void removeAllHIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void startNMCompletedEventHandler(object sender, startNMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class startNMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal startNMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void stopNMCompletedEventHandler(object sender, stopNMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class stopNMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal stopNMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHostHIDsAsStringCompletedEventHandler(object sender, getHostHIDsAsStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHostHIDsAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHostHIDsAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHIDsAsStringCompletedEventHandler(object sender, getHIDsAsStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHIDsAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHIDsAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getContextHIDsAsStringCompletedEventHandler(object sender, getContextHIDsAsStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContextHIDsAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getContextHIDsAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHIDsbyDescriptionAsStringCompletedEventHandler(object sender, getHIDsbyDescriptionAsStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHIDsbyDescriptionAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHIDsbyDescriptionAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getNMPositionCompletedEventHandler(object sender, getNMPositionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNMPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getNMPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getDescriptionbyHIDCompletedEventHandler(object sender, getDescriptionbyHIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDescriptionbyHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getDescriptionbyHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHostHIDsbyDescriptionCompletedEventHandler(object sender, getHostHIDsbyDescriptionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHostHIDsbyDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHostHIDsbyDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHostHIDsbyDescriptionAsStringCompletedEventHandler(object sender, getHostHIDsbyDescriptionAsStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHostHIDsbyDescriptionAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHostHIDsbyDescriptionAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getInformationAssociatedWithHIDCompletedEventHandler(object sender, getInformationAssociatedWithHIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInformationAssociatedWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInformationAssociatedWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getNMPositionAuthCompletedEventHandler(object sender, getNMPositionAuthCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNMPositionAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getNMPositionAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getHIDByAttributesCompletedEventHandler(object sender, getHIDByAttributesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHIDByAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getHIDByAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void createCryptoHIDCompletedEventHandler(object sender, createCryptoHIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCryptoHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createCryptoHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CryptoHIDResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CryptoHIDResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void createCryptoHIDfromReferenceCompletedEventHandler(object sender, createCryptoHIDfromReferenceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCryptoHIDfromReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createCryptoHIDfromReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}