using OpenSource.UPnP;

namespace Intel.Sample
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvnameService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvnameService _S;
        public static string URN = "urn:schemas-upnp-org:computerService::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(DvnameService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_ComputerName;
        public System.String ComputerName
        {
            get
            {
               return((System.String)_S.GetStateVariable("ComputerName"));
            }
            set
            {
               _S.SetStateVariable("ComputerName", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ComputerName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ComputerName")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ComputerName")).Accumulator = value;
            }
        }
        public double ModerationDuration_ComputerName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ComputerName")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ComputerName")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_GetComputerName(out System.String name);

        public Delegate_GetComputerName External_GetComputerName = null;

        public void RemoveStateVariable_ComputerName()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("ComputerName"));
        }
        public void RemoveAction_GetComputerName()
        {
             _S.GetUPnPService().RemoveMethod("GetComputerName");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvnameService
        {
            private DvnameService Outer = null;
            private UPnPService S;
            internal _DvnameService(DvnameService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[1];
                RetVal[0] = new UPnPModeratedStateVariable("ComputerName", typeof(System.String), false);
                RetVal[0].AddAssociation("GetComputerName", "name");

                UPnPService S = new UPnPService(1, "urn:upnp-org:serviceId:computer:1", "urn:schemas-upnp-org:computerService::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetComputerName");
                return(S);
            }

            public void GetComputerName(out System.String name)
            {
                if (Outer.External_GetComputerName != null)
                {
                    Outer.External_GetComputerName(out name);
                }
                else
                {
                    Sink_GetComputerName(out name);
                }
            }

            public Delegate_GetComputerName Sink_GetComputerName;
        }
        public DvnameService()
        {
            _S = new _DvnameService(this);
            _S.GetUPnPService().GetStateVariableObject("ComputerName").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_ComputerName);
            _S.Sink_GetComputerName = new Delegate_GetComputerName(GetComputerName);
        }
        public DvnameService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_ComputerName(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_ComputerName != null) OnStateVariableModified_ComputerName(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: GetComputerName
        /// </summary>
        /// <param name="name">Associated State Variable: ComputerName</param>
        public void GetComputerName(out System.String name)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}