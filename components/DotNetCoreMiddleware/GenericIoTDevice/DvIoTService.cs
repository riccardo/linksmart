using OpenSource.UPnP;

namespace IoT
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvIoTService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvIoTService _S;
        public static string URN = "urn:schemas-upnp-org:IoTservice::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(DvIoTService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_IoTWSEndpoint;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Property;
        public event OnStateVariableModifiedHandler OnStateVariableModified_WSDL;
        public event OnStateVariableModifiedHandler OnStateVariableModified_DiscoveryInfo;
        public event OnStateVariableModifiedHandler OnStateVariableModified_SecurityInfo;
        public event OnStateVariableModifiedHandler OnStateVariableModified_UDN;
        public event OnStateVariableModifiedHandler OnStateVariableModified_IoTID;
        public event OnStateVariableModifiedHandler OnStateVariableModified_DACEndpoint;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Status;
        public event OnStateVariableModifiedHandler OnStateVariableModified_ResolveMessage;
        public event OnStateVariableModifiedHandler OnStateVariableModified_PropertyValue;
        public event OnStateVariableModifiedHandler OnStateVariableModified_WSEndpoint;
        public event OnStateVariableModifiedHandler OnStateVariableModified_ErrorMessage;
        public event OnStateVariableModifiedHandler OnStateVariableModified_HasError;
        public System.String IoTWSEndpoint
        {
            get
            {
               return((System.String)_S.GetStateVariable("IoTWSEndpoint"));
            }
            set
            {
               _S.SetStateVariable("IoTWSEndpoint", value);
            }
        }
        public System.String Property
        {
            get
            {
               return((System.String)_S.GetStateVariable("Property"));
            }
            set
            {
               _S.SetStateVariable("Property", value);
            }
        }
        public System.String WSDL
        {
            get
            {
               return((System.String)_S.GetStateVariable("WSDL"));
            }
            set
            {
               _S.SetStateVariable("WSDL", value);
            }
        }
        public System.String DiscoveryInfo
        {
            get
            {
               return((System.String)_S.GetStateVariable("DiscoveryInfo"));
            }
            set
            {
               _S.SetStateVariable("DiscoveryInfo", value);
            }
        }
        public System.String SecurityInfo
        {
            get
            {
               return((System.String)_S.GetStateVariable("SecurityInfo"));
            }
            set
            {
               _S.SetStateVariable("SecurityInfo", value);
            }
        }
        public System.String UDN
        {
            get
            {
               return((System.String)_S.GetStateVariable("UDN"));
            }
            set
            {
               _S.SetStateVariable("UDN", value);
            }
        }
        public System.String IoTID
        {
            get
            {
               return((System.String)_S.GetStateVariable("IoTID"));
            }
            set
            {
               _S.SetStateVariable("IoTID", value);
            }
        }
        public System.String DACEndpoint
        {
            get
            {
               return((System.String)_S.GetStateVariable("DACEndpoint"));
            }
            set
            {
               _S.SetStateVariable("DACEndpoint", value);
            }
        }
        public System.String Status
        {
            get
            {
               return((System.String)_S.GetStateVariable("Status"));
            }
            set
            {
               _S.SetStateVariable("Status", value);
            }
        }
        public System.String ResolveMessage
        {
            get
            {
               return((System.String)_S.GetStateVariable("ResolveMessage"));
            }
            set
            {
               _S.SetStateVariable("ResolveMessage", value);
            }
        }
        public System.String PropertyValue
        {
            get
            {
               return((System.String)_S.GetStateVariable("PropertyValue"));
            }
            set
            {
               _S.SetStateVariable("PropertyValue", value);
            }
        }
        public System.String WSEndpoint
        {
            get
            {
               return((System.String)_S.GetStateVariable("WSEndpoint"));
            }
            set
            {
               _S.SetStateVariable("WSEndpoint", value);
            }
        }
        public System.String ErrorMessage
        {
            get
            {
               return((System.String)_S.GetStateVariable("ErrorMessage"));
            }
            set
            {
               _S.SetStateVariable("ErrorMessage", value);
            }
        }
        public System.Boolean HasError
        {
            get
            {
               return((System.Boolean)_S.GetStateVariable("HasError"));
            }
            set
            {
               _S.SetStateVariable("HasError", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_IoTWSEndpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTWSEndpoint")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTWSEndpoint")).Accumulator = value;
            }
        }
        public double ModerationDuration_IoTWSEndpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTWSEndpoint")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTWSEndpoint")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Property
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Property")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Property")).Accumulator = value;
            }
        }
        public double ModerationDuration_Property
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Property")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Property")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_WSDL
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSDL")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSDL")).Accumulator = value;
            }
        }
        public double ModerationDuration_WSDL
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSDL")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSDL")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DiscoveryInfo
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DiscoveryInfo")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DiscoveryInfo")).Accumulator = value;
            }
        }
        public double ModerationDuration_DiscoveryInfo
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DiscoveryInfo")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DiscoveryInfo")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_SecurityInfo
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SecurityInfo")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SecurityInfo")).Accumulator = value;
            }
        }
        public double ModerationDuration_SecurityInfo
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SecurityInfo")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SecurityInfo")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_UDN
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("UDN")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("UDN")).Accumulator = value;
            }
        }
        public double ModerationDuration_UDN
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("UDN")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("UDN")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_IoTID
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTID")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTID")).Accumulator = value;
            }
        }
        public double ModerationDuration_IoTID
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTID")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IoTID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DACEndpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DACEndpoint")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DACEndpoint")).Accumulator = value;
            }
        }
        public double ModerationDuration_DACEndpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DACEndpoint")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DACEndpoint")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Status
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Status")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Status")).Accumulator = value;
            }
        }
        public double ModerationDuration_Status
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Status")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Status")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ResolveMessage
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ResolveMessage")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ResolveMessage")).Accumulator = value;
            }
        }
        public double ModerationDuration_ResolveMessage
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ResolveMessage")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ResolveMessage")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_PropertyValue
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PropertyValue")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PropertyValue")).Accumulator = value;
            }
        }
        public double ModerationDuration_PropertyValue
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PropertyValue")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PropertyValue")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_WSEndpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSEndpoint")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSEndpoint")).Accumulator = value;
            }
        }
        public double ModerationDuration_WSEndpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSEndpoint")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("WSEndpoint")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ErrorMessage
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorMessage")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorMessage")).Accumulator = value;
            }
        }
        public double ModerationDuration_ErrorMessage
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorMessage")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorMessage")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_HasError
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("HasError")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("HasError")).Accumulator = value;
            }
        }
        public double ModerationDuration_HasError
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("HasError")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("HasError")).ModerationPeriod = value;
            }
        }
        public delegate System.String Delegate_CreateWS();
        public delegate void Delegate_DiscoverDevices();
        public delegate System.String Delegate_GetDACEndpoint();
        public delegate System.String Delegate_GetDiscoveryInfo();
        public delegate System.String Delegate_GetErrorMessage();
        public delegate System.Boolean Delegate_GetHasError();
        public delegate System.String Delegate_GetIoTID();
        public delegate System.String Delegate_GetIoTWSEndpoint();
        public delegate System.String Delegate_GetProperty(System.String property);
        public delegate System.String Delegate_GetSecurityInfo();
        public delegate System.String Delegate_GetStatus();
        public delegate System.String Delegate_GetWSDL();
        public delegate System.String Delegate_GetWSEndpoint();
        public delegate void Delegate_ResolveDevice(System.String udn, System.String resolvemessage);
        public delegate void Delegate_SetDACEndpoint(System.String endpoint);
        public delegate void Delegate_SetIoTID(System.String IoTID);
        public delegate void Delegate_SetProperty(System.String property, System.String value);
        public delegate void Delegate_SetStatus(System.String Status);
        public delegate void Delegate_Stop();
        public delegate void Delegate_StopIoTWS();
        public delegate void Delegate_StopWS();

        public Delegate_CreateWS External_CreateWS = null;
        public Delegate_DiscoverDevices External_DiscoverDevices = null;
        public Delegate_GetDACEndpoint External_GetDACEndpoint = null;
        public Delegate_GetDiscoveryInfo External_GetDiscoveryInfo = null;
        public Delegate_GetErrorMessage External_GetErrorMessage = null;
        public Delegate_GetHasError External_GetHasError = null;
        public Delegate_GetIoTID External_GetIoTID = null;
        public Delegate_GetIoTWSEndpoint External_GetIoTWSEndpoint = null;
        public Delegate_GetProperty External_GetProperty = null;
        public Delegate_GetSecurityInfo External_GetSecurityInfo = null;
        public Delegate_GetStatus External_GetStatus = null;
        public Delegate_GetWSDL External_GetWSDL = null;
        public Delegate_GetWSEndpoint External_GetWSEndpoint = null;
        public Delegate_ResolveDevice External_ResolveDevice = null;
        public Delegate_SetDACEndpoint External_SetDACEndpoint = null;
        public Delegate_SetIoTID External_SetIoTID = null;
        public Delegate_SetProperty External_SetProperty = null;
        public Delegate_SetStatus External_SetStatus = null;
        public Delegate_Stop External_Stop = null;
        public Delegate_StopIoTWS External_StopIoTWS = null;
        public Delegate_StopWS External_StopWS = null;

        public void RemoveStateVariable_IoTWSEndpoint()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("IoTWSEndpoint"));
        }
        public void RemoveStateVariable_Property()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Property"));
        }
        public void RemoveStateVariable_WSDL()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("WSDL"));
        }
        public void RemoveStateVariable_DiscoveryInfo()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("DiscoveryInfo"));
        }
        public void RemoveStateVariable_SecurityInfo()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("SecurityInfo"));
        }
        public void RemoveStateVariable_UDN()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("UDN"));
        }
        public void RemoveStateVariable_IoTID()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("IoTID"));
        }
        public void RemoveStateVariable_DACEndpoint()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("DACEndpoint"));
        }
        public void RemoveStateVariable_Status()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Status"));
        }
        public void RemoveStateVariable_ResolveMessage()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("ResolveMessage"));
        }
        public void RemoveStateVariable_PropertyValue()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("PropertyValue"));
        }
        public void RemoveStateVariable_WSEndpoint()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("WSEndpoint"));
        }
        public void RemoveStateVariable_ErrorMessage()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("ErrorMessage"));
        }
        public void RemoveStateVariable_HasError()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("HasError"));
        }
        public void RemoveAction_CreateWS()
        {
             _S.GetUPnPService().RemoveMethod("CreateWS");
        }
        public void RemoveAction_DiscoverDevices()
        {
             _S.GetUPnPService().RemoveMethod("DiscoverDevices");
        }
        public void RemoveAction_GetDACEndpoint()
        {
             _S.GetUPnPService().RemoveMethod("GetDACEndpoint");
        }
        public void RemoveAction_GetDiscoveryInfo()
        {
             _S.GetUPnPService().RemoveMethod("GetDiscoveryInfo");
        }
        public void RemoveAction_GetErrorMessage()
        {
             _S.GetUPnPService().RemoveMethod("GetErrorMessage");
        }
        public void RemoveAction_GetHasError()
        {
             _S.GetUPnPService().RemoveMethod("GetHasError");
        }
        public void RemoveAction_GetIoTID()
        {
             _S.GetUPnPService().RemoveMethod("GetIoTID");
        }
        public void RemoveAction_GetIoTWSEndpoint()
        {
             _S.GetUPnPService().RemoveMethod("GetIoTWSEndpoint");
        }
        public void RemoveAction_GetProperty()
        {
             _S.GetUPnPService().RemoveMethod("GetProperty");
        }
        public void RemoveAction_GetSecurityInfo()
        {
             _S.GetUPnPService().RemoveMethod("GetSecurityInfo");
        }
        public void RemoveAction_GetStatus()
        {
             _S.GetUPnPService().RemoveMethod("GetStatus");
        }
        public void RemoveAction_GetWSDL()
        {
             _S.GetUPnPService().RemoveMethod("GetWSDL");
        }
        public void RemoveAction_GetWSEndpoint()
        {
             _S.GetUPnPService().RemoveMethod("GetWSEndpoint");
        }
        public void RemoveAction_ResolveDevice()
        {
             _S.GetUPnPService().RemoveMethod("ResolveDevice");
        }
        public void RemoveAction_SetDACEndpoint()
        {
             _S.GetUPnPService().RemoveMethod("SetDACEndpoint");
        }
        public void RemoveAction_SetIoTID()
        {
             _S.GetUPnPService().RemoveMethod("SetIoTID");
        }
        public void RemoveAction_SetProperty()
        {
             _S.GetUPnPService().RemoveMethod("SetProperty");
        }
        public void RemoveAction_SetStatus()
        {
             _S.GetUPnPService().RemoveMethod("SetStatus");
        }
        public void RemoveAction_Stop()
        {
             _S.GetUPnPService().RemoveMethod("Stop");
        }
        public void RemoveAction_StopIoTWS()
        {
             _S.GetUPnPService().RemoveMethod("StopIoTWS");
        }
        public void RemoveAction_StopWS()
        {
             _S.GetUPnPService().RemoveMethod("StopWS");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvIoTService
        {
            private DvIoTService Outer = null;
            private UPnPService S;
            internal _DvIoTService(DvIoTService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[14];
                RetVal[0] = new UPnPModeratedStateVariable("IoTWSEndpoint", typeof(System.String), false);
                RetVal[0].AddAssociation("GetIoTWSEndpoint", "endpoint");
                RetVal[1] = new UPnPModeratedStateVariable("Property", typeof(System.String), false);
                RetVal[1].AddAssociation("GetProperty", "property");
                RetVal[1].AddAssociation("SetProperty", "property");
                RetVal[2] = new UPnPModeratedStateVariable("WSDL", typeof(System.String), false);
                RetVal[2].AddAssociation("GetWSDL", "wsdl");
                RetVal[3] = new UPnPModeratedStateVariable("DiscoveryInfo", typeof(System.String), false);
                RetVal[3].AddAssociation("GetDiscoveryInfo", "discoveryinfo");
                RetVal[4] = new UPnPModeratedStateVariable("SecurityInfo", typeof(System.String), false);
                RetVal[4].AddAssociation("GetSecurityInfo", "SecurityInfo");
                RetVal[5] = new UPnPModeratedStateVariable("UDN", typeof(System.String), false);
                RetVal[5].AddAssociation("ResolveDevice", "udn");
                RetVal[6] = new UPnPModeratedStateVariable("IoTID", typeof(System.String), false);
                RetVal[6].AddAssociation("GetIoTID", "IoTID");
                RetVal[6].AddAssociation("SetIoTID", "IoTID");
                RetVal[7] = new UPnPModeratedStateVariable("DACEndpoint", typeof(System.String), false);
                RetVal[7].AddAssociation("GetDACEndpoint", "endpoint");
                RetVal[7].AddAssociation("SetDACEndpoint", "endpoint");
                RetVal[8] = new UPnPModeratedStateVariable("Status", typeof(System.String), false);
                RetVal[8].AddAssociation("GetStatus", "Status");
                RetVal[8].AddAssociation("SetStatus", "Status");
                RetVal[9] = new UPnPModeratedStateVariable("ResolveMessage", typeof(System.String), false);
                RetVal[9].AddAssociation("ResolveDevice", "resolvemessage");
                RetVal[10] = new UPnPModeratedStateVariable("PropertyValue", typeof(System.String), false);
                RetVal[10].AddAssociation("GetProperty", "propertyvalue");
                RetVal[10].AddAssociation("SetProperty", "value");
                RetVal[11] = new UPnPModeratedStateVariable("WSEndpoint", typeof(System.String), false);
                RetVal[11].AddAssociation("CreateWS", "endpoint");
                RetVal[11].AddAssociation("GetWSEndpoint", "endpoint");
                RetVal[12] = new UPnPModeratedStateVariable("ErrorMessage", typeof(System.String), false);
                RetVal[12].AddAssociation("GetErrorMessage", "ErrorMessage");
                RetVal[13] = new UPnPModeratedStateVariable("HasError", typeof(System.Boolean), false);
                RetVal[13].AddAssociation("GetHasError", "HasError");

                UPnPService S = new UPnPService(1, "urn:upnp-org:serviceId:1", "urn:schemas-upnp-org:IoTservice::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("CreateWS");
                S.AddMethod("DiscoverDevices");
                S.AddMethod("GetDACEndpoint");
                S.AddMethod("GetDiscoveryInfo");
                S.AddMethod("GetErrorMessage");
                S.AddMethod("GetHasError");
                S.AddMethod("GetIoTID");
                S.AddMethod("GetIoTWSEndpoint");
                S.AddMethod("GetProperty");
                S.AddMethod("GetSecurityInfo");
                S.AddMethod("GetStatus");
                S.AddMethod("GetWSDL");
                S.AddMethod("GetWSEndpoint");
                S.AddMethod("ResolveDevice");
                S.AddMethod("SetDACEndpoint");
                S.AddMethod("SetIoTID");
                S.AddMethod("SetProperty");
                S.AddMethod("SetStatus");
                S.AddMethod("Stop");
                S.AddMethod("StopIoTWS");
                S.AddMethod("StopWS");
                return(S);
            }

            [OpenSource.UPnP.ReturnArgument("endpoint")]
            public System.String CreateWS()
            {
                object RetObj = null;
                if(Outer.External_CreateWS != null)
                {
                    RetObj = Outer.External_CreateWS();
                }
                else
                {
                    RetObj = Sink_CreateWS();
                }
                return((System.String)RetObj);
            }
            public void DiscoverDevices()
            {
                if(Outer.External_DiscoverDevices != null)
                {
                    Outer.External_DiscoverDevices();
                }
                else
                {
                    Sink_DiscoverDevices();
                }
            }
            [OpenSource.UPnP.ReturnArgument("endpoint")]
            public System.String GetDACEndpoint()
            {
                object RetObj = null;
                if(Outer.External_GetDACEndpoint != null)
                {
                    RetObj = Outer.External_GetDACEndpoint();
                }
                else
                {
                    RetObj = Sink_GetDACEndpoint();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("discoveryinfo")]
            public System.String GetDiscoveryInfo()
            {
                object RetObj = null;
                if(Outer.External_GetDiscoveryInfo != null)
                {
                    RetObj = Outer.External_GetDiscoveryInfo();
                }
                else
                {
                    RetObj = Sink_GetDiscoveryInfo();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("ErrorMessage")]
            public System.String GetErrorMessage()
            {
                object RetObj = null;
                if(Outer.External_GetErrorMessage != null)
                {
                    RetObj = Outer.External_GetErrorMessage();
                }
                else
                {
                    RetObj = Sink_GetErrorMessage();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("HasError")]
            public System.Boolean GetHasError()
            {
                object RetObj = null;
                if(Outer.External_GetHasError != null)
                {
                    RetObj = Outer.External_GetHasError();
                }
                else
                {
                    RetObj = Sink_GetHasError();
                }
                return((System.Boolean)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("IoTID")]
            public System.String GetIoTID()
            {
                object RetObj = null;
                if(Outer.External_GetIoTID != null)
                {
                    RetObj = Outer.External_GetIoTID();
                }
                else
                {
                    RetObj = Sink_GetIoTID();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("endpoint")]
            public System.String GetIoTWSEndpoint()
            {
                object RetObj = null;
                if(Outer.External_GetIoTWSEndpoint != null)
                {
                    RetObj = Outer.External_GetIoTWSEndpoint();
                }
                else
                {
                    RetObj = Sink_GetIoTWSEndpoint();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("propertyvalue")]
            public System.String GetProperty(System.String property)
            {
                object RetObj = null;
                if(Outer.External_GetProperty != null)
                {
                    RetObj = Outer.External_GetProperty(property);
                }
                else
                {
                    RetObj = Sink_GetProperty(property);
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("SecurityInfo")]
            public System.String GetSecurityInfo()
            {
                object RetObj = null;
                if(Outer.External_GetSecurityInfo != null)
                {
                    RetObj = Outer.External_GetSecurityInfo();
                }
                else
                {
                    RetObj = Sink_GetSecurityInfo();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("Status")]
            public System.String GetStatus()
            {
                object RetObj = null;
                if(Outer.External_GetStatus != null)
                {
                    RetObj = Outer.External_GetStatus();
                }
                else
                {
                    RetObj = Sink_GetStatus();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("wsdl")]
            public System.String GetWSDL()
            {
                object RetObj = null;
                if(Outer.External_GetWSDL != null)
                {
                    RetObj = Outer.External_GetWSDL();
                }
                else
                {
                    RetObj = Sink_GetWSDL();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("endpoint")]
            public System.String GetWSEndpoint()
            {
                object RetObj = null;
                if(Outer.External_GetWSEndpoint != null)
                {
                    RetObj = Outer.External_GetWSEndpoint();
                }
                else
                {
                    RetObj = Sink_GetWSEndpoint();
                }
                return((System.String)RetObj);
            }
            public void ResolveDevice(System.String udn, System.String resolvemessage)
            {
                if(Outer.External_ResolveDevice != null)
                {
                    Outer.External_ResolveDevice(udn, resolvemessage);
                }
                else
                {
                    Sink_ResolveDevice(udn, resolvemessage);
                }
            }
            public void SetDACEndpoint(System.String endpoint)
            {
                if(Outer.External_SetDACEndpoint != null)
                {
                    Outer.External_SetDACEndpoint(endpoint);
                }
                else
                {
                    Sink_SetDACEndpoint(endpoint);
                }
            }
            public void SetIoTID(System.String IoTID)
            {
                if(Outer.External_SetIoTID != null)
                {
                    Outer.External_SetIoTID(IoTID);
                }
                else
                {
                    Sink_SetIoTID(IoTID);
                }
            }
            public void SetProperty(System.String property, System.String value)
            {
                if(Outer.External_SetProperty != null)
                {
                    Outer.External_SetProperty(property, value);
                }
                else
                {
                    Sink_SetProperty(property, value);
                }
            }
            public void SetStatus(System.String Status)
            {
                if(Outer.External_SetStatus != null)
                {
                    Outer.External_SetStatus(Status);
                }
                else
                {
                    Sink_SetStatus(Status);
                }
            }
            public void Stop()
            {
                if(Outer.External_Stop != null)
                {
                    Outer.External_Stop();
                }
                else
                {
                    Sink_Stop();
                }
            }
            public void StopIoTWS()
            {
                if(Outer.External_StopIoTWS != null)
                {
                    Outer.External_StopIoTWS();
                }
                else
                {
                    Sink_StopIoTWS();
                }
            }
            public void StopWS()
            {
                if(Outer.External_StopWS != null)
                {
                    Outer.External_StopWS();
                }
                else
                {
                    Sink_StopWS();
                }
            }

            public Delegate_CreateWS Sink_CreateWS;
            public Delegate_DiscoverDevices Sink_DiscoverDevices;
            public Delegate_GetDACEndpoint Sink_GetDACEndpoint;
            public Delegate_GetDiscoveryInfo Sink_GetDiscoveryInfo;
            public Delegate_GetErrorMessage Sink_GetErrorMessage;
            public Delegate_GetHasError Sink_GetHasError;
            public Delegate_GetIoTID Sink_GetIoTID;
            public Delegate_GetIoTWSEndpoint Sink_GetIoTWSEndpoint;
            public Delegate_GetProperty Sink_GetProperty;
            public Delegate_GetSecurityInfo Sink_GetSecurityInfo;
            public Delegate_GetStatus Sink_GetStatus;
            public Delegate_GetWSDL Sink_GetWSDL;
            public Delegate_GetWSEndpoint Sink_GetWSEndpoint;
            public Delegate_ResolveDevice Sink_ResolveDevice;
            public Delegate_SetDACEndpoint Sink_SetDACEndpoint;
            public Delegate_SetIoTID Sink_SetIoTID;
            public Delegate_SetProperty Sink_SetProperty;
            public Delegate_SetStatus Sink_SetStatus;
            public Delegate_Stop Sink_Stop;
            public Delegate_StopIoTWS Sink_StopIoTWS;
            public Delegate_StopWS Sink_StopWS;
        }
        public DvIoTService()
        {
            _S = new _DvIoTService(this);
            _S.GetUPnPService().GetStateVariableObject("IoTWSEndpoint").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_IoTWSEndpoint);
            _S.GetUPnPService().GetStateVariableObject("Property").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Property);
            _S.GetUPnPService().GetStateVariableObject("WSDL").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_WSDL);
            _S.GetUPnPService().GetStateVariableObject("DiscoveryInfo").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_DiscoveryInfo);
            _S.GetUPnPService().GetStateVariableObject("SecurityInfo").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_SecurityInfo);
            _S.GetUPnPService().GetStateVariableObject("UDN").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_UDN);
            _S.GetUPnPService().GetStateVariableObject("IoTID").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_IoTID);
            _S.GetUPnPService().GetStateVariableObject("DACEndpoint").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_DACEndpoint);
            _S.GetUPnPService().GetStateVariableObject("Status").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Status);
            _S.GetUPnPService().GetStateVariableObject("ResolveMessage").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_ResolveMessage);
            _S.GetUPnPService().GetStateVariableObject("PropertyValue").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_PropertyValue);
            _S.GetUPnPService().GetStateVariableObject("WSEndpoint").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_WSEndpoint);
            _S.GetUPnPService().GetStateVariableObject("ErrorMessage").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_ErrorMessage);
            _S.GetUPnPService().GetStateVariableObject("HasError").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_HasError);
            _S.Sink_CreateWS = new Delegate_CreateWS(CreateWS);
            _S.Sink_DiscoverDevices = new Delegate_DiscoverDevices(DiscoverDevices);
            _S.Sink_GetDACEndpoint = new Delegate_GetDACEndpoint(GetDACEndpoint);
            _S.Sink_GetDiscoveryInfo = new Delegate_GetDiscoveryInfo(GetDiscoveryInfo);
            _S.Sink_GetErrorMessage = new Delegate_GetErrorMessage(GetErrorMessage);
            _S.Sink_GetHasError = new Delegate_GetHasError(GetHasError);
            _S.Sink_GetIoTID = new Delegate_GetIoTID(GetIoTID);
            _S.Sink_GetIoTWSEndpoint = new Delegate_GetIoTWSEndpoint(GetIoTWSEndpoint);
            _S.Sink_GetProperty = new Delegate_GetProperty(GetProperty);
            _S.Sink_GetSecurityInfo = new Delegate_GetSecurityInfo(GetSecurityInfo);
            _S.Sink_GetStatus = new Delegate_GetStatus(GetStatus);
            _S.Sink_GetWSDL = new Delegate_GetWSDL(GetWSDL);
            _S.Sink_GetWSEndpoint = new Delegate_GetWSEndpoint(GetWSEndpoint);
            _S.Sink_ResolveDevice = new Delegate_ResolveDevice(ResolveDevice);
            _S.Sink_SetDACEndpoint = new Delegate_SetDACEndpoint(SetDACEndpoint);
            _S.Sink_SetIoTID = new Delegate_SetIoTID(SetIoTID);
            _S.Sink_SetProperty = new Delegate_SetProperty(SetProperty);
            _S.Sink_SetStatus = new Delegate_SetStatus(SetStatus);
            _S.Sink_Stop = new Delegate_Stop(Stop);
            _S.Sink_StopIoTWS = new Delegate_StopIoTWS(StopIoTWS);
            _S.Sink_StopWS = new Delegate_StopWS(StopWS);
        }
        public DvIoTService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_IoTWSEndpoint(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_IoTWSEndpoint != null) OnStateVariableModified_IoTWSEndpoint(this);
        }
        private void OnModifiedSink_Property(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Property != null) OnStateVariableModified_Property(this);
        }
        private void OnModifiedSink_WSDL(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_WSDL != null) OnStateVariableModified_WSDL(this);
        }
        private void OnModifiedSink_DiscoveryInfo(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_DiscoveryInfo != null) OnStateVariableModified_DiscoveryInfo(this);
        }
        private void OnModifiedSink_SecurityInfo(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_SecurityInfo != null) OnStateVariableModified_SecurityInfo(this);
        }
        private void OnModifiedSink_UDN(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_UDN != null) OnStateVariableModified_UDN(this);
        }
        private void OnModifiedSink_IoTID(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_IoTID != null) OnStateVariableModified_IoTID(this);
        }
        private void OnModifiedSink_DACEndpoint(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_DACEndpoint != null) OnStateVariableModified_DACEndpoint(this);
        }
        private void OnModifiedSink_Status(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Status != null) OnStateVariableModified_Status(this);
        }
        private void OnModifiedSink_ResolveMessage(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_ResolveMessage != null) OnStateVariableModified_ResolveMessage(this);
        }
        private void OnModifiedSink_PropertyValue(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_PropertyValue != null) OnStateVariableModified_PropertyValue(this);
        }
        private void OnModifiedSink_WSEndpoint(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_WSEndpoint != null) OnStateVariableModified_WSEndpoint(this);
        }
        private void OnModifiedSink_ErrorMessage(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_ErrorMessage != null) OnStateVariableModified_ErrorMessage(this);
        }
        private void OnModifiedSink_HasError(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_HasError != null) OnStateVariableModified_HasError(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: CreateWS
        /// </summary>
        /// <returns>Associated StateVariable: WSEndpoint</returns>
        public System.String CreateWS()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: DiscoverDevices
        /// </summary>
        public void DiscoverDevices()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetDACEndpoint
        /// </summary>
        /// <returns>Associated StateVariable: DACEndpoint</returns>
        public System.String GetDACEndpoint()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetDiscoveryInfo
        /// </summary>
        /// <returns>Associated StateVariable: DiscoveryInfo</returns>
        public System.String GetDiscoveryInfo()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetErrorMessage
        /// </summary>
        /// <returns>Associated StateVariable: ErrorMessage</returns>
        public System.String GetErrorMessage()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetHasError
        /// </summary>
        /// <returns>Associated StateVariable: HasError</returns>
        public System.Boolean GetHasError()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetIoTID
        /// </summary>
        /// <returns>Associated StateVariable: IoTID</returns>
        public System.String GetIoTID()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetIoTWSEndpoint
        /// </summary>
        /// <returns>Associated StateVariable: IoTWSEndpoint</returns>
        public System.String GetIoTWSEndpoint()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetProperty
        /// </summary>
        /// <param name="property">Associated State Variable: Property</param>
        /// <returns>Associated StateVariable: PropertyValue</returns>
        public System.String GetProperty(System.String property)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetSecurityInfo
        /// </summary>
        /// <returns>Associated StateVariable: SecurityInfo</returns>
        public System.String GetSecurityInfo()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetStatus
        /// </summary>
        /// <returns>Associated StateVariable: Status</returns>
        public System.String GetStatus()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetWSDL
        /// </summary>
        /// <returns>Associated StateVariable: WSDL</returns>
        public System.String GetWSDL()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetWSEndpoint
        /// </summary>
        /// <returns>Associated StateVariable: WSEndpoint</returns>
        public System.String GetWSEndpoint()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: ResolveDevice
        /// </summary>
        /// <param name="udn">Associated State Variable: UDN</param>
        /// <param name="resolvemessage">Associated State Variable: ResolveMessage</param>
        public void ResolveDevice(System.String udn, System.String resolvemessage)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetDACEndpoint
        /// </summary>
        /// <param name="endpoint">Associated State Variable: DACEndpoint</param>
        public void SetDACEndpoint(System.String endpoint)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetIoTID
        /// </summary>
        /// <param name="IoTID">Associated State Variable: IoTID</param>
        public void SetIoTID(System.String IoTID)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetProperty
        /// </summary>
        /// <param name="property">Associated State Variable: Property</param>
        /// <param name="value">Associated State Variable: PropertyValue</param>
        public void SetProperty(System.String property, System.String value)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetStatus
        /// </summary>
        /// <param name="Status">Associated State Variable: Status</param>
        public void SetStatus(System.String Status)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: Stop
        /// </summary>
        public void Stop()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: StopIoTWS
        /// </summary>
        public void StopIoTWS()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: StopWS
        /// </summary>
        public void StopWS()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}