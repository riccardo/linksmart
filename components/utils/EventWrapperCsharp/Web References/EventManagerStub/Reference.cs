//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace eu.linksmart.eventing.EventManagerStub {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_EventManagerPort", Namespace="http://eventmanager.linksmart.eu")]
    public partial class EventManagerImplementation : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback publishXmlEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback unsubscribeWithDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback subscribeWithDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearSubscriptionsWithDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback subscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback unsubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback subscribeWithHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback unsubscribeWithHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearSubscriptionsWithHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback triggerRetryQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EventManagerImplementation() {
            this.Url = global::eu.linksmart.eventing.Properties.Settings.Default.EventSubscriberService_EventManagerStub_EventManagerImplementation;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event publishXmlEventCompletedEventHandler publishXmlEventCompleted;
        
        /// <remarks/>
        public event unsubscribeWithDescriptionCompletedEventHandler unsubscribeWithDescriptionCompleted;
        
        /// <remarks/>
        public event subscribeWithDescriptionCompletedEventHandler subscribeWithDescriptionCompleted;
        
        /// <remarks/>
        public event clearSubscriptionsWithDescriptionCompletedEventHandler clearSubscriptionsWithDescriptionCompleted;
        
        /// <remarks/>
        public event subscribeCompletedEventHandler subscribeCompleted;
        
        /// <remarks/>
        public event unsubscribeCompletedEventHandler unsubscribeCompleted;
        
        /// <remarks/>
        public event subscribeWithHIDCompletedEventHandler subscribeWithHIDCompleted;
        
        /// <remarks/>
        public event unsubscribeWithHIDCompletedEventHandler unsubscribeWithHIDCompleted;
        
        /// <remarks/>
        public event getSubscriptionsCompletedEventHandler getSubscriptionsCompleted;
        
        /// <remarks/>
        public event clearSubscriptionsCompletedEventHandler clearSubscriptionsCompleted;
        
        /// <remarks/>
        public event clearSubscriptionsWithHIDCompletedEventHandler clearSubscriptionsWithHIDCompleted;
        
        /// <remarks/>
        public event setPriorityCompletedEventHandler setPriorityCompleted;
        
        /// <remarks/>
        public event triggerRetryQueueCompletedEventHandler triggerRetryQueueCompleted;
        
        /// <remarks/>
        public event publishCompletedEventHandler publishCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("publishXmlEvent", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("publishReturn")]
        public bool publishXmlEvent(string eventXmlString) {
            object[] results = this.Invoke("publishXmlEvent", new object[] {
                        eventXmlString});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void publishXmlEventAsync(string eventXmlString) {
            this.publishXmlEventAsync(eventXmlString, null);
        }
        
        /// <remarks/>
        public void publishXmlEventAsync(string eventXmlString, object userState) {
            if ((this.publishXmlEventOperationCompleted == null)) {
                this.publishXmlEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishXmlEventOperationCompleted);
            }
            this.InvokeAsync("publishXmlEvent", new object[] {
                        eventXmlString}, this.publishXmlEventOperationCompleted, userState);
        }
        
        private void OnpublishXmlEventOperationCompleted(object arg) {
            if ((this.publishXmlEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishXmlEventCompleted(this, new publishXmlEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("unsubscribeWithDescription", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("unsubscribeWithDescriptionReturn")]
        public bool unsubscribeWithDescription(string topic, string description) {
            object[] results = this.Invoke("unsubscribeWithDescription", new object[] {
                        topic,
                        description});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void unsubscribeWithDescriptionAsync(string topic, string description) {
            this.unsubscribeWithDescriptionAsync(topic, description, null);
        }
        
        /// <remarks/>
        public void unsubscribeWithDescriptionAsync(string topic, string description, object userState) {
            if ((this.unsubscribeWithDescriptionOperationCompleted == null)) {
                this.unsubscribeWithDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunsubscribeWithDescriptionOperationCompleted);
            }
            this.InvokeAsync("unsubscribeWithDescription", new object[] {
                        topic,
                        description}, this.unsubscribeWithDescriptionOperationCompleted, userState);
        }
        
        private void OnunsubscribeWithDescriptionOperationCompleted(object arg) {
            if ((this.unsubscribeWithDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unsubscribeWithDescriptionCompleted(this, new unsubscribeWithDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("subscribeWithDescription", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subscribeWithDescriptionReturn")]
        public bool subscribeWithDescription(string topic, string description, int priority) {
            object[] results = this.Invoke("subscribeWithDescription", new object[] {
                        topic,
                        description,
                        priority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void subscribeWithDescriptionAsync(string topic, string description, int priority) {
            this.subscribeWithDescriptionAsync(topic, description, priority, null);
        }
        
        /// <remarks/>
        public void subscribeWithDescriptionAsync(string topic, string description, int priority, object userState) {
            if ((this.subscribeWithDescriptionOperationCompleted == null)) {
                this.subscribeWithDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubscribeWithDescriptionOperationCompleted);
            }
            this.InvokeAsync("subscribeWithDescription", new object[] {
                        topic,
                        description,
                        priority}, this.subscribeWithDescriptionOperationCompleted, userState);
        }
        
        private void OnsubscribeWithDescriptionOperationCompleted(object arg) {
            if ((this.subscribeWithDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.subscribeWithDescriptionCompleted(this, new subscribeWithDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("clearSubscriptionsWithDescription", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("clearSubscriptionsWithDescriptionReturn")]
        public bool clearSubscriptionsWithDescription(string description) {
            object[] results = this.Invoke("clearSubscriptionsWithDescription", new object[] {
                        description});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void clearSubscriptionsWithDescriptionAsync(string description) {
            this.clearSubscriptionsWithDescriptionAsync(description, null);
        }
        
        /// <remarks/>
        public void clearSubscriptionsWithDescriptionAsync(string description, object userState) {
            if ((this.clearSubscriptionsWithDescriptionOperationCompleted == null)) {
                this.clearSubscriptionsWithDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearSubscriptionsWithDescriptionOperationCompleted);
            }
            this.InvokeAsync("clearSubscriptionsWithDescription", new object[] {
                        description}, this.clearSubscriptionsWithDescriptionOperationCompleted, userState);
        }
        
        private void OnclearSubscriptionsWithDescriptionOperationCompleted(object arg) {
            if ((this.clearSubscriptionsWithDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearSubscriptionsWithDescriptionCompleted(this, new clearSubscriptionsWithDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("subscribe", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subscribeReturn")]
        public bool subscribe(string topic, string endpoint, int priority) {
            object[] results = this.Invoke("subscribe", new object[] {
                        topic,
                        endpoint,
                        priority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void subscribeAsync(string topic, string endpoint, int priority) {
            this.subscribeAsync(topic, endpoint, priority, null);
        }
        
        /// <remarks/>
        public void subscribeAsync(string topic, string endpoint, int priority, object userState) {
            if ((this.subscribeOperationCompleted == null)) {
                this.subscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubscribeOperationCompleted);
            }
            this.InvokeAsync("subscribe", new object[] {
                        topic,
                        endpoint,
                        priority}, this.subscribeOperationCompleted, userState);
        }
        
        private void OnsubscribeOperationCompleted(object arg) {
            if ((this.subscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.subscribeCompleted(this, new subscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("unsubscribe", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("unsubscribeReturn")]
        public bool unsubscribe(string topic, string endpoint) {
            object[] results = this.Invoke("unsubscribe", new object[] {
                        topic,
                        endpoint});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void unsubscribeAsync(string topic, string endpoint) {
            this.unsubscribeAsync(topic, endpoint, null);
        }
        
        /// <remarks/>
        public void unsubscribeAsync(string topic, string endpoint, object userState) {
            if ((this.unsubscribeOperationCompleted == null)) {
                this.unsubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunsubscribeOperationCompleted);
            }
            this.InvokeAsync("unsubscribe", new object[] {
                        topic,
                        endpoint}, this.unsubscribeOperationCompleted, userState);
        }
        
        private void OnunsubscribeOperationCompleted(object arg) {
            if ((this.unsubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unsubscribeCompleted(this, new unsubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("subscribeWithHID", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subscribeWithHIDReturn")]
        public bool subscribeWithHID(string topic, string hid, int priority) {
            object[] results = this.Invoke("subscribeWithHID", new object[] {
                        topic,
                        hid,
                        priority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void subscribeWithHIDAsync(string topic, string hid, int priority) {
            this.subscribeWithHIDAsync(topic, hid, priority, null);
        }
        
        /// <remarks/>
        public void subscribeWithHIDAsync(string topic, string hid, int priority, object userState) {
            if ((this.subscribeWithHIDOperationCompleted == null)) {
                this.subscribeWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubscribeWithHIDOperationCompleted);
            }
            this.InvokeAsync("subscribeWithHID", new object[] {
                        topic,
                        hid,
                        priority}, this.subscribeWithHIDOperationCompleted, userState);
        }
        
        private void OnsubscribeWithHIDOperationCompleted(object arg) {
            if ((this.subscribeWithHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.subscribeWithHIDCompleted(this, new subscribeWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("unsubscribeWithHID", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("unsubscribeWithHIDReturn")]
        public bool unsubscribeWithHID(string topic, string hid) {
            object[] results = this.Invoke("unsubscribeWithHID", new object[] {
                        topic,
                        hid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void unsubscribeWithHIDAsync(string topic, string hid) {
            this.unsubscribeWithHIDAsync(topic, hid, null);
        }
        
        /// <remarks/>
        public void unsubscribeWithHIDAsync(string topic, string hid, object userState) {
            if ((this.unsubscribeWithHIDOperationCompleted == null)) {
                this.unsubscribeWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunsubscribeWithHIDOperationCompleted);
            }
            this.InvokeAsync("unsubscribeWithHID", new object[] {
                        topic,
                        hid}, this.unsubscribeWithHIDOperationCompleted, userState);
        }
        
        private void OnunsubscribeWithHIDOperationCompleted(object arg) {
            if ((this.unsubscribeWithHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unsubscribeWithHIDCompleted(this, new unsubscribeWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getSubscriptions", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("getSubscriptionsReturn", Namespace="")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public Subscription[] getSubscriptions() {
            object[] results = this.Invoke("getSubscriptions", new object[0]);
            return ((Subscription[])(results[0]));
        }
        
        /// <remarks/>
        public void getSubscriptionsAsync() {
            this.getSubscriptionsAsync(null);
        }
        
        /// <remarks/>
        public void getSubscriptionsAsync(object userState) {
            if ((this.getSubscriptionsOperationCompleted == null)) {
                this.getSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("getSubscriptions", new object[0], this.getSubscriptionsOperationCompleted, userState);
        }
        
        private void OngetSubscriptionsOperationCompleted(object arg) {
            if ((this.getSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSubscriptionsCompleted(this, new getSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("clearSubscriptions", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("clearSubscriptionsReturn")]
        public bool clearSubscriptions(string endpoint) {
            object[] results = this.Invoke("clearSubscriptions", new object[] {
                        endpoint});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void clearSubscriptionsAsync(string endpoint) {
            this.clearSubscriptionsAsync(endpoint, null);
        }
        
        /// <remarks/>
        public void clearSubscriptionsAsync(string endpoint, object userState) {
            if ((this.clearSubscriptionsOperationCompleted == null)) {
                this.clearSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("clearSubscriptions", new object[] {
                        endpoint}, this.clearSubscriptionsOperationCompleted, userState);
        }
        
        private void OnclearSubscriptionsOperationCompleted(object arg) {
            if ((this.clearSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearSubscriptionsCompleted(this, new clearSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("clearSubscriptionsWithHID", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("clearSubscriptionsWithHIDReturn")]
        public bool clearSubscriptionsWithHID(string hid) {
            object[] results = this.Invoke("clearSubscriptionsWithHID", new object[] {
                        hid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void clearSubscriptionsWithHIDAsync(string hid) {
            this.clearSubscriptionsWithHIDAsync(hid, null);
        }
        
        /// <remarks/>
        public void clearSubscriptionsWithHIDAsync(string hid, object userState) {
            if ((this.clearSubscriptionsWithHIDOperationCompleted == null)) {
                this.clearSubscriptionsWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearSubscriptionsWithHIDOperationCompleted);
            }
            this.InvokeAsync("clearSubscriptionsWithHID", new object[] {
                        hid}, this.clearSubscriptionsWithHIDOperationCompleted, userState);
        }
        
        private void OnclearSubscriptionsWithHIDOperationCompleted(object arg) {
            if ((this.clearSubscriptionsWithHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearSubscriptionsWithHIDCompleted(this, new clearSubscriptionsWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("setPriority", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("setPriorityReturn")]
        public bool setPriority(string in0, int in1) {
            object[] results = this.Invoke("setPriority", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setPriorityAsync(string in0, int in1) {
            this.setPriorityAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void setPriorityAsync(string in0, int in1, object userState) {
            if ((this.setPriorityOperationCompleted == null)) {
                this.setPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPriorityOperationCompleted);
            }
            this.InvokeAsync("setPriority", new object[] {
                        in0,
                        in1}, this.setPriorityOperationCompleted, userState);
        }
        
        private void OnsetPriorityOperationCompleted(object arg) {
            if ((this.setPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPriorityCompleted(this, new setPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("triggerRetryQueue", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("triggerRetryQueueReturn")]
        public bool triggerRetryQueue() {
            object[] results = this.Invoke("triggerRetryQueue", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void triggerRetryQueueAsync() {
            this.triggerRetryQueueAsync(null);
        }
        
        /// <remarks/>
        public void triggerRetryQueueAsync(object userState) {
            if ((this.triggerRetryQueueOperationCompleted == null)) {
                this.triggerRetryQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OntriggerRetryQueueOperationCompleted);
            }
            this.InvokeAsync("triggerRetryQueue", new object[0], this.triggerRetryQueueOperationCompleted, userState);
        }
        
        private void OntriggerRetryQueueOperationCompleted(object arg) {
            if ((this.triggerRetryQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.triggerRetryQueueCompleted(this, new triggerRetryQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("publish", RequestNamespace="http://eventmanager.linksmart.eu", ResponseNamespace="http://eventmanager.linksmart.eu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("publishReturn", Namespace="")]
        public bool publish([System.Xml.Serialization.XmlElementAttribute(Namespace="")] string topic, [System.Xml.Serialization.XmlArrayAttribute(Namespace="")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] Part[] in1) {
            object[] results = this.Invoke("publish", new object[] {
                        topic,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void publishAsync(string topic, Part[] in1) {
            this.publishAsync(topic, in1, null);
        }
        
        /// <remarks/>
        public void publishAsync(string topic, Part[] in1, object userState) {
            if ((this.publishOperationCompleted == null)) {
                this.publishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishOperationCompleted);
            }
            this.InvokeAsync("publish", new object[] {
                        topic,
                        in1}, this.publishOperationCompleted, userState);
        }
        
        private void OnpublishOperationCompleted(object arg) {
            if ((this.publishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishCompleted(this, new publishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://eventmanager.linksmart.eu")]
    public partial class Subscription {
        
        private string topicField;
        
        private string hIDField;
        
        private string endpointField;
        
        private string descriptionField;
        
        private int priorityField;
        
        private Part[] partsField;
        
        private int numberOfRetriesField;
        
        private System.Nullable<System.DateTime> dateTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string Topic {
            get {
                return this.topicField;
            }
            set {
                this.topicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string HID {
            get {
                return this.hIDField;
            }
            set {
                this.hIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string Endpoint {
            get {
                return this.endpointField;
            }
            set {
                this.endpointField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parts", IsNullable=true)]
        public Part[] Parts {
            get {
                return this.partsField;
            }
            set {
                this.partsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int NumberOfRetries {
            get {
                return this.numberOfRetriesField;
            }
            set {
                this.numberOfRetriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<System.DateTime> DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://eventmanager.linksmart.eu")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Part", Namespace = "http://eventmanager.linksmart.eu")]
    public partial class Part {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Runtime.Serialization.DataMemberAttribute()]  
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void publishXmlEventCompletedEventHandler(object sender, publishXmlEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishXmlEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishXmlEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void unsubscribeWithDescriptionCompletedEventHandler(object sender, unsubscribeWithDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unsubscribeWithDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unsubscribeWithDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void subscribeWithDescriptionCompletedEventHandler(object sender, subscribeWithDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class subscribeWithDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal subscribeWithDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void clearSubscriptionsWithDescriptionCompletedEventHandler(object sender, clearSubscriptionsWithDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clearSubscriptionsWithDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clearSubscriptionsWithDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void subscribeCompletedEventHandler(object sender, subscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class subscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal subscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void unsubscribeCompletedEventHandler(object sender, unsubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unsubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unsubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void subscribeWithHIDCompletedEventHandler(object sender, subscribeWithHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class subscribeWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal subscribeWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void unsubscribeWithHIDCompletedEventHandler(object sender, unsubscribeWithHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unsubscribeWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unsubscribeWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSubscriptionsCompletedEventHandler(object sender, getSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Subscription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subscription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void clearSubscriptionsCompletedEventHandler(object sender, clearSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clearSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clearSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void clearSubscriptionsWithHIDCompletedEventHandler(object sender, clearSubscriptionsWithHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clearSubscriptionsWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clearSubscriptionsWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setPriorityCompletedEventHandler(object sender, setPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void triggerRetryQueueCompletedEventHandler(object sender, triggerRetryQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class triggerRetryQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal triggerRetryQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void publishCompletedEventHandler(object sender, publishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591