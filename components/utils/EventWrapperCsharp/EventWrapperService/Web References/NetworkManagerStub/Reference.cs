//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18034
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.18034.
// 
#pragma warning disable 1591

namespace eu.linksmart.eventing.NetworkManagerStub {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NetworkManagerSoapBinding", Namespace="http://networkmanager.network.linksmart.eu/")]
    public partial class NetworkManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback removeServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableBackbonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceByAttributes1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceByAttributesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceByPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceByQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceByDescriptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NetworkManager() {
            this.Url = global::eu.linksmart.eventing.Properties.Settings.Default.NetworkManagerStubUrl;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event removeServiceCompletedEventHandler removeServiceCompleted;
        
        /// <remarks/>
        public event registerServiceCompletedEventHandler registerServiceCompleted;
        
        /// <remarks/>
        public event sendDataCompletedEventHandler sendDataCompleted;
        
        /// <remarks/>
        public event getAvailableBackbonesCompletedEventHandler getAvailableBackbonesCompleted;
        
        /// <remarks/>
        public event getServiceByAttributes1CompletedEventHandler getServiceByAttributes1Completed;
        
        /// <remarks/>
        public event getServiceByAttributesCompletedEventHandler getServiceByAttributesCompleted;
        
        /// <remarks/>
        public event getServiceCompletedEventHandler getServiceCompleted;
        
        /// <remarks/>
        public event getServiceByPIDCompletedEventHandler getServiceByPIDCompleted;
        
        /// <remarks/>
        public event getServiceByQueryCompletedEventHandler getServiceByQueryCompleted;
        
        /// <remarks/>
        public event getServiceByDescriptionCompletedEventHandler getServiceByDescriptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public bool removeService(VirtualAddress arg0) {
            object[] results = this.Invoke("removeService", new object[] {
                        arg0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeServiceAsync(VirtualAddress arg0) {
            this.removeServiceAsync(arg0, null);
        }
        
        /// <remarks/>
        public void removeServiceAsync(VirtualAddress arg0, object userState) {
            if ((this.removeServiceOperationCompleted == null)) {
                this.removeServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveServiceOperationCompleted);
            }
            this.InvokeAsync("removeService", new object[] {
                        arg0}, this.removeServiceOperationCompleted, userState);
        }
        
        private void OnremoveServiceOperationCompleted(object arg) {
            if ((this.removeServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeServiceCompleted(this, new removeServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public Registration registerService([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://utils.linksmart.eu")] Part[] arg0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arg1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arg2) {
            object[] results = this.Invoke("registerService", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((Registration)(results[0]));
        }
        
        /// <remarks/>
        public void registerServiceAsync(Part[] arg0, string arg1, string arg2) {
            this.registerServiceAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void registerServiceAsync(Part[] arg0, string arg1, string arg2, object userState) {
            if ((this.registerServiceOperationCompleted == null)) {
                this.registerServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterServiceOperationCompleted);
            }
            this.InvokeAsync("registerService", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.registerServiceOperationCompleted, userState);
        }
        
        private void OnregisterServiceOperationCompleted(object arg) {
            if ((this.registerServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerServiceCompleted(this, new registerServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public NMResponse sendData(VirtualAddress arg0, VirtualAddress arg1, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] arg2, bool arg3) {
            object[] results = this.Invoke("sendData", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
            return ((NMResponse)(results[0]));
        }
        
        /// <remarks/>
        public void sendDataAsync(VirtualAddress arg0, VirtualAddress arg1, byte[] arg2, bool arg3) {
            this.sendDataAsync(arg0, arg1, arg2, arg3, null);
        }
        
        /// <remarks/>
        public void sendDataAsync(VirtualAddress arg0, VirtualAddress arg1, byte[] arg2, bool arg3, object userState) {
            if ((this.sendDataOperationCompleted == null)) {
                this.sendDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendDataOperationCompleted);
            }
            this.InvokeAsync("sendData", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.sendDataOperationCompleted, userState);
        }
        
        private void OnsendDataOperationCompleted(object arg) {
            if ((this.sendDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendDataCompleted(this, new sendDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", IsNullable=true)]
        public string[] getAvailableBackbones() {
            object[] results = this.Invoke("getAvailableBackbones", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableBackbonesAsync() {
            this.getAvailableBackbonesAsync(null);
        }
        
        /// <remarks/>
        public void getAvailableBackbonesAsync(object userState) {
            if ((this.getAvailableBackbonesOperationCompleted == null)) {
                this.getAvailableBackbonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableBackbonesOperationCompleted);
            }
            this.InvokeAsync("getAvailableBackbones", new object[0], this.getAvailableBackbonesOperationCompleted, userState);
        }
        
        private void OngetAvailableBackbonesOperationCompleted(object arg) {
            if ((this.getAvailableBackbonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableBackbonesCompleted(this, new getAvailableBackbonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://network.linksmart.eu")]
        public Registration[] getServiceByAttributes1([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://utils.linksmart.eu")] Part[] arg0, long arg1, bool arg2, bool arg3) {
            object[] results = this.Invoke("getServiceByAttributes1", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3});
            return ((Registration[])(results[0]));
        }
        
        /// <remarks/>
        public void getServiceByAttributes1Async(Part[] arg0, long arg1, bool arg2, bool arg3) {
            this.getServiceByAttributes1Async(arg0, arg1, arg2, arg3, null);
        }
        
        /// <remarks/>
        public void getServiceByAttributes1Async(Part[] arg0, long arg1, bool arg2, bool arg3, object userState) {
            if ((this.getServiceByAttributes1OperationCompleted == null)) {
                this.getServiceByAttributes1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceByAttributes1OperationCompleted);
            }
            this.InvokeAsync("getServiceByAttributes1", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3}, this.getServiceByAttributes1OperationCompleted, userState);
        }
        
        private void OngetServiceByAttributes1OperationCompleted(object arg) {
            if ((this.getServiceByAttributes1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceByAttributes1Completed(this, new getServiceByAttributes1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://network.linksmart.eu")]
        public Registration[] getServiceByAttributes([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://utils.linksmart.eu")] Part[] arg0) {
            object[] results = this.Invoke("getServiceByAttributes", new object[] {
                        arg0});
            return ((Registration[])(results[0]));
        }
        
        /// <remarks/>
        public void getServiceByAttributesAsync(Part[] arg0) {
            this.getServiceByAttributesAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getServiceByAttributesAsync(Part[] arg0, object userState) {
            if ((this.getServiceByAttributesOperationCompleted == null)) {
                this.getServiceByAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceByAttributesOperationCompleted);
            }
            this.InvokeAsync("getServiceByAttributes", new object[] {
                        arg0}, this.getServiceByAttributesOperationCompleted, userState);
        }
        
        private void OngetServiceByAttributesOperationCompleted(object arg) {
            if ((this.getServiceByAttributesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceByAttributesCompleted(this, new getServiceByAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public VirtualAddress getService() {
            object[] results = this.Invoke("getService", new object[0]);
            return ((VirtualAddress)(results[0]));
        }
        
        /// <remarks/>
        public void getServiceAsync() {
            this.getServiceAsync(null);
        }
        
        /// <remarks/>
        public void getServiceAsync(object userState) {
            if ((this.getServiceOperationCompleted == null)) {
                this.getServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceOperationCompleted);
            }
            this.InvokeAsync("getService", new object[0], this.getServiceOperationCompleted, userState);
        }
        
        private void OngetServiceOperationCompleted(object arg) {
            if ((this.getServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceCompleted(this, new getServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public Registration getServiceByPID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arg0) {
            object[] results = this.Invoke("getServiceByPID", new object[] {
                        arg0});
            return ((Registration)(results[0]));
        }
        
        /// <remarks/>
        public void getServiceByPIDAsync(string arg0) {
            this.getServiceByPIDAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getServiceByPIDAsync(string arg0, object userState) {
            if ((this.getServiceByPIDOperationCompleted == null)) {
                this.getServiceByPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceByPIDOperationCompleted);
            }
            this.InvokeAsync("getServiceByPID", new object[] {
                        arg0}, this.getServiceByPIDOperationCompleted, userState);
        }
        
        private void OngetServiceByPIDOperationCompleted(object arg) {
            if ((this.getServiceByPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceByPIDCompleted(this, new getServiceByPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://network.linksmart.eu")]
        public Registration[] getServiceByQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arg0) {
            object[] results = this.Invoke("getServiceByQuery", new object[] {
                        arg0});
            return ((Registration[])(results[0]));
        }
        
        /// <remarks/>
        public void getServiceByQueryAsync(string arg0) {
            this.getServiceByQueryAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getServiceByQueryAsync(string arg0, object userState) {
            if ((this.getServiceByQueryOperationCompleted == null)) {
                this.getServiceByQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceByQueryOperationCompleted);
            }
            this.InvokeAsync("getServiceByQuery", new object[] {
                        arg0}, this.getServiceByQueryOperationCompleted, userState);
        }
        
        private void OngetServiceByQueryOperationCompleted(object arg) {
            if ((this.getServiceByQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceByQueryCompleted(this, new getServiceByQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://networkmanager.network.linksmart.eu/", ResponseNamespace="http://networkmanager.network.linksmart.eu/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://network.linksmart.eu")]
        public Registration[] getServiceByDescription([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string arg0) {
            object[] results = this.Invoke("getServiceByDescription", new object[] {
                        arg0});
            return ((Registration[])(results[0]));
        }
        
        /// <remarks/>
        public void getServiceByDescriptionAsync(string arg0) {
            this.getServiceByDescriptionAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getServiceByDescriptionAsync(string arg0, object userState) {
            if ((this.getServiceByDescriptionOperationCompleted == null)) {
                this.getServiceByDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceByDescriptionOperationCompleted);
            }
            this.InvokeAsync("getServiceByDescription", new object[] {
                        arg0}, this.getServiceByDescriptionOperationCompleted, userState);
        }
        
        private void OngetServiceByDescriptionOperationCompleted(object arg) {
            if ((this.getServiceByDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceByDescriptionCompleted(this, new getServiceByDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://network.linksmart.eu")]
    public partial class VirtualAddress {
        
        private byte[] bytesField;
        
        private long contextID1Field;
        
        private bool contextID1FieldSpecified;
        
        private long contextID2Field;
        
        private bool contextID2FieldSpecified;
        
        private long contextID3Field;
        
        private bool contextID3FieldSpecified;
        
        private long deviceIDField;
        
        private bool deviceIDFieldSpecified;
        
        private int levelField;
        
        private bool levelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] bytes {
            get {
                return this.bytesField;
            }
            set {
                this.bytesField = value;
            }
        }
        
        /// <remarks/>
        public long contextID1 {
            get {
                return this.contextID1Field;
            }
            set {
                this.contextID1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contextID1Specified {
            get {
                return this.contextID1FieldSpecified;
            }
            set {
                this.contextID1FieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long contextID2 {
            get {
                return this.contextID2Field;
            }
            set {
                this.contextID2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contextID2Specified {
            get {
                return this.contextID2FieldSpecified;
            }
            set {
                this.contextID2FieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long contextID3 {
            get {
                return this.contextID3Field;
            }
            set {
                this.contextID3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contextID3Specified {
            get {
                return this.contextID3FieldSpecified;
            }
            set {
                this.contextID3FieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long deviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deviceIDSpecified {
            get {
                return this.deviceIDFieldSpecified;
            }
            set {
                this.deviceIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool levelSpecified {
            get {
                return this.levelFieldSpecified;
            }
            set {
                this.levelFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://network.linksmart.eu")]
    public partial class Message {
        
        private byte[] dataField;
        
        private string[] keySetField;
        
        private VirtualAddress receiverVirtualAddressField;
        
        private VirtualAddress senderVirtualAddressField;
        
        private string topicField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://networkmanager.network.linksmart.eu/")]
        public string[] keySet {
            get {
                return this.keySetField;
            }
            set {
                this.keySetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public VirtualAddress receiverVirtualAddress {
            get {
                return this.receiverVirtualAddressField;
            }
            set {
                this.receiverVirtualAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public VirtualAddress senderVirtualAddress {
            get {
                return this.senderVirtualAddressField;
            }
            set {
                this.senderVirtualAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string topic {
            get {
                return this.topicField;
            }
            set {
                this.topicField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://network.linksmart.eu")]
    public partial class NMResponse {
        
        private string messageField;
        
        private Message messageObjectField;
        
        private int statusField;
        
        private bool statusFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Message messageObject {
            get {
                return this.messageObjectField;
            }
            set {
                this.messageObjectField = value;
            }
        }
        
        /// <remarks/>
        public int status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://network.linksmart.eu")]
    public partial class Registration {
        
        private Part[] attributesField;
        
        private string descriptionField;
        
        private VirtualAddress virtualAddressField;
        
        private string virtualAddressAsStringField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://utils.linksmart.eu")]
        public Part[] attributes {
            get {
                return this.attributesField;
            }
            set {
                this.attributesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public VirtualAddress virtualAddress {
            get {
                return this.virtualAddressField;
            }
            set {
                this.virtualAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string virtualAddressAsString {
            get {
                return this.virtualAddressAsStringField;
            }
            set {
                this.virtualAddressAsStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://utils.linksmart.eu")]
    public partial class Part {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeServiceCompletedEventHandler(object sender, removeServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerServiceCompletedEventHandler(object sender, registerServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Registration Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Registration)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void sendDataCompletedEventHandler(object sender, sendDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NMResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NMResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAvailableBackbonesCompletedEventHandler(object sender, getAvailableBackbonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableBackbonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableBackbonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceByAttributes1CompletedEventHandler(object sender, getServiceByAttributes1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceByAttributes1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceByAttributes1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Registration[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Registration[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceByAttributesCompletedEventHandler(object sender, getServiceByAttributesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceByAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceByAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Registration[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Registration[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceCompletedEventHandler(object sender, getServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VirtualAddress Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VirtualAddress)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceByPIDCompletedEventHandler(object sender, getServiceByPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceByPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceByPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Registration Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Registration)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceByQueryCompletedEventHandler(object sender, getServiceByQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceByQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceByQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Registration[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Registration[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceByDescriptionCompletedEventHandler(object sender, getServiceByDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Registration[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Registration[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591