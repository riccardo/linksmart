/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
/**
 * Copyright (C) 2006-2010 [University of Paderborn]
 *                         the HYDRA consortium, EU project IST-2005-034891
 *
 * This file is part of LinkSmart.
 *
 * LinkSmart is free software: you can redistribute it and/or modify
 * it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE
 * version 3 as published by the Free Software Foundation.
 *
 * LinkSmart is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with LinkSmart.  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.linksmart.limbo.cookiedevice;


import java.util.Hashtable;
 import java.util.Dictionary;

import eu.linksmart.limbo.cookiedevice.upnp.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;


/**
 * LinkSmartServicePortOpsImpl is generated by Limbo
 *
 * 
 */
public class LinkSmartServicePortOpsImpl {


	private CookieDeviceDevice device;
	private LinkSmartServicePortUPnPService upnpService;
	GetLinkSmartIDAction getlinksmartid;
	CreateWSAction createws;
	GetStatusAction getstatus;
	GetPropertyAction getproperty;
	GetHasErrorAction gethaserror;
	GetErrorMessageAction geterrormessage;
	GetDiscoveryInfoAction getdiscoveryinfo;
	GetDACEndpointAction getdacendpoint;
	GetWSEndpointAction getwsendpoint;
	GetLinkSmartWSEndpointAction getlinksmartwsendpoint;
	GetWSDLAction getwsdl;
	SetLinkSmartIDAction setlinksmartid;
	SetStatusAction setstatus;
	SetDACEndpointAction setdacendpoint;
	SetPropertyAction setproperty;
	StopAction stop;
	StopWSAction stopws;
	StopLinkSmartWSAction stoplinksmartws;
	public LinkSmartServicePortOpsImpl(){
		this.device = CookieDeviceActivator.getDevice();
		this.upnpService = (LinkSmartServicePortUPnPService)this.device.getService("urn:upnp-org:serviceId:LinkSmartServicePort");		
		this.getlinksmartid = (GetLinkSmartIDAction)this.upnpService.getAction("GetLinkSmartID");
		this.createws = (CreateWSAction)this.upnpService.getAction("CreateWS");
		this.getstatus = (GetStatusAction)this.upnpService.getAction("GetStatus");
		this.getproperty = (GetPropertyAction)this.upnpService.getAction("GetProperty");
		this.gethaserror = (GetHasErrorAction)this.upnpService.getAction("GetHasError");
		this.geterrormessage = (GetErrorMessageAction)this.upnpService.getAction("GetErrorMessage");
		this.getdiscoveryinfo = (GetDiscoveryInfoAction)this.upnpService.getAction("GetDiscoveryInfo");
		this.getdacendpoint = (GetDACEndpointAction)this.upnpService.getAction("GetDACEndpoint");
		this.getwsendpoint = (GetWSEndpointAction)this.upnpService.getAction("GetWSEndpoint");
		this.getlinksmartwsendpoint = (GetLinkSmartWSEndpointAction)this.upnpService.getAction("GetLinkSmartWSEndpoint");
		this.getwsdl = (GetWSDLAction)this.upnpService.getAction("GetWSDL");
		this.setlinksmartid = (SetLinkSmartIDAction)this.upnpService.getAction("SetLinkSmartID");
		this.setstatus = (SetStatusAction)this.upnpService.getAction("SetStatus");
		this.setdacendpoint = (SetDACEndpointAction)this.upnpService.getAction("SetDACEndpoint");
		this.setproperty = (SetPropertyAction)this.upnpService.getAction("SetProperty");
		this.stop = (StopAction)this.upnpService.getAction("Stop");
		this.stopws = (StopWSAction)this.upnpService.getAction("StopWS");
		this.stoplinksmartws = (StopLinkSmartWSAction)this.upnpService.getAction("StopLinkSmartWS");
		//((WSEndpointStateVariable)this.getwsendpoint.getStateVariable("wsendpoint")).set(CookieDeviceServlet.getEndpoint());
		//((LinkSmartWSEndpointStateVariable)this.getlinksmartwsendpoint.getStateVariable("linksmartwsendpoint")).set(LinkSmartServicePortServlet.getEndpoint());
		((DiscoveryInfoStateVariable)this.getdiscoveryinfo.getStateVariable("discoveryinfo")).set("Limbo generated WS code");
		((HasErrorStateVariable)this.gethaserror.getStateVariable("haserror")).set(false);
		InputStream is = LinkSmartServicePortOpsImpl.class.getResourceAsStream("/resources/CookieDevice.wsdl");
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
	        StringBuilder sb = new StringBuilder();
		String line;
		try {
			while ((line = reader.readLine()) != null) {
				sb.append(line + "\n");
		    }
		} catch (IOException e) {
		   e.printStackTrace();
		}           
		try {
			is.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		String wsdl = sb.toString();
		((wsdlStateVariable)this.getwsdl.getStateVariable("wsdl")).set(wsdl);

	}

	public java.lang.String GetLinkSmartID(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getlinksmartid.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("LinkSmartID").toString();
	}

	public java.lang.String CreateWS(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.createws.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("WSEndpoint").toString();
	}

	public java.lang.String GetStatus(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getstatus.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("Status").toString();
	}

	public java.lang.String GetProperty(java.lang.String Property ){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		args.put("Property",Property);
		try{
			result = this.getproperty.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("PropertyValue").toString();
	}

	public java.lang.Boolean GetHasError(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.gethaserror.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return new Boolean(result.get("HasError").toString()).booleanValue();
	}

	public java.lang.String GetErrorMessage(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.geterrormessage.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("ErrorMessage").toString();
	}

	public java.lang.String GetDiscoveryInfo(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getdiscoveryinfo.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("DiscoveryInfo").toString();
	}

	public java.lang.String GetDACEndpoint(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getdacendpoint.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("DACEndpoint").toString();
	}

	public java.lang.String GetWSEndpoint(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getwsendpoint.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("WSEndpoint").toString();
	}

	public java.lang.String GetLinkSmartWSEndpoint(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getlinksmartwsendpoint.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("LinkSmartWSEndpoint").toString();
	}

	public java.lang.String GetWSDL(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.getwsdl.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}return result.get("wsdl").toString();
	}

	public void SetLinkSmartID(java.lang.String LinkSmartID ){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		args.put("LinkSmartID",LinkSmartID);
		try{
			result = this.setlinksmartid.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void SetStatus(java.lang.String Status ){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		args.put("Status",Status);
		try{
			result = this.setstatus.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void SetDACEndpoint(java.lang.String DACEndpoint ){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		args.put("DACEndpoint",DACEndpoint);
		try{
			result = this.setdacendpoint.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void SetProperty(java.lang.String Property, java.lang.String Value ){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		args.put("Property",Property);
		args.put("Value",Value);
		try{
			result = this.setproperty.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void Stop(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.stop.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void StopWS(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.stopws.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void StopLinkSmartWS(){
		Hashtable args = new Hashtable();
		Dictionary result = null;
		try{
			result = this.stoplinksmartws.invoke(args);
		}catch(Exception e){
			e.printStackTrace();
		}
	}



}