/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
/**
 * Copyright (C) 2006-2010 
 *                         the HYDRA consortium, EU project IST-2005-034891
 *
 * This file is part of LinkSmart.
 *
 * LinkSmart is free software: you can redistribute it and/or modify
 * it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE
 * version 3 as published by the Free Software Foundation.
 *
 * LinkSmart is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with LinkSmart.  If not, see <http://www.gnu.org/licenses/>.
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 28 18:38:22 CET 2009
//----------------------------------------------------

package eu.linksmart.selfstar.cc.asl.parser;

import java_cup.runtime.*;
import java.util.Vector;
import java.util.Hashtable;
import java.util.HashSet;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 28 18:38:22 CET 2009
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\016\003\000\002\002\004\000\002\017" +
    "\003\000\002\017\004\000\002\020\004\000\002\020\007" +
    "\000\002\021\006\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\006\000\002\023\003\000\002" +
    "\024\006\000\002\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\006\011\010\015\005\001\002\000\004\002" +
    "\044\001\002\000\004\006\020\001\002\000\010\002\uffff" +
    "\011\uffff\015\uffff\001\002\000\004\004\017\001\002\000" +
    "\004\015\013\001\002\000\010\002\001\011\010\015\005" +
    "\001\002\000\010\002\ufffe\011\ufffe\015\ufffe\001\002\000" +
    "\004\010\014\001\002\000\004\015\015\001\002\000\004" +
    "\004\016\001\002\000\010\002\ufffc\011\ufffc\015\ufffc\001" +
    "\002\000\010\002\ufffd\011\ufffd\015\ufffd\001\002\000\010" +
    "\011\026\014\022\015\021\001\002\000\006\007\ufff8\012" +
    "\ufff8\001\002\000\004\015\041\001\002\000\010\007\ufff6" +
    "\012\ufff6\014\035\001\002\000\006\007\033\012\032\001" +
    "\002\000\006\007\ufffa\012\ufffa\001\002\000\004\015\027" +
    "\001\002\000\004\013\030\001\002\000\004\015\031\001" +
    "\002\000\006\007\ufff7\012\ufff7\001\002\000\010\011\026" +
    "\014\022\015\021\001\002\000\004\004\ufffb\001\002\000" +
    "\006\007\ufff9\012\ufff9\001\002\000\004\015\036\001\002" +
    "\000\004\010\037\001\002\000\004\015\040\001\002\000" +
    "\010\007\ufff4\012\ufff4\014\ufff4\001\002\000\004\010\042" +
    "\001\002\000\004\015\043\001\002\000\010\007\ufff5\012" +
    "\ufff5\014\ufff5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\012\016\003\017\010\020\005\021\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\011\021" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\023\023\024\024\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\033\024" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


				 Hashtable<String,String> stringvars=new Hashtable<String,String>();
				 HashSet<String> handles = new HashSet<String>();
				 static boolean debug=false;
				 public void debug(String msg){
				 	if (debug)
				 		System.out.println(msg);
				 }
			
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DESIGNATOR ::= DESIGNATOR DMARK STRING ASSIGN STRING 
            {
              Hashtable<String,String> RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Hashtable<String,String> des = (Hashtable<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	          des.put(key,value);
	          RESULT=des;
	          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DESIGNATOR ::= DMARK STRING ASSIGN STRING 
            {
              Hashtable<String,String> RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	          Hashtable<String,String> parlist=new Hashtable<String,String>(1);
	          parlist.put(key,value);
	          RESULT=parlist;
	          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETER ::= DESIGNATOR 
            {
              Parameter RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Hashtable<String,String> des = (Hashtable<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Parameter(des); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETER ::= DOLLAR STRING PLUS STRING 
            {
              Parameter RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String literal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Parameter(stringvars.get(var)+literal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARAMETER ::= STRING 
            {
              Parameter RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Parameter(str);
	             debug("PARAMETER is "+str); 
	          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARLIST ::= PARLIST COMMA PARAMETER 
            {
              Vector<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Parameter> list = (Vector<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter par = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			debug("adding"+par+"to"+list);
                    list.add(par);
                    debug("PARLIST is now"+list);
                    RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARLIST",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARLIST ::= PARAMETER 
            {
              Vector<Parameter> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter par = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			debug("PARLIST list is \""+par+"\"");
		     		RESULT=new Vector<Parameter>(3);
		     		RESULT.add(par); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARLIST",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCALL ::= STRING LPAR PARLIST RPAR 
            {
              SymTree RESULT =null;
		int opnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String opname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector<Parameter> pl = (Vector<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("OPCALL is "+opname+" PARLIST: "+pl);
		         RESULT=new SymTree(SymTree.OPCALL, opname, new SymTree(SymTree.PARLIST, pl));
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCALL",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPR ::= DOLLAR STRING ASSIGN STRING SEMI 
            {
              SymTree RESULT =null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("$"+varname+" assigned \""+value+"\"");
		        stringvars.put(varname,value); 
		        RESULT=new SymTree(SymTree.STRINGDEF, new String("$"+varname+"="+value),null);
		     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPR ::= OPCALL SEMI 
            {
              SymTree RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTree opc = (SymTree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("EXPR: <opname>"+opc+";"); 
	            RESULT=new SymTree(SymTree.EXPR, null, opc);
	         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXPRLIST ::= EXPRLIST EXPR 
            {
              SymTree RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTree el = (SymTree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymTree e = (SymTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("EXPRLIST: extended");
               if (e.getType()==SymTree.EXPR) // exclude string-defs 
                   el.addChild(e);
               RESULT=el;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRLIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXPRLIST ::= EXPR 
            {
              SymTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymTree e = (SymTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("EXPR: reduced to EXPRLIST"); 
               RESULT=new SymTree(SymTree.EXPRLIST, null, e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRLIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTree start_val = (SymTree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SCRIPT ::= EXPRLIST 
            {
              SymTree RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymTree el = (SymTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("EXPRLIST: reduced to SCRIPT"); 
            	RESULT=new SymTree(SymTree.SCRIPT, null, el); 
            	SymTree.setStringVarsDict(stringvars);
            	//RESULT.printTree();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

