using OpenSource.UPnP;

namespace Intel.Sample
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class Dvapplicationdevicemanagerservice : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _Dvapplicationdevicemanagerservice _S;
        public static string URN = "urn:schemas-upnp-org:service:applicationdevicemanagerservice::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(Dvapplicationdevicemanagerservice sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_DeviceType;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Gateways;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Ednpoint;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Endpointlist;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Gateway;
        public event OnStateVariableModifiedHandler OnStateVariableModified_DeviceId;
        public event OnStateVariableModifiedHandler OnStateVariableModified_EndpointType;
        public event OnStateVariableModifiedHandler OnStateVariableModified_ReturnDeviceXML;
        public event OnStateVariableModifiedHandler OnStateVariableModified_DeviceList;
        public event OnStateVariableModifiedHandler OnStateVariableModified_XPath;
        public event OnStateVariableModifiedHandler OnStateVariableModified_IDType;
        public System.String DeviceType
        {
            get
            {
               return((System.String)_S.GetStateVariable("DeviceType"));
            }
            set
            {
               _S.SetStateVariable("DeviceType", value);
            }
        }
        public System.String Gateways
        {
            get
            {
               return((System.String)_S.GetStateVariable("Gateways"));
            }
            set
            {
               _S.SetStateVariable("Gateways", value);
            }
        }
        public System.String Ednpoint
        {
            get
            {
               return((System.String)_S.GetStateVariable("Ednpoint"));
            }
            set
            {
               _S.SetStateVariable("Ednpoint", value);
            }
        }
        public System.String Endpointlist
        {
            get
            {
               return((System.String)_S.GetStateVariable("Endpointlist"));
            }
            set
            {
               _S.SetStateVariable("Endpointlist", value);
            }
        }
        public System.String Gateway
        {
            get
            {
               return((System.String)_S.GetStateVariable("Gateway"));
            }
            set
            {
               _S.SetStateVariable("Gateway", value);
            }
        }
        public System.String DeviceId
        {
            get
            {
               return((System.String)_S.GetStateVariable("DeviceId"));
            }
            set
            {
               _S.SetStateVariable("DeviceId", value);
            }
        }
        public System.String EndpointType
        {
            get
            {
               return((System.String)_S.GetStateVariable("EndpointType"));
            }
            set
            {
               _S.SetStateVariable("EndpointType", value);
            }
        }
        public System.String ReturnDeviceXML
        {
            get
            {
               return((System.String)_S.GetStateVariable("ReturnDeviceXML"));
            }
            set
            {
               _S.SetStateVariable("ReturnDeviceXML", value);
            }
        }
        public System.String DeviceList
        {
            get
            {
               return((System.String)_S.GetStateVariable("DeviceList"));
            }
            set
            {
               _S.SetStateVariable("DeviceList", value);
            }
        }
        public System.String XPath
        {
            get
            {
               return((System.String)_S.GetStateVariable("XPath"));
            }
            set
            {
               _S.SetStateVariable("XPath", value);
            }
        }
        public System.String IDType
        {
            get
            {
               return((System.String)_S.GetStateVariable("IDType"));
            }
            set
            {
               _S.SetStateVariable("IDType", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DeviceType
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceType")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceType")).Accumulator = value;
            }
        }
        public double ModerationDuration_DeviceType
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceType")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceType")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Gateways
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateways")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateways")).Accumulator = value;
            }
        }
        public double ModerationDuration_Gateways
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateways")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateways")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Ednpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Ednpoint")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Ednpoint")).Accumulator = value;
            }
        }
        public double ModerationDuration_Ednpoint
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Ednpoint")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Ednpoint")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Endpointlist
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Endpointlist")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Endpointlist")).Accumulator = value;
            }
        }
        public double ModerationDuration_Endpointlist
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Endpointlist")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Endpointlist")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Gateway
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateway")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateway")).Accumulator = value;
            }
        }
        public double ModerationDuration_Gateway
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateway")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Gateway")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DeviceId
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceId")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceId")).Accumulator = value;
            }
        }
        public double ModerationDuration_DeviceId
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceId")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceId")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_EndpointType
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EndpointType")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EndpointType")).Accumulator = value;
            }
        }
        public double ModerationDuration_EndpointType
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EndpointType")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EndpointType")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ReturnDeviceXML
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ReturnDeviceXML")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ReturnDeviceXML")).Accumulator = value;
            }
        }
        public double ModerationDuration_ReturnDeviceXML
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ReturnDeviceXML")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ReturnDeviceXML")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DeviceList
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceList")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceList")).Accumulator = value;
            }
        }
        public double ModerationDuration_DeviceList
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceList")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceList")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_XPath
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("XPath")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("XPath")).Accumulator = value;
            }
        }
        public double ModerationDuration_XPath
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("XPath")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("XPath")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_IDType
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IDType")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IDType")).Accumulator = value;
            }
        }
        public double ModerationDuration_IDType
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IDType")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("IDType")).ModerationPeriod = value;
            }
        }
        public delegate System.String Delegate_GetAllGateways();
        public delegate System.String Delegate_GetDeviceXML(System.String deviceid, System.String idtype);
        public delegate System.String Delegate_GetIoTDevices(System.String gateway);
        public delegate System.String Delegate_GetIoTDevicesFromType(System.String gateway, System.String deviceType);
        public delegate System.String Delegate_GetIoTDevicesFromXpath(System.String xpath);
        public delegate System.String Delegate_GetUnresolvedDevices(System.String gateway);
        public delegate void Delegate_RemoveDevice(System.String deviceid, System.String idtype);

        public Delegate_GetAllGateways External_GetAllGateways = null;
        public Delegate_GetDeviceXML External_GetDeviceXML = null;
        public Delegate_GetIoTDevices External_GetIoTDevices = null;
        public Delegate_GetIoTDevicesFromType External_GetIoTDevicesFromType = null;
        public Delegate_GetIoTDevicesFromXpath External_GetIoTDevicesFromXpath = null;
        public Delegate_GetUnresolvedDevices External_GetUnresolvedDevices = null;
        public Delegate_RemoveDevice External_RemoveDevice = null;

        public void RemoveStateVariable_DeviceType()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("DeviceType"));
        }
        public void RemoveStateVariable_Gateways()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Gateways"));
        }
        public void RemoveStateVariable_Ednpoint()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Ednpoint"));
        }
        public void RemoveStateVariable_Endpointlist()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Endpointlist"));
        }
        public void RemoveStateVariable_Gateway()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Gateway"));
        }
        public void RemoveStateVariable_DeviceId()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("DeviceId"));
        }
        public void RemoveStateVariable_EndpointType()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("EndpointType"));
        }
        public void RemoveStateVariable_ReturnDeviceXML()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("ReturnDeviceXML"));
        }
        public void RemoveStateVariable_DeviceList()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("DeviceList"));
        }
        public void RemoveStateVariable_XPath()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("XPath"));
        }
        public void RemoveStateVariable_IDType()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("IDType"));
        }
        public void RemoveAction_GetAllGateways()
        {
             _S.GetUPnPService().RemoveMethod("GetAllGateways");
        }
        public void RemoveAction_GetDeviceXML()
        {
             _S.GetUPnPService().RemoveMethod("GetDeviceXML");
        }
        public void RemoveAction_GetIoTDevices()
        {
             _S.GetUPnPService().RemoveMethod("GetIoTDevices");
        }
        public void RemoveAction_GetIoTDevicesFromType()
        {
             _S.GetUPnPService().RemoveMethod("GetIoTDevicesFromType");
        }
        public void RemoveAction_GetIoTDevicesFromXpath()
        {
             _S.GetUPnPService().RemoveMethod("GetIoTDevicesFromXpath");
        }
        public void RemoveAction_GetUnresolvedDevices()
        {
             _S.GetUPnPService().RemoveMethod("GetUnresolvedDevices");
        }
        public void RemoveAction_RemoveDevice()
        {
             _S.GetUPnPService().RemoveMethod("RemoveDevice");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _Dvapplicationdevicemanagerservice
        {
            private Dvapplicationdevicemanagerservice Outer = null;
            private UPnPService S;
            internal _Dvapplicationdevicemanagerservice(Dvapplicationdevicemanagerservice n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[11];
                RetVal[0] = new UPnPModeratedStateVariable("DeviceType", typeof(System.String), false);
                RetVal[0].AddAssociation("GetIoTDevicesFromType", "deviceType");
                RetVal[1] = new UPnPModeratedStateVariable("Gateways", typeof(System.String), false);
                RetVal[1].AddAssociation("GetAllGateways", "gateways");
                RetVal[2] = new UPnPModeratedStateVariable("Ednpoint", typeof(System.String), false);
                RetVal[3] = new UPnPModeratedStateVariable("Endpointlist", typeof(System.String), false);
                RetVal[4] = new UPnPModeratedStateVariable("Gateway", typeof(System.String), false);
                RetVal[4].AddAssociation("GetIoTDevices", "gateway");
                RetVal[4].AddAssociation("GetIoTDevicesFromType", "gateway");
                RetVal[4].AddAssociation("GetUnresolvedDevices", "gateway");
                RetVal[5] = new UPnPModeratedStateVariable("DeviceId", typeof(System.String), false);
                RetVal[5].AddAssociation("GetDeviceXML", "deviceid");
                RetVal[5].AddAssociation("RemoveDevice", "deviceid");
                RetVal[6] = new UPnPModeratedStateVariable("EndpointType", typeof(System.String), false);
                RetVal[7] = new UPnPModeratedStateVariable("ReturnDeviceXML", typeof(System.String), false);
                RetVal[7].AddAssociation("GetDeviceXML", "returnDevice");
                RetVal[7].AddAssociation("GetIoTDevices", "returnDevice");
                RetVal[7].AddAssociation("GetIoTDevicesFromType", "devicelist");
                RetVal[7].AddAssociation("GetIoTDevicesFromXpath", "devicelist");
                RetVal[7].AddAssociation("GetUnresolvedDevices", "returrndevicelist");
                RetVal[8] = new UPnPModeratedStateVariable("DeviceList", typeof(System.String), false);
                RetVal[9] = new UPnPModeratedStateVariable("XPath", typeof(System.String), false);
                RetVal[9].AddAssociation("GetIoTDevicesFromXpath", "xpath");
                RetVal[10] = new UPnPModeratedStateVariable("IDType", typeof(System.String), false);
                RetVal[10].AddAssociation("GetDeviceXML", "idtype");
                RetVal[10].AddAssociation("RemoveDevice", "idtype");

                UPnPService S = new UPnPService(1, "urn:upnp-org:serviceId:applicationdevicemanagerservice:1", "urn:schemas-upnp-org:service:applicationdevicemanagerservice::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetAllGateways");
                S.AddMethod("GetDeviceXML");
                S.AddMethod("GetIoTDevices");
                S.AddMethod("GetIoTDevicesFromType");
                S.AddMethod("GetIoTDevicesFromXpath");
                S.AddMethod("GetUnresolvedDevices");
                S.AddMethod("RemoveDevice");
                return(S);
            }

            [OpenSource.UPnP.ReturnArgument("gateways")]
            public System.String GetAllGateways()
            {
                object RetObj = null;
                if(Outer.External_GetAllGateways != null)
                {
                    RetObj = Outer.External_GetAllGateways();
                }
                else
                {
                    RetObj = Sink_GetAllGateways();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("returnDevice")]
            public System.String GetDeviceXML(System.String deviceid, System.String idtype)
            {
                object RetObj = null;
                if(Outer.External_GetDeviceXML != null)
                {
                    RetObj = Outer.External_GetDeviceXML(deviceid, idtype);
                }
                else
                {
                    RetObj = Sink_GetDeviceXML(deviceid, idtype);
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("returnDevice")]
            public System.String GetIoTDevices(System.String gateway)
            {
                object RetObj = null;
                if(Outer.External_GetIoTDevices != null)
                {
                    RetObj = Outer.External_GetIoTDevices(gateway);
                }
                else
                {
                    RetObj = Sink_GetIoTDevices(gateway);
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("devicelist")]
            public System.String GetIoTDevicesFromType(System.String gateway, System.String deviceType)
            {
                object RetObj = null;
                if(Outer.External_GetIoTDevicesFromType != null)
                {
                    RetObj = Outer.External_GetIoTDevicesFromType(gateway, deviceType);
                }
                else
                {
                    RetObj = Sink_GetIoTDevicesFromType(gateway, deviceType);
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("devicelist")]
            public System.String GetIoTDevicesFromXpath(System.String xpath)
            {
                object RetObj = null;
                if(Outer.External_GetIoTDevicesFromXpath != null)
                {
                    RetObj = Outer.External_GetIoTDevicesFromXpath(xpath);
                }
                else
                {
                    RetObj = Sink_GetIoTDevicesFromXpath(xpath);
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("returrndevicelist")]
            public System.String GetUnresolvedDevices(System.String gateway)
            {
                object RetObj = null;
                if(Outer.External_GetUnresolvedDevices != null)
                {
                    RetObj = Outer.External_GetUnresolvedDevices(gateway);
                }
                else
                {
                    RetObj = Sink_GetUnresolvedDevices(gateway);
                }
                return((System.String)RetObj);
            }
            public void RemoveDevice(System.String deviceid, System.String idtype)
            {
                if(Outer.External_RemoveDevice != null)
                {
                    Outer.External_RemoveDevice(deviceid, idtype);
                }
                else
                {
                    Sink_RemoveDevice(deviceid, idtype);
                }
            }

            public Delegate_GetAllGateways Sink_GetAllGateways;
            public Delegate_GetDeviceXML Sink_GetDeviceXML;
            public Delegate_GetIoTDevices Sink_GetIoTDevices;
            public Delegate_GetIoTDevicesFromType Sink_GetIoTDevicesFromType;
            public Delegate_GetIoTDevicesFromXpath Sink_GetIoTDevicesFromXpath;
            public Delegate_GetUnresolvedDevices Sink_GetUnresolvedDevices;
            public Delegate_RemoveDevice Sink_RemoveDevice;
        }
        public Dvapplicationdevicemanagerservice()
        {
            _S = new _Dvapplicationdevicemanagerservice(this);
            _S.GetUPnPService().GetStateVariableObject("DeviceType").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_DeviceType);
            _S.GetUPnPService().GetStateVariableObject("Gateways").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Gateways);
            _S.GetUPnPService().GetStateVariableObject("Ednpoint").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Ednpoint);
            _S.GetUPnPService().GetStateVariableObject("Endpointlist").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Endpointlist);
            _S.GetUPnPService().GetStateVariableObject("Gateway").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Gateway);
            _S.GetUPnPService().GetStateVariableObject("DeviceId").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_DeviceId);
            _S.GetUPnPService().GetStateVariableObject("EndpointType").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_EndpointType);
            _S.GetUPnPService().GetStateVariableObject("ReturnDeviceXML").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_ReturnDeviceXML);
            _S.GetUPnPService().GetStateVariableObject("DeviceList").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_DeviceList);
            _S.GetUPnPService().GetStateVariableObject("XPath").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_XPath);
            _S.GetUPnPService().GetStateVariableObject("IDType").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_IDType);
            _S.Sink_GetAllGateways = new Delegate_GetAllGateways(GetAllGateways);
            _S.Sink_GetDeviceXML = new Delegate_GetDeviceXML(GetDeviceXML);
            _S.Sink_GetIoTDevices = new Delegate_GetIoTDevices(GetIoTDevices);
            _S.Sink_GetIoTDevicesFromType = new Delegate_GetIoTDevicesFromType(GetIoTDevicesFromType);
            _S.Sink_GetIoTDevicesFromXpath = new Delegate_GetIoTDevicesFromXpath(GetIoTDevicesFromXpath);
            _S.Sink_GetUnresolvedDevices = new Delegate_GetUnresolvedDevices(GetUnresolvedDevices);
            _S.Sink_RemoveDevice = new Delegate_RemoveDevice(RemoveDevice);
        }
        public Dvapplicationdevicemanagerservice(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_DeviceType(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_DeviceType != null) OnStateVariableModified_DeviceType(this);
        }
        private void OnModifiedSink_Gateways(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Gateways != null) OnStateVariableModified_Gateways(this);
        }
        private void OnModifiedSink_Ednpoint(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Ednpoint != null) OnStateVariableModified_Ednpoint(this);
        }
        private void OnModifiedSink_Endpointlist(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Endpointlist != null) OnStateVariableModified_Endpointlist(this);
        }
        private void OnModifiedSink_Gateway(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Gateway != null) OnStateVariableModified_Gateway(this);
        }
        private void OnModifiedSink_DeviceId(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_DeviceId != null) OnStateVariableModified_DeviceId(this);
        }
        private void OnModifiedSink_EndpointType(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_EndpointType != null) OnStateVariableModified_EndpointType(this);
        }
        private void OnModifiedSink_ReturnDeviceXML(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_ReturnDeviceXML != null) OnStateVariableModified_ReturnDeviceXML(this);
        }
        private void OnModifiedSink_DeviceList(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_DeviceList != null) OnStateVariableModified_DeviceList(this);
        }
        private void OnModifiedSink_XPath(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_XPath != null) OnStateVariableModified_XPath(this);
        }
        private void OnModifiedSink_IDType(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_IDType != null) OnStateVariableModified_IDType(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: GetAllGateways
        /// </summary>
        /// <returns>Associated StateVariable: Gateways</returns>
        public System.String GetAllGateways()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetDeviceXML
        /// </summary>
        /// <param name="deviceid">Associated State Variable: DeviceId</param>
        /// <param name="idtype">Associated State Variable: IDType</param>
        /// <returns>Associated StateVariable: ReturnDeviceXML</returns>
        public System.String GetDeviceXML(System.String deviceid, System.String idtype)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetIoTDevices
        /// </summary>
        /// <param name="gateway">Associated State Variable: Gateway</param>
        /// <returns>Associated StateVariable: ReturnDeviceXML</returns>
        public System.String GetIoTDevices(System.String gateway)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetIoTDevicesFromType
        /// </summary>
        /// <param name="gateway">Associated State Variable: Gateway</param>
        /// <param name="deviceType">Associated State Variable: DeviceType</param>
        /// <returns>Associated StateVariable: ReturnDeviceXML</returns>
        public System.String GetIoTDevicesFromType(System.String gateway, System.String deviceType)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetIoTDevicesFromXpath
        /// </summary>
        /// <param name="xpath">Associated State Variable: XPath</param>
        /// <returns>Associated StateVariable: ReturnDeviceXML</returns>
        public System.String GetIoTDevicesFromXpath(System.String xpath)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetUnresolvedDevices
        /// </summary>
        /// <param name="gateway">Associated State Variable: Gateway</param>
        /// <returns>Associated StateVariable: ReturnDeviceXML</returns>
        public System.String GetUnresolvedDevices(System.String gateway)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: RemoveDevice
        /// </summary>
        /// <param name="deviceid">Associated State Variable: DeviceId</param>
        /// <param name="idtype">Associated State Variable: IDType</param>
        public void RemoveDevice(System.String deviceid, System.String idtype)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}