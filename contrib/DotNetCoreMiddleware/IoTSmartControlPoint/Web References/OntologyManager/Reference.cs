/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace IoT.OntologyManager {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ApplicationOntologyManagerServiceOSGiSoapBinding", Namespace="http://aom.IoT.eu.com")]
    public partial class ApplicationOntologyManagerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback addValue1OperationCompleted;
        
        private System.Threading.SendOrPostCallback createDeviceTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback resolveDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback createTestingRuntimeCloneOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignDiscoveryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignEventModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignEnergyProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDevices1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getDeviceTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDevicesWithServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDevicesWithServices1OperationCompleted;
        
        private System.Threading.SendOrPostCallback addFormDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDeviceTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInstanceTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getClassLiteralsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPropertyAnnotationModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSCPDOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeOperationCompleted;
        
        private System.Threading.SendOrPostCallback remove1OperationCompleted;
        
        private System.Threading.SendOrPostCallback cleanOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOperationCompleted;
        
        private System.Threading.SendOrPostCallback dumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConfigurationsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ApplicationOntologyManagerService() {
            this.Url = global::IoT.Properties.Settings.Default.HydraSmartControlPoint_OntologyManager_ApplicationOntologyManagerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getTreeCompletedEventHandler getTreeCompleted;
        
        /// <remarks/>
        public event addValueCompletedEventHandler addValueCompleted;
        
        /// <remarks/>
        public event addValue1CompletedEventHandler addValue1Completed;
        
        /// <remarks/>
        public event createDeviceTemplateCompletedEventHandler createDeviceTemplateCompleted;
        
        /// <remarks/>
        public event assignPIDCompletedEventHandler assignPIDCompleted;
        
        /// <remarks/>
        public event removeDeviceCompletedEventHandler removeDeviceCompleted;
        
        /// <remarks/>
        public event resolveDeviceCompletedEventHandler resolveDeviceCompleted;
        
        /// <remarks/>
        public event createTestingRuntimeCloneCompletedEventHandler createTestingRuntimeCloneCompleted;
        
        /// <remarks/>
        public event assignDiscoveryInfoCompletedEventHandler assignDiscoveryInfoCompleted;
        
        /// <remarks/>
        public event assignEventModelCompletedEventHandler assignEventModelCompleted;
        
        /// <remarks/>
        public event assignEnergyProfileCompletedEventHandler assignEnergyProfileCompleted;
        
        /// <remarks/>
        public event assignConfigurationCompletedEventHandler assignConfigurationCompleted;
        
        /// <remarks/>
        public event getDevicesCompletedEventHandler getDevicesCompleted;
        
        /// <remarks/>
        public event getDevices1CompletedEventHandler getDevices1Completed;
        
        /// <remarks/>
        public event getDeviceTypesCompletedEventHandler getDeviceTypesCompleted;
        
        /// <remarks/>
        public event getDevicesWithServicesCompletedEventHandler getDevicesWithServicesCompleted;
        
        /// <remarks/>
        public event getDevicesWithServices1CompletedEventHandler getDevicesWithServices1Completed;
        
        /// <remarks/>
        public event addFormDataCompletedEventHandler addFormDataCompleted;
        
        /// <remarks/>
        public event getDeviceTreeCompletedEventHandler getDeviceTreeCompleted;
        
        /// <remarks/>
        public event getInstanceTreeCompletedEventHandler getInstanceTreeCompleted;
        
        /// <remarks/>
        public event getClassLiteralsCompletedEventHandler getClassLiteralsCompleted;
        
        /// <remarks/>
        public event getPropertyAnnotationModelCompletedEventHandler getPropertyAnnotationModelCompleted;
        
        /// <remarks/>
        public event getSCPDCompletedEventHandler getSCPDCompleted;
        
        /// <remarks/>
        public event removeCompletedEventHandler removeCompleted;
        
        /// <remarks/>
        public event remove1CompletedEventHandler remove1Completed;
        
        /// <remarks/>
        public event cleanCompletedEventHandler cleanCompleted;
        
        /// <remarks/>
        public event updateCompletedEventHandler updateCompleted;
        
        /// <remarks/>
        public event dumpCompletedEventHandler dumpCompleted;
        
        /// <remarks/>
        public event getConfigurationsCompletedEventHandler getConfigurationsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getTreeReturn")]
        public string getTree(string in0, bool in1) {
            object[] results = this.Invoke("getTree", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTreeAsync(string in0, bool in1) {
            this.getTreeAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getTreeAsync(string in0, bool in1, object userState) {
            if ((this.getTreeOperationCompleted == null)) {
                this.getTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTreeOperationCompleted);
            }
            this.InvokeAsync("getTree", new object[] {
                        in0,
                        in1}, this.getTreeOperationCompleted, userState);
        }
        
        private void OngetTreeOperationCompleted(object arg) {
            if ((this.getTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTreeCompleted(this, new getTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("addValueReturn")]
        public string addValue(string in0, string in1, string in2, string in3, bool in4) {
            object[] results = this.Invoke("addValue", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addValueAsync(string in0, string in1, string in2, string in3, bool in4) {
            this.addValueAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void addValueAsync(string in0, string in1, string in2, string in3, bool in4, object userState) {
            if ((this.addValueOperationCompleted == null)) {
                this.addValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddValueOperationCompleted);
            }
            this.InvokeAsync("addValue", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.addValueOperationCompleted, userState);
        }
        
        private void OnaddValueOperationCompleted(object arg) {
            if ((this.addValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addValueCompleted(this, new addValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="addValue1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestElementName="addValue", RequestNamespace="http://aom.IoT.eu.com", ResponseElementName="addValueResponse", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("addValueReturn")]
        public string addValue(string in0, string in1, string in2, bool in3) {
            object[] results = this.Invoke("addValue1", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addValue1Async(string in0, string in1, string in2, bool in3) {
            this.addValue1Async(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void addValue1Async(string in0, string in1, string in2, bool in3, object userState) {
            if ((this.addValue1OperationCompleted == null)) {
                this.addValue1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddValue1OperationCompleted);
            }
            this.InvokeAsync("addValue1", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.addValue1OperationCompleted, userState);
        }
        
        private void OnaddValue1OperationCompleted(object arg) {
            if ((this.addValue1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addValue1Completed(this, new addValue1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("createDeviceTemplateReturn")]
        public string createDeviceTemplate(string in0) {
            object[] results = this.Invoke("createDeviceTemplate", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createDeviceTemplateAsync(string in0) {
            this.createDeviceTemplateAsync(in0, null);
        }
        
        /// <remarks/>
        public void createDeviceTemplateAsync(string in0, object userState) {
            if ((this.createDeviceTemplateOperationCompleted == null)) {
                this.createDeviceTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDeviceTemplateOperationCompleted);
            }
            this.InvokeAsync("createDeviceTemplate", new object[] {
                        in0}, this.createDeviceTemplateOperationCompleted, userState);
        }
        
        private void OncreateDeviceTemplateOperationCompleted(object arg) {
            if ((this.createDeviceTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDeviceTemplateCompleted(this, new createDeviceTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("assignPIDReturn")]
        public string assignPID(string in0, string in1) {
            object[] results = this.Invoke("assignPID", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void assignPIDAsync(string in0, string in1) {
            this.assignPIDAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void assignPIDAsync(string in0, string in1, object userState) {
            if ((this.assignPIDOperationCompleted == null)) {
                this.assignPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignPIDOperationCompleted);
            }
            this.InvokeAsync("assignPID", new object[] {
                        in0,
                        in1}, this.assignPIDOperationCompleted, userState);
        }
        
        private void OnassignPIDOperationCompleted(object arg) {
            if ((this.assignPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignPIDCompleted(this, new assignPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("removeDeviceReturn")]
        public string removeDevice(string in0) {
            object[] results = this.Invoke("removeDevice", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void removeDeviceAsync(string in0) {
            this.removeDeviceAsync(in0, null);
        }
        
        /// <remarks/>
        public void removeDeviceAsync(string in0, object userState) {
            if ((this.removeDeviceOperationCompleted == null)) {
                this.removeDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveDeviceOperationCompleted);
            }
            this.InvokeAsync("removeDevice", new object[] {
                        in0}, this.removeDeviceOperationCompleted, userState);
        }
        
        private void OnremoveDeviceOperationCompleted(object arg) {
            if ((this.removeDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeDeviceCompleted(this, new removeDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("resolveDeviceReturn")]
        public string resolveDevice(string in0) {
            object[] results = this.Invoke("resolveDevice", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void resolveDeviceAsync(string in0) {
            this.resolveDeviceAsync(in0, null);
        }
        
        /// <remarks/>
        public void resolveDeviceAsync(string in0, object userState) {
            if ((this.resolveDeviceOperationCompleted == null)) {
                this.resolveDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresolveDeviceOperationCompleted);
            }
            this.InvokeAsync("resolveDevice", new object[] {
                        in0}, this.resolveDeviceOperationCompleted, userState);
        }
        
        private void OnresolveDeviceOperationCompleted(object arg) {
            if ((this.resolveDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resolveDeviceCompleted(this, new resolveDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("createTestingRuntimeCloneReturn")]
        public bool createTestingRuntimeClone(string in0, string in1) {
            object[] results = this.Invoke("createTestingRuntimeClone", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void createTestingRuntimeCloneAsync(string in0, string in1) {
            this.createTestingRuntimeCloneAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void createTestingRuntimeCloneAsync(string in0, string in1, object userState) {
            if ((this.createTestingRuntimeCloneOperationCompleted == null)) {
                this.createTestingRuntimeCloneOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateTestingRuntimeCloneOperationCompleted);
            }
            this.InvokeAsync("createTestingRuntimeClone", new object[] {
                        in0,
                        in1}, this.createTestingRuntimeCloneOperationCompleted, userState);
        }
        
        private void OncreateTestingRuntimeCloneOperationCompleted(object arg) {
            if ((this.createTestingRuntimeCloneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createTestingRuntimeCloneCompleted(this, new createTestingRuntimeCloneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("assignDiscoveryInfoReturn")]
        public bool assignDiscoveryInfo(string in0, string in1) {
            object[] results = this.Invoke("assignDiscoveryInfo", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void assignDiscoveryInfoAsync(string in0, string in1) {
            this.assignDiscoveryInfoAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void assignDiscoveryInfoAsync(string in0, string in1, object userState) {
            if ((this.assignDiscoveryInfoOperationCompleted == null)) {
                this.assignDiscoveryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignDiscoveryInfoOperationCompleted);
            }
            this.InvokeAsync("assignDiscoveryInfo", new object[] {
                        in0,
                        in1}, this.assignDiscoveryInfoOperationCompleted, userState);
        }
        
        private void OnassignDiscoveryInfoOperationCompleted(object arg) {
            if ((this.assignDiscoveryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignDiscoveryInfoCompleted(this, new assignDiscoveryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("assignEventModelReturn")]
        public bool assignEventModel(string in0, string in1) {
            object[] results = this.Invoke("assignEventModel", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void assignEventModelAsync(string in0, string in1) {
            this.assignEventModelAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void assignEventModelAsync(string in0, string in1, object userState) {
            if ((this.assignEventModelOperationCompleted == null)) {
                this.assignEventModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignEventModelOperationCompleted);
            }
            this.InvokeAsync("assignEventModel", new object[] {
                        in0,
                        in1}, this.assignEventModelOperationCompleted, userState);
        }
        
        private void OnassignEventModelOperationCompleted(object arg) {
            if ((this.assignEventModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignEventModelCompleted(this, new assignEventModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("assignEnergyProfileReturn")]
        public bool assignEnergyProfile(string in0, string in1) {
            object[] results = this.Invoke("assignEnergyProfile", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void assignEnergyProfileAsync(string in0, string in1) {
            this.assignEnergyProfileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void assignEnergyProfileAsync(string in0, string in1, object userState) {
            if ((this.assignEnergyProfileOperationCompleted == null)) {
                this.assignEnergyProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignEnergyProfileOperationCompleted);
            }
            this.InvokeAsync("assignEnergyProfile", new object[] {
                        in0,
                        in1}, this.assignEnergyProfileOperationCompleted, userState);
        }
        
        private void OnassignEnergyProfileOperationCompleted(object arg) {
            if ((this.assignEnergyProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignEnergyProfileCompleted(this, new assignEnergyProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("assignConfigurationReturn")]
        public bool assignConfiguration(string in0, string in1) {
            object[] results = this.Invoke("assignConfiguration", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void assignConfigurationAsync(string in0, string in1) {
            this.assignConfigurationAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void assignConfigurationAsync(string in0, string in1, object userState) {
            if ((this.assignConfigurationOperationCompleted == null)) {
                this.assignConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignConfigurationOperationCompleted);
            }
            this.InvokeAsync("assignConfiguration", new object[] {
                        in0,
                        in1}, this.assignConfigurationOperationCompleted, userState);
        }
        
        private void OnassignConfigurationOperationCompleted(object arg) {
            if ((this.assignConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignConfigurationCompleted(this, new assignConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDevicesReturn")]
        public string getDevices(string in0) {
            object[] results = this.Invoke("getDevices", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDevicesAsync(string in0) {
            this.getDevicesAsync(in0, null);
        }
        
        /// <remarks/>
        public void getDevicesAsync(string in0, object userState) {
            if ((this.getDevicesOperationCompleted == null)) {
                this.getDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDevicesOperationCompleted);
            }
            this.InvokeAsync("getDevices", new object[] {
                        in0}, this.getDevicesOperationCompleted, userState);
        }
        
        private void OngetDevicesOperationCompleted(object arg) {
            if ((this.getDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDevicesCompleted(this, new getDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getDevices1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestElementName="getDevices", RequestNamespace="http://aom.IoT.eu.com", ResponseElementName="getDevicesResponse", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDevicesReturn")]
        public string getDevices(string in0, string in1) {
            object[] results = this.Invoke("getDevices1", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDevices1Async(string in0, string in1) {
            this.getDevices1Async(in0, in1, null);
        }
        
        /// <remarks/>
        public void getDevices1Async(string in0, string in1, object userState) {
            if ((this.getDevices1OperationCompleted == null)) {
                this.getDevices1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDevices1OperationCompleted);
            }
            this.InvokeAsync("getDevices1", new object[] {
                        in0,
                        in1}, this.getDevices1OperationCompleted, userState);
        }
        
        private void OngetDevices1OperationCompleted(object arg) {
            if ((this.getDevices1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDevices1Completed(this, new getDevices1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDeviceTypesReturn")]
        public string getDeviceTypes() {
            object[] results = this.Invoke("getDeviceTypes", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDeviceTypesAsync() {
            this.getDeviceTypesAsync(null);
        }
        
        /// <remarks/>
        public void getDeviceTypesAsync(object userState) {
            if ((this.getDeviceTypesOperationCompleted == null)) {
                this.getDeviceTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceTypesOperationCompleted);
            }
            this.InvokeAsync("getDeviceTypes", new object[0], this.getDeviceTypesOperationCompleted, userState);
        }
        
        private void OngetDeviceTypesOperationCompleted(object arg) {
            if ((this.getDeviceTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeviceTypesCompleted(this, new getDeviceTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDevicesWithServicesReturn")]
        public string getDevicesWithServices(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("getDevicesWithServices", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDevicesWithServicesAsync(string in0, string in1, string in2, string in3) {
            this.getDevicesWithServicesAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void getDevicesWithServicesAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.getDevicesWithServicesOperationCompleted == null)) {
                this.getDevicesWithServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDevicesWithServicesOperationCompleted);
            }
            this.InvokeAsync("getDevicesWithServices", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.getDevicesWithServicesOperationCompleted, userState);
        }
        
        private void OngetDevicesWithServicesOperationCompleted(object arg) {
            if ((this.getDevicesWithServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDevicesWithServicesCompleted(this, new getDevicesWithServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getDevicesWithServices1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestElementName="getDevicesWithServices", RequestNamespace="http://aom.IoT.eu.com", ResponseElementName="getDevicesWithServicesResponse", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDevicesWithServicesReturn")]
        public string getDevicesWithServices(string in0) {
            object[] results = this.Invoke("getDevicesWithServices1", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDevicesWithServices1Async(string in0) {
            this.getDevicesWithServices1Async(in0, null);
        }
        
        /// <remarks/>
        public void getDevicesWithServices1Async(string in0, object userState) {
            if ((this.getDevicesWithServices1OperationCompleted == null)) {
                this.getDevicesWithServices1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDevicesWithServices1OperationCompleted);
            }
            this.InvokeAsync("getDevicesWithServices1", new object[] {
                        in0}, this.getDevicesWithServices1OperationCompleted, userState);
        }
        
        private void OngetDevicesWithServices1OperationCompleted(object arg) {
            if ((this.getDevicesWithServices1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDevicesWithServices1Completed(this, new getDevicesWithServices1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("addFormDataReturn")]
        public string addFormData(string in0, bool in1) {
            object[] results = this.Invoke("addFormData", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addFormDataAsync(string in0, bool in1) {
            this.addFormDataAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addFormDataAsync(string in0, bool in1, object userState) {
            if ((this.addFormDataOperationCompleted == null)) {
                this.addFormDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddFormDataOperationCompleted);
            }
            this.InvokeAsync("addFormData", new object[] {
                        in0,
                        in1}, this.addFormDataOperationCompleted, userState);
        }
        
        private void OnaddFormDataOperationCompleted(object arg) {
            if ((this.addFormDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addFormDataCompleted(this, new addFormDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDeviceTreeReturn")]
        public string getDeviceTree() {
            object[] results = this.Invoke("getDeviceTree", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDeviceTreeAsync() {
            this.getDeviceTreeAsync(null);
        }
        
        /// <remarks/>
        public void getDeviceTreeAsync(object userState) {
            if ((this.getDeviceTreeOperationCompleted == null)) {
                this.getDeviceTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceTreeOperationCompleted);
            }
            this.InvokeAsync("getDeviceTree", new object[0], this.getDeviceTreeOperationCompleted, userState);
        }
        
        private void OngetDeviceTreeOperationCompleted(object arg) {
            if ((this.getDeviceTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeviceTreeCompleted(this, new getDeviceTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getInstanceTreeReturn")]
        public string getInstanceTree(string in0) {
            object[] results = this.Invoke("getInstanceTree", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInstanceTreeAsync(string in0) {
            this.getInstanceTreeAsync(in0, null);
        }
        
        /// <remarks/>
        public void getInstanceTreeAsync(string in0, object userState) {
            if ((this.getInstanceTreeOperationCompleted == null)) {
                this.getInstanceTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInstanceTreeOperationCompleted);
            }
            this.InvokeAsync("getInstanceTree", new object[] {
                        in0}, this.getInstanceTreeOperationCompleted, userState);
        }
        
        private void OngetInstanceTreeOperationCompleted(object arg) {
            if ((this.getInstanceTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInstanceTreeCompleted(this, new getInstanceTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getClassLiteralsReturn")]
        public string getClassLiterals(string in0) {
            object[] results = this.Invoke("getClassLiterals", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getClassLiteralsAsync(string in0) {
            this.getClassLiteralsAsync(in0, null);
        }
        
        /// <remarks/>
        public void getClassLiteralsAsync(string in0, object userState) {
            if ((this.getClassLiteralsOperationCompleted == null)) {
                this.getClassLiteralsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetClassLiteralsOperationCompleted);
            }
            this.InvokeAsync("getClassLiterals", new object[] {
                        in0}, this.getClassLiteralsOperationCompleted, userState);
        }
        
        private void OngetClassLiteralsOperationCompleted(object arg) {
            if ((this.getClassLiteralsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getClassLiteralsCompleted(this, new getClassLiteralsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getPropertyAnnotationModelReturn")]
        public string getPropertyAnnotationModel() {
            object[] results = this.Invoke("getPropertyAnnotationModel", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getPropertyAnnotationModelAsync() {
            this.getPropertyAnnotationModelAsync(null);
        }
        
        /// <remarks/>
        public void getPropertyAnnotationModelAsync(object userState) {
            if ((this.getPropertyAnnotationModelOperationCompleted == null)) {
                this.getPropertyAnnotationModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPropertyAnnotationModelOperationCompleted);
            }
            this.InvokeAsync("getPropertyAnnotationModel", new object[0], this.getPropertyAnnotationModelOperationCompleted, userState);
        }
        
        private void OngetPropertyAnnotationModelOperationCompleted(object arg) {
            if ((this.getPropertyAnnotationModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPropertyAnnotationModelCompleted(this, new getPropertyAnnotationModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getSCPDReturn")]
        public string getSCPD(string in0) {
            object[] results = this.Invoke("getSCPD", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSCPDAsync(string in0) {
            this.getSCPDAsync(in0, null);
        }
        
        /// <remarks/>
        public void getSCPDAsync(string in0, object userState) {
            if ((this.getSCPDOperationCompleted == null)) {
                this.getSCPDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSCPDOperationCompleted);
            }
            this.InvokeAsync("getSCPD", new object[] {
                        in0}, this.getSCPDOperationCompleted, userState);
        }
        
        private void OngetSCPDOperationCompleted(object arg) {
            if ((this.getSCPDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSCPDCompleted(this, new getSCPDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("removeReturn")]
        public string remove(string in0, string in1, string in2) {
            object[] results = this.Invoke("remove", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void removeAsync(string in0, string in1, string in2) {
            this.removeAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeAsync(string in0, string in1, string in2, object userState) {
            if ((this.removeOperationCompleted == null)) {
                this.removeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveOperationCompleted);
            }
            this.InvokeAsync("remove", new object[] {
                        in0,
                        in1,
                        in2}, this.removeOperationCompleted, userState);
        }
        
        private void OnremoveOperationCompleted(object arg) {
            if ((this.removeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeCompleted(this, new removeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="remove1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestElementName="remove", RequestNamespace="http://aom.IoT.eu.com", ResponseElementName="removeResponse", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("removeReturn")]
        public string remove(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("remove1", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void remove1Async(string in0, string in1, string in2, string in3) {
            this.remove1Async(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void remove1Async(string in0, string in1, string in2, string in3, object userState) {
            if ((this.remove1OperationCompleted == null)) {
                this.remove1OperationCompleted = new System.Threading.SendOrPostCallback(this.Onremove1OperationCompleted);
            }
            this.InvokeAsync("remove1", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.remove1OperationCompleted, userState);
        }
        
        private void Onremove1OperationCompleted(object arg) {
            if ((this.remove1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.remove1Completed(this, new remove1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("cleanReturn")]
        public bool clean() {
            object[] results = this.Invoke("clean", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void cleanAsync() {
            this.cleanAsync(null);
        }
        
        /// <remarks/>
        public void cleanAsync(object userState) {
            if ((this.cleanOperationCompleted == null)) {
                this.cleanOperationCompleted = new System.Threading.SendOrPostCallback(this.OncleanOperationCompleted);
            }
            this.InvokeAsync("clean", new object[0], this.cleanOperationCompleted, userState);
        }
        
        private void OncleanOperationCompleted(object arg) {
            if ((this.cleanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cleanCompleted(this, new cleanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("updateReturn")]
        public bool update(string in0) {
            object[] results = this.Invoke("update", new object[] {
                        in0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateAsync(string in0) {
            this.updateAsync(in0, null);
        }
        
        /// <remarks/>
        public void updateAsync(string in0, object userState) {
            if ((this.updateOperationCompleted == null)) {
                this.updateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOperationCompleted);
            }
            this.InvokeAsync("update", new object[] {
                        in0}, this.updateOperationCompleted, userState);
        }
        
        private void OnupdateOperationCompleted(object arg) {
            if ((this.updateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCompleted(this, new updateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("dumpReturn")]
        public string dump() {
            object[] results = this.Invoke("dump", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void dumpAsync() {
            this.dumpAsync(null);
        }
        
        /// <remarks/>
        public void dumpAsync(object userState) {
            if ((this.dumpOperationCompleted == null)) {
                this.dumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OndumpOperationCompleted);
            }
            this.InvokeAsync("dump", new object[0], this.dumpOperationCompleted, userState);
        }
        
        private void OndumpOperationCompleted(object arg) {
            if ((this.dumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.dumpCompleted(this, new dumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://aom.IoT.eu.com", ResponseNamespace="http://aom.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getConfigurationsReturn")]
        public string getConfigurations() {
            object[] results = this.Invoke("getConfigurations", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getConfigurationsAsync() {
            this.getConfigurationsAsync(null);
        }
        
        /// <remarks/>
        public void getConfigurationsAsync(object userState) {
            if ((this.getConfigurationsOperationCompleted == null)) {
                this.getConfigurationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConfigurationsOperationCompleted);
            }
            this.InvokeAsync("getConfigurations", new object[0], this.getConfigurationsOperationCompleted, userState);
        }
        
        private void OngetConfigurationsOperationCompleted(object arg) {
            if ((this.getConfigurationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConfigurationsCompleted(this, new getConfigurationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTreeCompletedEventHandler(object sender, getTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addValueCompletedEventHandler(object sender, addValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addValue1CompletedEventHandler(object sender, addValue1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addValue1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addValue1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createDeviceTemplateCompletedEventHandler(object sender, createDeviceTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDeviceTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDeviceTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void assignPIDCompletedEventHandler(object sender, assignPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeDeviceCompletedEventHandler(object sender, removeDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void resolveDeviceCompletedEventHandler(object sender, resolveDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resolveDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resolveDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createTestingRuntimeCloneCompletedEventHandler(object sender, createTestingRuntimeCloneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createTestingRuntimeCloneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createTestingRuntimeCloneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void assignDiscoveryInfoCompletedEventHandler(object sender, assignDiscoveryInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignDiscoveryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignDiscoveryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void assignEventModelCompletedEventHandler(object sender, assignEventModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignEventModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignEventModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void assignEnergyProfileCompletedEventHandler(object sender, assignEnergyProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignEnergyProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignEnergyProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void assignConfigurationCompletedEventHandler(object sender, assignConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDevicesCompletedEventHandler(object sender, getDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDevices1CompletedEventHandler(object sender, getDevices1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDevices1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDevices1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDeviceTypesCompletedEventHandler(object sender, getDeviceTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeviceTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDeviceTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDevicesWithServicesCompletedEventHandler(object sender, getDevicesWithServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDevicesWithServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDevicesWithServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDevicesWithServices1CompletedEventHandler(object sender, getDevicesWithServices1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDevicesWithServices1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDevicesWithServices1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addFormDataCompletedEventHandler(object sender, addFormDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addFormDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addFormDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDeviceTreeCompletedEventHandler(object sender, getDeviceTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeviceTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDeviceTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getInstanceTreeCompletedEventHandler(object sender, getInstanceTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInstanceTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInstanceTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getClassLiteralsCompletedEventHandler(object sender, getClassLiteralsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getClassLiteralsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getClassLiteralsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getPropertyAnnotationModelCompletedEventHandler(object sender, getPropertyAnnotationModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPropertyAnnotationModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPropertyAnnotationModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSCPDCompletedEventHandler(object sender, getSCPDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSCPDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSCPDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeCompletedEventHandler(object sender, removeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void remove1CompletedEventHandler(object sender, remove1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class remove1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal remove1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cleanCompletedEventHandler(object sender, cleanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cleanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cleanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateCompletedEventHandler(object sender, updateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void dumpCompletedEventHandler(object sender, dumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal dumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getConfigurationsCompletedEventHandler(object sender, getConfigurationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591