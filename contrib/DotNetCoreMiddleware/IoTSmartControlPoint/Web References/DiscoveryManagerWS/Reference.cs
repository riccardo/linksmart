/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace IoT.DiscoveryManagerWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IIoTDiscoveryManagerWSService", Namespace="http://tempuri.org/")]
    public partial class DiscoveryManagerWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ResolveDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscoverDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopDevicesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DiscoveryManagerWS() {
            this.Url = global::IoT.Properties.Settings.Default.HydraSmartControlPoint_BluetoothDiscoveryManagerWS_DiscoveryManagerWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ResolveDeviceCompletedEventHandler ResolveDeviceCompleted;
        
        /// <remarks/>
        public event DiscoverDevicesCompletedEventHandler DiscoverDevicesCompleted;
        
        /// <remarks/>
        public event StartDevicesCompletedEventHandler StartDevicesCompleted;
        
        /// <remarks/>
        public event StopDevicesCompletedEventHandler StopDevicesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IIoTDiscoveryManagerWSService/ResolveDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResolveDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceURN, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string resolveMessage) {
            this.Invoke("ResolveDevice", new object[] {
                        deviceURN,
                        resolveMessage});
        }
        
        /// <remarks/>
        public void ResolveDeviceAsync(string deviceURN, string resolveMessage) {
            this.ResolveDeviceAsync(deviceURN, resolveMessage, null);
        }
        
        /// <remarks/>
        public void ResolveDeviceAsync(string deviceURN, string resolveMessage, object userState) {
            if ((this.ResolveDeviceOperationCompleted == null)) {
                this.ResolveDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResolveDeviceOperationCompleted);
            }
            this.InvokeAsync("ResolveDevice", new object[] {
                        deviceURN,
                        resolveMessage}, this.ResolveDeviceOperationCompleted, userState);
        }
        
        private void OnResolveDeviceOperationCompleted(object arg) {
            if ((this.ResolveDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResolveDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IIoTDiscoveryManagerWSService/DiscoverDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DiscoverDevices() {
            this.Invoke("DiscoverDevices", new object[0]);
        }
        
        /// <remarks/>
        public void DiscoverDevicesAsync() {
            this.DiscoverDevicesAsync(null);
        }
        
        /// <remarks/>
        public void DiscoverDevicesAsync(object userState) {
            if ((this.DiscoverDevicesOperationCompleted == null)) {
                this.DiscoverDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscoverDevicesOperationCompleted);
            }
            this.InvokeAsync("DiscoverDevices", new object[0], this.DiscoverDevicesOperationCompleted, userState);
        }
        
        private void OnDiscoverDevicesOperationCompleted(object arg) {
            if ((this.DiscoverDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscoverDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IIoTDiscoveryManagerWSService/StartDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath) {
            this.Invoke("StartDevices", new object[] {
                        xpath});
        }
        
        /// <remarks/>
        public void StartDevicesAsync(string xpath) {
            this.StartDevicesAsync(xpath, null);
        }
        
        /// <remarks/>
        public void StartDevicesAsync(string xpath, object userState) {
            if ((this.StartDevicesOperationCompleted == null)) {
                this.StartDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartDevicesOperationCompleted);
            }
            this.InvokeAsync("StartDevices", new object[] {
                        xpath}, this.StartDevicesOperationCompleted, userState);
        }
        
        private void OnStartDevicesOperationCompleted(object arg) {
            if ((this.StartDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IIoTDiscoveryManagerWSService/StopDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopDevices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xpath) {
            this.Invoke("StopDevices", new object[] {
                        xpath});
        }
        
        /// <remarks/>
        public void StopDevicesAsync(string xpath) {
            this.StopDevicesAsync(xpath, null);
        }
        
        /// <remarks/>
        public void StopDevicesAsync(string xpath, object userState) {
            if ((this.StopDevicesOperationCompleted == null)) {
                this.StopDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopDevicesOperationCompleted);
            }
            this.InvokeAsync("StopDevices", new object[] {
                        xpath}, this.StopDevicesOperationCompleted, userState);
        }
        
        private void OnStopDevicesOperationCompleted(object arg) {
            if ((this.StopDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResolveDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DiscoverDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StartDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StopDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591