using OpenSource.UPnP;

namespace IoT
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvEnergyService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvEnergyService _S;
        public static string URN = "urn:schemas-upnp-org:energyservice::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(DvEnergyService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_RemainingLifeTime;
        public event OnStateVariableModifiedHandler OnStateVariableModified_EnergyClassification;
        public event OnStateVariableModifiedHandler OnStateVariableModified_CurrentEffect;
        public event OnStateVariableModifiedHandler OnStateVariableModified_EnergyMode;
        public event OnStateVariableModifiedHandler OnStateVariableModified_MinimumRuntime;
        public event OnStateVariableModifiedHandler OnStateVariableModified_TotalUsage;
        public event OnStateVariableModifiedHandler OnStateVariableModified_MaxEffect;
        public event OnStateVariableModifiedHandler OnStateVariableModified_AverageEffect;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Turnedontime;
        public event OnStateVariableModifiedHandler OnStateVariableModified_EnergyProfile;
        public event OnStateVariableModifiedHandler OnStateVariableModified_ExpectedLifeTime;
        public event OnStateVariableModifiedHandler OnStateVariableModified_MinEffect;
        public event OnStateVariableModifiedHandler OnStateVariableModified_EnergyPolicyStatus;
        public event OnStateVariableModifiedHandler OnStateVariableModified_DeviceEnergyPolicy;
        public System.String RemainingLifeTime
        {
            get
            {
               return((System.String)_S.GetStateVariable("RemainingLifeTime"));
            }
            set
            {
               _S.SetStateVariable("RemainingLifeTime", value);
            }
        }
        public System.String EnergyClassification
        {
            get
            {
               return((System.String)_S.GetStateVariable("EnergyClassification"));
            }
            set
            {
               _S.SetStateVariable("EnergyClassification", value);
            }
        }
        public System.String CurrentEffect
        {
            get
            {
               return((System.String)_S.GetStateVariable("CurrentEffect"));
            }
            set
            {
               _S.SetStateVariable("CurrentEffect", value);
            }
        }
        public System.String EnergyMode
        {
            get
            {
               return((System.String)_S.GetStateVariable("EnergyMode"));
            }
            set
            {
               _S.SetStateVariable("EnergyMode", value);
            }
        }
        public System.String MinimumRuntime
        {
            get
            {
               return((System.String)_S.GetStateVariable("MinimumRuntime"));
            }
            set
            {
               _S.SetStateVariable("MinimumRuntime", value);
            }
        }
        public System.String TotalUsage
        {
            get
            {
               return((System.String)_S.GetStateVariable("TotalUsage"));
            }
            set
            {
               _S.SetStateVariable("TotalUsage", value);
            }
        }
        public System.String MaxEffect
        {
            get
            {
               return((System.String)_S.GetStateVariable("MaxEffect"));
            }
            set
            {
               _S.SetStateVariable("MaxEffect", value);
            }
        }
        public System.String AverageEffect
        {
            get
            {
               return((System.String)_S.GetStateVariable("AverageEffect"));
            }
            set
            {
               _S.SetStateVariable("AverageEffect", value);
            }
        }
        public System.String Turnedontime
        {
            get
            {
               return((System.String)_S.GetStateVariable("Turnedontime"));
            }
            set
            {
               _S.SetStateVariable("Turnedontime", value);
            }
        }
        public System.String EnergyProfile
        {
            get
            {
               return((System.String)_S.GetStateVariable("EnergyProfile"));
            }
            set
            {
               _S.SetStateVariable("EnergyProfile", value);
            }
        }
        public System.String ExpectedLifeTime
        {
            get
            {
               return((System.String)_S.GetStateVariable("ExpectedLifeTime"));
            }
            set
            {
               _S.SetStateVariable("ExpectedLifeTime", value);
            }
        }
        public System.String MinEffect
        {
            get
            {
               return((System.String)_S.GetStateVariable("MinEffect"));
            }
            set
            {
               _S.SetStateVariable("MinEffect", value);
            }
        }
        public System.String EnergyPolicyStatus
        {
            get
            {
               return((System.String)_S.GetStateVariable("EnergyPolicyStatus"));
            }
            set
            {
               _S.SetStateVariable("EnergyPolicyStatus", value);
            }
        }
        public System.String DeviceEnergyPolicy
        {
            get
            {
               return((System.String)_S.GetStateVariable("DeviceEnergyPolicy"));
            }
            set
            {
               _S.SetStateVariable("DeviceEnergyPolicy", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_RemainingLifeTime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("RemainingLifeTime")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("RemainingLifeTime")).Accumulator = value;
            }
        }
        public double ModerationDuration_RemainingLifeTime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("RemainingLifeTime")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("RemainingLifeTime")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_EnergyClassification
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyClassification")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyClassification")).Accumulator = value;
            }
        }
        public double ModerationDuration_EnergyClassification
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyClassification")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyClassification")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_CurrentEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("CurrentEffect")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("CurrentEffect")).Accumulator = value;
            }
        }
        public double ModerationDuration_CurrentEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("CurrentEffect")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("CurrentEffect")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_EnergyMode
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyMode")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyMode")).Accumulator = value;
            }
        }
        public double ModerationDuration_EnergyMode
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyMode")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyMode")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_MinimumRuntime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinimumRuntime")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinimumRuntime")).Accumulator = value;
            }
        }
        public double ModerationDuration_MinimumRuntime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinimumRuntime")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinimumRuntime")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_TotalUsage
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("TotalUsage")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("TotalUsage")).Accumulator = value;
            }
        }
        public double ModerationDuration_TotalUsage
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("TotalUsage")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("TotalUsage")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_MaxEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MaxEffect")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MaxEffect")).Accumulator = value;
            }
        }
        public double ModerationDuration_MaxEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MaxEffect")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MaxEffect")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_AverageEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("AverageEffect")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("AverageEffect")).Accumulator = value;
            }
        }
        public double ModerationDuration_AverageEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("AverageEffect")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("AverageEffect")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Turnedontime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Turnedontime")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Turnedontime")).Accumulator = value;
            }
        }
        public double ModerationDuration_Turnedontime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Turnedontime")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Turnedontime")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_EnergyProfile
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyProfile")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyProfile")).Accumulator = value;
            }
        }
        public double ModerationDuration_EnergyProfile
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyProfile")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyProfile")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ExpectedLifeTime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ExpectedLifeTime")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ExpectedLifeTime")).Accumulator = value;
            }
        }
        public double ModerationDuration_ExpectedLifeTime
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ExpectedLifeTime")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ExpectedLifeTime")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_MinEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinEffect")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinEffect")).Accumulator = value;
            }
        }
        public double ModerationDuration_MinEffect
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinEffect")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("MinEffect")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_EnergyPolicyStatus
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyPolicyStatus")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyPolicyStatus")).Accumulator = value;
            }
        }
        public double ModerationDuration_EnergyPolicyStatus
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyPolicyStatus")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("EnergyPolicyStatus")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DeviceEnergyPolicy
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceEnergyPolicy")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceEnergyPolicy")).Accumulator = value;
            }
        }
        public double ModerationDuration_DeviceEnergyPolicy
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceEnergyPolicy")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceEnergyPolicy")).ModerationPeriod = value;
            }
        }
        public delegate System.String Delegate_GetAverageEffect();
        public delegate System.String Delegate_GetCurrentUsage();
        public delegate System.String Delegate_GetDeviceEnergyPolicy();
        public delegate System.String Delegate_GetEnergyClass();
        public delegate System.String Delegate_GetEnergyMode();
        public delegate System.String Delegate_GetEnergyPolicyStatus();
        public delegate System.String Delegate_GetEnergyProfile();
        public delegate System.String Delegate_GetMaxEffect();
        public delegate System.String Delegate_GetMinEffect();
        public delegate System.String Delegate_GetRemainingLifeTime();
        public delegate System.String Delegate_GetTotalUsage(System.String since);
        public delegate void Delegate_SetDeviceEnergyPolicy(System.String deviceEnergyPolicy);
        public delegate void Delegate_SetDeviceEnergyPolicyFromURL(System.String deviceEnergyPolicyURL);
        public delegate void Delegate_SetEnergyProfile(System.String energyProfile);
        public delegate void Delegate_SetEnergyProfileFromURL(System.String energyProfileURL);

        public Delegate_GetAverageEffect External_GetAverageEffect = null;
        public Delegate_GetCurrentUsage External_GetCurrentUsage = null;
        public Delegate_GetDeviceEnergyPolicy External_GetDeviceEnergyPolicy = null;
        public Delegate_GetEnergyClass External_GetEnergyClass = null;
        public Delegate_GetEnergyMode External_GetEnergyMode = null;
        public Delegate_GetEnergyPolicyStatus External_GetEnergyPolicyStatus = null;
        public Delegate_GetEnergyProfile External_GetEnergyProfile = null;
        public Delegate_GetMaxEffect External_GetMaxEffect = null;
        public Delegate_GetMinEffect External_GetMinEffect = null;
        public Delegate_GetRemainingLifeTime External_GetRemainingLifeTime = null;
        public Delegate_GetTotalUsage External_GetTotalUsage = null;
        public Delegate_SetDeviceEnergyPolicy External_SetDeviceEnergyPolicy = null;
        public Delegate_SetDeviceEnergyPolicyFromURL External_SetDeviceEnergyPolicyFromURL = null;
        public Delegate_SetEnergyProfile External_SetEnergyProfile = null;
        public Delegate_SetEnergyProfileFromURL External_SetEnergyProfileFromURL = null;

        public void RemoveStateVariable_RemainingLifeTime()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("RemainingLifeTime"));
        }
        public void RemoveStateVariable_EnergyClassification()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("EnergyClassification"));
        }
        public void RemoveStateVariable_CurrentEffect()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("CurrentEffect"));
        }
        public void RemoveStateVariable_EnergyMode()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("EnergyMode"));
        }
        public void RemoveStateVariable_MinimumRuntime()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("MinimumRuntime"));
        }
        public void RemoveStateVariable_TotalUsage()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("TotalUsage"));
        }
        public void RemoveStateVariable_MaxEffect()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("MaxEffect"));
        }
        public void RemoveStateVariable_AverageEffect()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("AverageEffect"));
        }
        public void RemoveStateVariable_Turnedontime()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Turnedontime"));
        }
        public void RemoveStateVariable_EnergyProfile()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("EnergyProfile"));
        }
        public void RemoveStateVariable_ExpectedLifeTime()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("ExpectedLifeTime"));
        }
        public void RemoveStateVariable_MinEffect()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("MinEffect"));
        }
        public void RemoveStateVariable_EnergyPolicyStatus()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("EnergyPolicyStatus"));
        }
        public void RemoveStateVariable_DeviceEnergyPolicy()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("DeviceEnergyPolicy"));
        }
        public void RemoveAction_GetAverageEffect()
        {
             _S.GetUPnPService().RemoveMethod("GetAverageEffect");
        }
        public void RemoveAction_GetCurrentUsage()
        {
             _S.GetUPnPService().RemoveMethod("GetCurrentUsage");
        }
        public void RemoveAction_GetDeviceEnergyPolicy()
        {
             _S.GetUPnPService().RemoveMethod("GetDeviceEnergyPolicy");
        }
        public void RemoveAction_GetEnergyClass()
        {
             _S.GetUPnPService().RemoveMethod("GetEnergyClass");
        }
        public void RemoveAction_GetEnergyMode()
        {
             _S.GetUPnPService().RemoveMethod("GetEnergyMode");
        }
        public void RemoveAction_GetEnergyPolicyStatus()
        {
             _S.GetUPnPService().RemoveMethod("GetEnergyPolicyStatus");
        }
        public void RemoveAction_GetEnergyProfile()
        {
             _S.GetUPnPService().RemoveMethod("GetEnergyProfile");
        }
        public void RemoveAction_GetMaxEffect()
        {
             _S.GetUPnPService().RemoveMethod("GetMaxEffect");
        }
        public void RemoveAction_GetMinEffect()
        {
             _S.GetUPnPService().RemoveMethod("GetMinEffect");
        }
        public void RemoveAction_GetRemainingLifeTime()
        {
             _S.GetUPnPService().RemoveMethod("GetRemainingLifeTime");
        }
        public void RemoveAction_GetTotalUsage()
        {
             _S.GetUPnPService().RemoveMethod("GetTotalUsage");
        }
        public void RemoveAction_SetDeviceEnergyPolicy()
        {
             _S.GetUPnPService().RemoveMethod("SetDeviceEnergyPolicy");
        }
        public void RemoveAction_SetDeviceEnergyPolicyFromURL()
        {
             _S.GetUPnPService().RemoveMethod("SetDeviceEnergyPolicyFromURL");
        }
        public void RemoveAction_SetEnergyProfile()
        {
             _S.GetUPnPService().RemoveMethod("SetEnergyProfile");
        }
        public void RemoveAction_SetEnergyProfileFromURL()
        {
             _S.GetUPnPService().RemoveMethod("SetEnergyProfileFromURL");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvEnergyService
        {
            private DvEnergyService Outer = null;
            private UPnPService S;
            internal _DvEnergyService(DvEnergyService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[14];
                RetVal[0] = new UPnPModeratedStateVariable("RemainingLifeTime", typeof(System.String), false);
                RetVal[0].AddAssociation("GetRemainingLifeTime", "remainingLifeTime");
                RetVal[1] = new UPnPModeratedStateVariable("EnergyClassification", typeof(System.String), false);
                RetVal[1].AddAssociation("GetEnergyClass", "energyClass");
                RetVal[2] = new UPnPModeratedStateVariable("CurrentEffect", typeof(System.String), false);
                RetVal[2].AddAssociation("GetCurrentUsage", "currentEffect");
                RetVal[3] = new UPnPModeratedStateVariable("EnergyMode", typeof(System.String), false);
                RetVal[3].AddAssociation("GetEnergyMode", "energyMode");
                RetVal[4] = new UPnPModeratedStateVariable("MinimumRuntime", typeof(System.String), false);
                RetVal[5] = new UPnPModeratedStateVariable("TotalUsage", typeof(System.String), false);
                RetVal[5].AddAssociation("GetTotalUsage", "totalusage");
                RetVal[6] = new UPnPModeratedStateVariable("MaxEffect", typeof(System.String), false);
                RetVal[6].AddAssociation("GetMaxEffect", "maxeffect");
                RetVal[7] = new UPnPModeratedStateVariable("AverageEffect", typeof(System.String), false);
                RetVal[7].AddAssociation("GetAverageEffect", "averageeffect");
                RetVal[8] = new UPnPModeratedStateVariable("Turnedontime", typeof(System.String), false);
                RetVal[8].AddAssociation("GetTotalUsage", "since");
                RetVal[9] = new UPnPModeratedStateVariable("EnergyProfile", typeof(System.String), false);
                RetVal[9].AddAssociation("GetEnergyProfile", "energyProfile");
                RetVal[9].AddAssociation("SetEnergyProfile", "energyProfile");
                RetVal[9].AddAssociation("SetEnergyProfileFromURL", "energyProfileURL");
                RetVal[10] = new UPnPModeratedStateVariable("ExpectedLifeTime", typeof(System.String), false);
                RetVal[11] = new UPnPModeratedStateVariable("MinEffect", typeof(System.String), false);
                RetVal[11].AddAssociation("GetMinEffect", "mineffect");
                RetVal[12] = new UPnPModeratedStateVariable("EnergyPolicyStatus", typeof(System.String), false);
                RetVal[12].AddAssociation("GetEnergyPolicyStatus", "energyPolicyStatus");
                RetVal[13] = new UPnPModeratedStateVariable("DeviceEnergyPolicy", typeof(System.String), false);
                RetVal[13].AddAssociation("GetDeviceEnergyPolicy", "deviceEnergyPolicy");
                RetVal[13].AddAssociation("SetDeviceEnergyPolicy", "deviceEnergyPolicy");
                RetVal[13].AddAssociation("SetDeviceEnergyPolicyFromURL", "deviceEnergyPolicyURL");

                UPnPService S = new UPnPService(1, "urn:schemas-upnp-org:energyservice:1", "urn:schemas-upnp-org:energyservice::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetAverageEffect");
                S.AddMethod("GetCurrentUsage");
                S.AddMethod("GetDeviceEnergyPolicy");
                S.AddMethod("GetEnergyClass");
                S.AddMethod("GetEnergyMode");
                S.AddMethod("GetEnergyPolicyStatus");
                S.AddMethod("GetEnergyProfile");
                S.AddMethod("GetMaxEffect");
                S.AddMethod("GetMinEffect");
                S.AddMethod("GetRemainingLifeTime");
                S.AddMethod("GetTotalUsage");
                S.AddMethod("SetDeviceEnergyPolicy");
                S.AddMethod("SetDeviceEnergyPolicyFromURL");
                S.AddMethod("SetEnergyProfile");
                S.AddMethod("SetEnergyProfileFromURL");
                return(S);
            }

            [OpenSource.UPnP.ReturnArgument("averageeffect")]
            public System.String GetAverageEffect()
            {
                object RetObj = null;
                if(Outer.External_GetAverageEffect != null)
                {
                    RetObj = Outer.External_GetAverageEffect();
                }
                else
                {
                    RetObj = Sink_GetAverageEffect();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("currentEffect")]
            public System.String GetCurrentUsage()
            {
                object RetObj = null;
                if(Outer.External_GetCurrentUsage != null)
                {
                    RetObj = Outer.External_GetCurrentUsage();
                }
                else
                {
                    RetObj = Sink_GetCurrentUsage();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("deviceEnergyPolicy")]
            public System.String GetDeviceEnergyPolicy()
            {
                object RetObj = null;
                if(Outer.External_GetDeviceEnergyPolicy != null)
                {
                    RetObj = Outer.External_GetDeviceEnergyPolicy();
                }
                else
                {
                    RetObj = Sink_GetDeviceEnergyPolicy();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("energyClass")]
            public System.String GetEnergyClass()
            {
                object RetObj = null;
                if(Outer.External_GetEnergyClass != null)
                {
                    RetObj = Outer.External_GetEnergyClass();
                }
                else
                {
                    RetObj = Sink_GetEnergyClass();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("energyMode")]
            public System.String GetEnergyMode()
            {
                object RetObj = null;
                if(Outer.External_GetEnergyMode != null)
                {
                    RetObj = Outer.External_GetEnergyMode();
                }
                else
                {
                    RetObj = Sink_GetEnergyMode();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("energyPolicyStatus")]
            public System.String GetEnergyPolicyStatus()
            {
                object RetObj = null;
                if(Outer.External_GetEnergyPolicyStatus != null)
                {
                    RetObj = Outer.External_GetEnergyPolicyStatus();
                }
                else
                {
                    RetObj = Sink_GetEnergyPolicyStatus();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("energyProfile")]
            public System.String GetEnergyProfile()
            {
                object RetObj = null;
                if(Outer.External_GetEnergyProfile != null)
                {
                    RetObj = Outer.External_GetEnergyProfile();
                }
                else
                {
                    RetObj = Sink_GetEnergyProfile();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("maxeffect")]
            public System.String GetMaxEffect()
            {
                object RetObj = null;
                if(Outer.External_GetMaxEffect != null)
                {
                    RetObj = Outer.External_GetMaxEffect();
                }
                else
                {
                    RetObj = Sink_GetMaxEffect();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("mineffect")]
            public System.String GetMinEffect()
            {
                object RetObj = null;
                if(Outer.External_GetMinEffect != null)
                {
                    RetObj = Outer.External_GetMinEffect();
                }
                else
                {
                    RetObj = Sink_GetMinEffect();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("remainingLifeTime")]
            public System.String GetRemainingLifeTime()
            {
                object RetObj = null;
                if(Outer.External_GetRemainingLifeTime != null)
                {
                    RetObj = Outer.External_GetRemainingLifeTime();
                }
                else
                {
                    RetObj = Sink_GetRemainingLifeTime();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("totalusage")]
            public System.String GetTotalUsage(System.String since)
            {
                object RetObj = null;
                if(Outer.External_GetTotalUsage != null)
                {
                    RetObj = Outer.External_GetTotalUsage(since);
                }
                else
                {
                    RetObj = Sink_GetTotalUsage(since);
                }
                return((System.String)RetObj);
            }
            public void SetDeviceEnergyPolicy(System.String deviceEnergyPolicy)
            {
                if(Outer.External_SetDeviceEnergyPolicy != null)
                {
                    Outer.External_SetDeviceEnergyPolicy(deviceEnergyPolicy);
                }
                else
                {
                    Sink_SetDeviceEnergyPolicy(deviceEnergyPolicy);
                }
            }
            public void SetDeviceEnergyPolicyFromURL(System.String deviceEnergyPolicyURL)
            {
                if(Outer.External_SetDeviceEnergyPolicyFromURL != null)
                {
                    Outer.External_SetDeviceEnergyPolicyFromURL(deviceEnergyPolicyURL);
                }
                else
                {
                    Sink_SetDeviceEnergyPolicyFromURL(deviceEnergyPolicyURL);
                }
            }
            public void SetEnergyProfile(System.String energyProfile)
            {
                if(Outer.External_SetEnergyProfile != null)
                {
                    Outer.External_SetEnergyProfile(energyProfile);
                }
                else
                {
                    Sink_SetEnergyProfile(energyProfile);
                }
            }
            public void SetEnergyProfileFromURL(System.String energyProfileURL)
            {
                if(Outer.External_SetEnergyProfileFromURL != null)
                {
                    Outer.External_SetEnergyProfileFromURL(energyProfileURL);
                }
                else
                {
                    Sink_SetEnergyProfileFromURL(energyProfileURL);
                }
            }

            public Delegate_GetAverageEffect Sink_GetAverageEffect;
            public Delegate_GetCurrentUsage Sink_GetCurrentUsage;
            public Delegate_GetDeviceEnergyPolicy Sink_GetDeviceEnergyPolicy;
            public Delegate_GetEnergyClass Sink_GetEnergyClass;
            public Delegate_GetEnergyMode Sink_GetEnergyMode;
            public Delegate_GetEnergyPolicyStatus Sink_GetEnergyPolicyStatus;
            public Delegate_GetEnergyProfile Sink_GetEnergyProfile;
            public Delegate_GetMaxEffect Sink_GetMaxEffect;
            public Delegate_GetMinEffect Sink_GetMinEffect;
            public Delegate_GetRemainingLifeTime Sink_GetRemainingLifeTime;
            public Delegate_GetTotalUsage Sink_GetTotalUsage;
            public Delegate_SetDeviceEnergyPolicy Sink_SetDeviceEnergyPolicy;
            public Delegate_SetDeviceEnergyPolicyFromURL Sink_SetDeviceEnergyPolicyFromURL;
            public Delegate_SetEnergyProfile Sink_SetEnergyProfile;
            public Delegate_SetEnergyProfileFromURL Sink_SetEnergyProfileFromURL;
        }
        public DvEnergyService()
        {
            _S = new _DvEnergyService(this);
            _S.GetUPnPService().GetStateVariableObject("RemainingLifeTime").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_RemainingLifeTime);
            _S.GetUPnPService().GetStateVariableObject("EnergyClassification").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_EnergyClassification);
            _S.GetUPnPService().GetStateVariableObject("CurrentEffect").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_CurrentEffect);
            _S.GetUPnPService().GetStateVariableObject("EnergyMode").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_EnergyMode);
            _S.GetUPnPService().GetStateVariableObject("MinimumRuntime").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_MinimumRuntime);
            _S.GetUPnPService().GetStateVariableObject("TotalUsage").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_TotalUsage);
            _S.GetUPnPService().GetStateVariableObject("MaxEffect").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_MaxEffect);
            _S.GetUPnPService().GetStateVariableObject("AverageEffect").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_AverageEffect);
            _S.GetUPnPService().GetStateVariableObject("Turnedontime").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Turnedontime);
            _S.GetUPnPService().GetStateVariableObject("EnergyProfile").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_EnergyProfile);
            _S.GetUPnPService().GetStateVariableObject("ExpectedLifeTime").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_ExpectedLifeTime);
            _S.GetUPnPService().GetStateVariableObject("MinEffect").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_MinEffect);
            _S.GetUPnPService().GetStateVariableObject("EnergyPolicyStatus").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_EnergyPolicyStatus);
            _S.GetUPnPService().GetStateVariableObject("DeviceEnergyPolicy").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_DeviceEnergyPolicy);
            _S.Sink_GetAverageEffect = new Delegate_GetAverageEffect(GetAverageEffect);
            _S.Sink_GetCurrentUsage = new Delegate_GetCurrentUsage(GetCurrentUsage);
            _S.Sink_GetDeviceEnergyPolicy = new Delegate_GetDeviceEnergyPolicy(GetDeviceEnergyPolicy);
            _S.Sink_GetEnergyClass = new Delegate_GetEnergyClass(GetEnergyClass);
            _S.Sink_GetEnergyMode = new Delegate_GetEnergyMode(GetEnergyMode);
            _S.Sink_GetEnergyPolicyStatus = new Delegate_GetEnergyPolicyStatus(GetEnergyPolicyStatus);
            _S.Sink_GetEnergyProfile = new Delegate_GetEnergyProfile(GetEnergyProfile);
            _S.Sink_GetMaxEffect = new Delegate_GetMaxEffect(GetMaxEffect);
            _S.Sink_GetMinEffect = new Delegate_GetMinEffect(GetMinEffect);
            _S.Sink_GetRemainingLifeTime = new Delegate_GetRemainingLifeTime(GetRemainingLifeTime);
            _S.Sink_GetTotalUsage = new Delegate_GetTotalUsage(GetTotalUsage);
            _S.Sink_SetDeviceEnergyPolicy = new Delegate_SetDeviceEnergyPolicy(SetDeviceEnergyPolicy);
            _S.Sink_SetDeviceEnergyPolicyFromURL = new Delegate_SetDeviceEnergyPolicyFromURL(SetDeviceEnergyPolicyFromURL);
            _S.Sink_SetEnergyProfile = new Delegate_SetEnergyProfile(SetEnergyProfile);
            _S.Sink_SetEnergyProfileFromURL = new Delegate_SetEnergyProfileFromURL(SetEnergyProfileFromURL);
        }
        public DvEnergyService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_RemainingLifeTime(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_RemainingLifeTime != null) OnStateVariableModified_RemainingLifeTime(this);
        }
        private void OnModifiedSink_EnergyClassification(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_EnergyClassification != null) OnStateVariableModified_EnergyClassification(this);
        }
        private void OnModifiedSink_CurrentEffect(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_CurrentEffect != null) OnStateVariableModified_CurrentEffect(this);
        }
        private void OnModifiedSink_EnergyMode(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_EnergyMode != null) OnStateVariableModified_EnergyMode(this);
        }
        private void OnModifiedSink_MinimumRuntime(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_MinimumRuntime != null) OnStateVariableModified_MinimumRuntime(this);
        }
        private void OnModifiedSink_TotalUsage(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_TotalUsage != null) OnStateVariableModified_TotalUsage(this);
        }
        private void OnModifiedSink_MaxEffect(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_MaxEffect != null) OnStateVariableModified_MaxEffect(this);
        }
        private void OnModifiedSink_AverageEffect(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_AverageEffect != null) OnStateVariableModified_AverageEffect(this);
        }
        private void OnModifiedSink_Turnedontime(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Turnedontime != null) OnStateVariableModified_Turnedontime(this);
        }
        private void OnModifiedSink_EnergyProfile(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_EnergyProfile != null) OnStateVariableModified_EnergyProfile(this);
        }
        private void OnModifiedSink_ExpectedLifeTime(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_ExpectedLifeTime != null) OnStateVariableModified_ExpectedLifeTime(this);
        }
        private void OnModifiedSink_MinEffect(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_MinEffect != null) OnStateVariableModified_MinEffect(this);
        }
        private void OnModifiedSink_EnergyPolicyStatus(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_EnergyPolicyStatus != null) OnStateVariableModified_EnergyPolicyStatus(this);
        }
        private void OnModifiedSink_DeviceEnergyPolicy(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_DeviceEnergyPolicy != null) OnStateVariableModified_DeviceEnergyPolicy(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: GetAverageEffect
        /// </summary>
        /// <returns>Associated StateVariable: AverageEffect</returns>
        public System.String GetAverageEffect()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetCurrentUsage
        /// </summary>
        /// <returns>Associated StateVariable: CurrentEffect</returns>
        public System.String GetCurrentUsage()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetDeviceEnergyPolicy
        /// </summary>
        /// <returns>Associated StateVariable: DeviceEnergyPolicy</returns>
        public System.String GetDeviceEnergyPolicy()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetEnergyClass
        /// </summary>
        /// <returns>Associated StateVariable: EnergyClassification</returns>
        public System.String GetEnergyClass()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetEnergyMode
        /// </summary>
        /// <returns>Associated StateVariable: EnergyMode</returns>
        public System.String GetEnergyMode()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetEnergyPolicyStatus
        /// </summary>
        /// <returns>Associated StateVariable: EnergyPolicyStatus</returns>
        public System.String GetEnergyPolicyStatus()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetEnergyProfile
        /// </summary>
        /// <returns>Associated StateVariable: EnergyProfile</returns>
        public System.String GetEnergyProfile()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetMaxEffect
        /// </summary>
        /// <returns>Associated StateVariable: MaxEffect</returns>
        public System.String GetMaxEffect()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetMinEffect
        /// </summary>
        /// <returns>Associated StateVariable: MinEffect</returns>
        public System.String GetMinEffect()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetRemainingLifeTime
        /// </summary>
        /// <returns>Associated StateVariable: RemainingLifeTime</returns>
        public System.String GetRemainingLifeTime()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetTotalUsage
        /// </summary>
        /// <param name="since">Associated State Variable: Turnedontime</param>
        /// <returns>Associated StateVariable: TotalUsage</returns>
        public System.String GetTotalUsage(System.String since)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetDeviceEnergyPolicy
        /// </summary>
        /// <param name="deviceEnergyPolicy">Associated State Variable: DeviceEnergyPolicy</param>
        public void SetDeviceEnergyPolicy(System.String deviceEnergyPolicy)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetDeviceEnergyPolicyFromURL
        /// </summary>
        /// <param name="deviceEnergyPolicyURL">Associated State Variable: DeviceEnergyPolicy</param>
        public void SetDeviceEnergyPolicyFromURL(System.String deviceEnergyPolicyURL)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetEnergyProfile
        /// </summary>
        /// <param name="energyProfile">Associated State Variable: EnergyProfile</param>
        public void SetEnergyProfile(System.String energyProfile)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetEnergyProfileFromURL
        /// </summary>
        /// <param name="energyProfileURL">Associated State Variable: EnergyProfile</param>
        public void SetEnergyProfileFromURL(System.String energyProfileURL)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}