using OpenSource.UPnP;

namespace IoT
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvMemoryService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvMemoryService _S;
        public static string URN = "urn:schemas-upnp-org:memoryservice::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(DvMemoryService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_statemodel;
        public event OnStateVariableModifiedHandler OnStateVariableModified_timestamp;
        public event OnStateVariableModifiedHandler OnStateVariableModified_logkey;
        public event OnStateVariableModifiedHandler OnStateVariableModified_eventlog;
        public event OnStateVariableModifiedHandler OnStateVariableModified_logmodel;
        public event OnStateVariableModifiedHandler OnStateVariableModified_loginterval;
        public event OnStateVariableModifiedHandler OnStateVariableModified_saveproperty;
        public event OnStateVariableModifiedHandler OnStateVariableModified_savekey;
        public event OnStateVariableModifiedHandler OnStateVariableModified_logproperty;
        public System.String statemodel
        {
            get
            {
               return((System.String)_S.GetStateVariable("statemodel"));
            }
            set
            {
               _S.SetStateVariable("statemodel", value);
            }
        }
        public System.String timestamp
        {
            get
            {
               return((System.String)_S.GetStateVariable("timestamp"));
            }
            set
            {
               _S.SetStateVariable("timestamp", value);
            }
        }
        public System.String logkey
        {
            get
            {
               return((System.String)_S.GetStateVariable("logkey"));
            }
            set
            {
               _S.SetStateVariable("logkey", value);
            }
        }
        public System.String eventlog
        {
            get
            {
               return((System.String)_S.GetStateVariable("eventlog"));
            }
            set
            {
               _S.SetStateVariable("eventlog", value);
            }
        }
        public System.String logmodel
        {
            get
            {
               return((System.String)_S.GetStateVariable("logmodel"));
            }
            set
            {
               _S.SetStateVariable("logmodel", value);
            }
        }
        public System.Int32 loginterval
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("loginterval"));
            }
            set
            {
               _S.SetStateVariable("loginterval", value);
            }
        }
        public System.String saveproperty
        {
            get
            {
               return((System.String)_S.GetStateVariable("saveproperty"));
            }
            set
            {
               _S.SetStateVariable("saveproperty", value);
            }
        }
        public System.String savekey
        {
            get
            {
               return((System.String)_S.GetStateVariable("savekey"));
            }
            set
            {
               _S.SetStateVariable("savekey", value);
            }
        }
        public System.String logproperty
        {
            get
            {
               return((System.String)_S.GetStateVariable("logproperty"));
            }
            set
            {
               _S.SetStateVariable("logproperty", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_statemodel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("statemodel")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("statemodel")).Accumulator = value;
            }
        }
        public double ModerationDuration_statemodel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("statemodel")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("statemodel")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_timestamp
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("timestamp")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("timestamp")).Accumulator = value;
            }
        }
        public double ModerationDuration_timestamp
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("timestamp")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("timestamp")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_logkey
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logkey")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logkey")).Accumulator = value;
            }
        }
        public double ModerationDuration_logkey
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logkey")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logkey")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_eventlog
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("eventlog")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("eventlog")).Accumulator = value;
            }
        }
        public double ModerationDuration_eventlog
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("eventlog")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("eventlog")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_logmodel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logmodel")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logmodel")).Accumulator = value;
            }
        }
        public double ModerationDuration_logmodel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logmodel")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logmodel")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_loginterval
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("loginterval")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("loginterval")).Accumulator = value;
            }
        }
        public double ModerationDuration_loginterval
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("loginterval")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("loginterval")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_saveproperty
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("saveproperty")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("saveproperty")).Accumulator = value;
            }
        }
        public double ModerationDuration_saveproperty
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("saveproperty")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("saveproperty")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_savekey
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("savekey")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("savekey")).Accumulator = value;
            }
        }
        public double ModerationDuration_savekey
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("savekey")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("savekey")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_logproperty
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logproperty")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logproperty")).Accumulator = value;
            }
        }
        public double ModerationDuration_logproperty
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logproperty")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("logproperty")).ModerationPeriod = value;
            }
        }
        public delegate System.String Delegate_GetLogModel(System.String key
            );
        public delegate void Delegate_LogProperty(System.String key, System.String property, System.Int32 interval);
        public delegate void Delegate_ReloadState(System.String key);
        public delegate System.String Delegate_RetrieveEventLog(System.String From, System.String To);
        public delegate void Delegate_RetrieveModelLog(System.String key);
        public delegate System.String Delegate_RetrievePropertyLog(System.String key, System.String From, System.String To);
        public delegate void Delegate_SaveState(System.String key);
        public delegate void Delegate_SetLogModel(System.String key, System.String logmodel);
        public delegate void Delegate_StartModelLog(System.String key);
        public delegate void Delegate_StopModelLog(System.String key);

        public Delegate_GetLogModel External_GetLogModel = null;
        public Delegate_LogProperty External_LogProperty = null;
        public Delegate_ReloadState External_ReloadState = null;
        public Delegate_RetrieveEventLog External_RetrieveEventLog = null;
        public Delegate_RetrieveModelLog External_RetrieveModelLog = null;
        public Delegate_RetrievePropertyLog External_RetrievePropertyLog = null;
        public Delegate_SaveState External_SaveState = null;
        public Delegate_SetLogModel External_SetLogModel = null;
        public Delegate_StartModelLog External_StartModelLog = null;
        public Delegate_StopModelLog External_StopModelLog = null;

        public void RemoveStateVariable_statemodel()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("statemodel"));
        }
        public void RemoveStateVariable_timestamp()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("timestamp"));
        }
        public void RemoveStateVariable_logkey()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("logkey"));
        }
        public void RemoveStateVariable_eventlog()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("eventlog"));
        }
        public void RemoveStateVariable_logmodel()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("logmodel"));
        }
        public void RemoveStateVariable_loginterval()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("loginterval"));
        }
        public void RemoveStateVariable_saveproperty()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("saveproperty"));
        }
        public void RemoveStateVariable_savekey()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("savekey"));
        }
        public void RemoveStateVariable_logproperty()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("logproperty"));
        }
        public void RemoveAction_GetLogModel()
        {
             _S.GetUPnPService().RemoveMethod("GetLogModel");
        }
        public void RemoveAction_LogProperty()
        {
             _S.GetUPnPService().RemoveMethod("LogProperty");
        }
        public void RemoveAction_ReloadState()
        {
             _S.GetUPnPService().RemoveMethod("ReloadState");
        }
        public void RemoveAction_RetrieveEventLog()
        {
             _S.GetUPnPService().RemoveMethod("RetrieveEventLog");
        }
        public void RemoveAction_RetrieveModelLog()
        {
             _S.GetUPnPService().RemoveMethod("RetrieveModelLog");
        }
        public void RemoveAction_RetrievePropertyLog()
        {
             _S.GetUPnPService().RemoveMethod("RetrievePropertyLog");
        }
        public void RemoveAction_SaveState()
        {
             _S.GetUPnPService().RemoveMethod("SaveState");
        }
        public void RemoveAction_SetLogModel()
        {
             _S.GetUPnPService().RemoveMethod("SetLogModel");
        }
        public void RemoveAction_StartModelLog()
        {
             _S.GetUPnPService().RemoveMethod("StartModelLog");
        }
        public void RemoveAction_StopModelLog()
        {
             _S.GetUPnPService().RemoveMethod("StopModelLog");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvMemoryService
        {
            private DvMemoryService Outer = null;
            private UPnPService S;
            internal _DvMemoryService(DvMemoryService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[9];
                RetVal[0] = new UPnPModeratedStateVariable("statemodel", typeof(System.String), false);
                RetVal[1] = new UPnPModeratedStateVariable("timestamp", typeof(System.String), false);
                RetVal[1].AddAssociation("RetrieveEventLog", "From");
                RetVal[1].AddAssociation("RetrieveEventLog", "To");
                RetVal[1].AddAssociation("RetrievePropertyLog", "From");
                RetVal[1].AddAssociation("RetrievePropertyLog", "To");
                RetVal[2] = new UPnPModeratedStateVariable("logkey", typeof(System.String), false);
                RetVal[2].AddAssociation("GetLogModel", "key");
                RetVal[2].AddAssociation("LogProperty", "key");
                RetVal[2].AddAssociation("RetrieveModelLog", "key");
                RetVal[2].AddAssociation("RetrievePropertyLog", "key");
                RetVal[2].AddAssociation("SetLogModel", "key");
                RetVal[2].AddAssociation("StartModelLog", "key");
                RetVal[2].AddAssociation("StopModelLog", "key");
                RetVal[3] = new UPnPModeratedStateVariable("eventlog", typeof(System.String), false);
                RetVal[3].AddAssociation("RetrieveEventLog", "eventlog");
                RetVal[4] = new UPnPModeratedStateVariable("logmodel", typeof(System.String), false);
                RetVal[4].AddAssociation("GetLogModel", "logmodel");
                RetVal[4].AddAssociation("SetLogModel", "logmodel");
                RetVal[5] = new UPnPModeratedStateVariable("loginterval", typeof(System.Int32), false);
                RetVal[5].AddAssociation("LogProperty", "interval");
                RetVal[6] = new UPnPModeratedStateVariable("saveproperty", typeof(System.String), false);
                RetVal[7] = new UPnPModeratedStateVariable("savekey", typeof(System.String), false);
                RetVal[7].AddAssociation("ReloadState", "key");
                RetVal[7].AddAssociation("SaveState", "key");
                RetVal[8] = new UPnPModeratedStateVariable("logproperty", typeof(System.String), false);
                RetVal[8].AddAssociation("LogProperty", "property");
                RetVal[8].AddAssociation("RetrievePropertyLog", "log");

                UPnPService S = new UPnPService(1, "urn:schemas-upnp-org:memoryservice:1", "urn:schemas-upnp-org:memoryservice::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetLogModel");
                S.AddMethod("LogProperty");
                S.AddMethod("ReloadState");
                S.AddMethod("RetrieveEventLog");
                S.AddMethod("RetrieveModelLog");
                S.AddMethod("RetrievePropertyLog");
                S.AddMethod("SaveState");
                S.AddMethod("SetLogModel");
                S.AddMethod("StartModelLog");
                S.AddMethod("StopModelLog");
                return(S);
            }

            [OpenSource.UPnP.ReturnArgument("logmodel")]
            public System.String GetLogModel(System.String key)
            {
                object RetObj = null;
                if(Outer.External_GetLogModel != null)
                {
                    RetObj = Outer.External_GetLogModel(key);
                }
                else
                {
                    RetObj = Sink_GetLogModel(key);
                }
                return((System.String)RetObj);
            }
            public void LogProperty(System.String key, System.String property, System.Int32 interval)
            {
                if(Outer.External_LogProperty != null)
                {
                    Outer.External_LogProperty(key, property, interval);
                }
                else
                {
                    Sink_LogProperty(key, property, interval);
                }
            }
            public void ReloadState(System.String key)
            {
                if(Outer.External_ReloadState != null)
                {
                    Outer.External_ReloadState(key);
                }
                else
                {
                    Sink_ReloadState(key);
                }
            }
            [OpenSource.UPnP.ReturnArgument("eventlog")]
            public System.String RetrieveEventLog(System.String From, System.String To)
            {
                object RetObj = null;
                if(Outer.External_RetrieveEventLog != null)
                {
                    RetObj = Outer.External_RetrieveEventLog(From, To);
                }
                else
                {
                    RetObj = Sink_RetrieveEventLog(From, To);
                }
                return((System.String)RetObj);
            }
            public void RetrieveModelLog(System.String key)
            {
                if(Outer.External_RetrieveModelLog != null)
                {
                    Outer.External_RetrieveModelLog(key);
                }
                else
                {
                    Sink_RetrieveModelLog(key);
                }
            }
            [OpenSource.UPnP.ReturnArgument("log")]
            public System.String RetrievePropertyLog(System.String key, System.String From, System.String To)
            {
                object RetObj = null;
                if(Outer.External_RetrievePropertyLog != null)
                {
                    RetObj = Outer.External_RetrievePropertyLog(key, From, To);
                }
                else
                {
                    RetObj = Sink_RetrievePropertyLog(key, From, To);
                }
                return((System.String)RetObj);
            }
            public void SaveState(System.String key)
            {
                if(Outer.External_SaveState != null)
                {
                    Outer.External_SaveState(key);
                }
                else
                {
                    Sink_SaveState(key);
                }
            }
            public void SetLogModel(System.String key, System.String logmodel)
            {
                if(Outer.External_SetLogModel != null)
                {
                    Outer.External_SetLogModel(key, logmodel);
                }
                else
                {
                    Sink_SetLogModel(key, logmodel);
                }
            }
            public void StartModelLog(System.String key)
            {
                if(Outer.External_StartModelLog != null)
                {
                    Outer.External_StartModelLog(key);
                }
                else
                {
                    Sink_StartModelLog(key);
                }
            }
            public void StopModelLog(System.String key)
            {
                if(Outer.External_StopModelLog != null)
                {
                    Outer.External_StopModelLog(key);
                }
                else
                {
                    Sink_StopModelLog(key);
                }
            }

            public Delegate_GetLogModel Sink_GetLogModel;
            public Delegate_LogProperty Sink_LogProperty;
            public Delegate_ReloadState Sink_ReloadState;
            public Delegate_RetrieveEventLog Sink_RetrieveEventLog;
            public Delegate_RetrieveModelLog Sink_RetrieveModelLog;
            public Delegate_RetrievePropertyLog Sink_RetrievePropertyLog;
            public Delegate_SaveState Sink_SaveState;
            public Delegate_SetLogModel Sink_SetLogModel;
            public Delegate_StartModelLog Sink_StartModelLog;
            public Delegate_StopModelLog Sink_StopModelLog;
        }
        public DvMemoryService()
        {
            _S = new _DvMemoryService(this);
            _S.GetUPnPService().GetStateVariableObject("statemodel").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_statemodel);
            _S.GetUPnPService().GetStateVariableObject("timestamp").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_timestamp);
            _S.GetUPnPService().GetStateVariableObject("logkey").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_logkey);
            _S.GetUPnPService().GetStateVariableObject("eventlog").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_eventlog);
            _S.GetUPnPService().GetStateVariableObject("logmodel").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_logmodel);
            _S.GetUPnPService().GetStateVariableObject("loginterval").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_loginterval);
            _S.GetUPnPService().GetStateVariableObject("saveproperty").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_saveproperty);
            _S.GetUPnPService().GetStateVariableObject("savekey").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_savekey);
            _S.GetUPnPService().GetStateVariableObject("logproperty").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_logproperty);
            _S.Sink_GetLogModel = new Delegate_GetLogModel(GetLogModel);
            _S.Sink_LogProperty = new Delegate_LogProperty(LogProperty);
            _S.Sink_ReloadState = new Delegate_ReloadState(ReloadState);
            _S.Sink_RetrieveEventLog = new Delegate_RetrieveEventLog(RetrieveEventLog);
            _S.Sink_RetrieveModelLog = new Delegate_RetrieveModelLog(RetrieveModelLog);
            _S.Sink_RetrievePropertyLog = new Delegate_RetrievePropertyLog(RetrievePropertyLog);
            _S.Sink_SaveState = new Delegate_SaveState(SaveState);
            _S.Sink_SetLogModel = new Delegate_SetLogModel(SetLogModel);
            _S.Sink_StartModelLog = new Delegate_StartModelLog(StartModelLog);
            _S.Sink_StopModelLog = new Delegate_StopModelLog(StopModelLog);
        }
        public DvMemoryService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_statemodel(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_statemodel != null) OnStateVariableModified_statemodel(this);
        }
        private void OnModifiedSink_timestamp(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_timestamp != null) OnStateVariableModified_timestamp(this);
        }
        private void OnModifiedSink_logkey(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_logkey != null) OnStateVariableModified_logkey(this);
        }
        private void OnModifiedSink_eventlog(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_eventlog != null) OnStateVariableModified_eventlog(this);
        }
        private void OnModifiedSink_logmodel(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_logmodel != null) OnStateVariableModified_logmodel(this);
        }
        private void OnModifiedSink_loginterval(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_loginterval != null) OnStateVariableModified_loginterval(this);
        }
        private void OnModifiedSink_saveproperty(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_saveproperty != null) OnStateVariableModified_saveproperty(this);
        }
        private void OnModifiedSink_savekey(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_savekey != null) OnStateVariableModified_savekey(this);
        }
        private void OnModifiedSink_logproperty(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_logproperty != null) OnStateVariableModified_logproperty(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: GetLogModel
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        /// <returns>Associated StateVariable: logmodel</returns>
        public System.String GetLogModel(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: LogProperty
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        /// <param name="property">Associated State Variable: logproperty</param>
        /// <param name="interval">Associated State Variable: loginterval</param>
        public void LogProperty(System.String key, System.String property, System.Int32 interval)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: ReloadState
        /// </summary>
        /// <param name="key">Associated State Variable: savekey</param>
        public void ReloadState(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: RetrieveEventLog
        /// </summary>
        /// <param name="From">Associated State Variable: timestamp</param>
        /// <param name="To">Associated State Variable: timestamp</param>
        /// <returns>Associated StateVariable: eventlog</returns>
        public System.String RetrieveEventLog(System.String From, System.String To)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: RetrieveModelLog
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        public void RetrieveModelLog(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: RetrievePropertyLog
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        /// <param name="From">Associated State Variable: timestamp</param>
        /// <param name="To">Associated State Variable: timestamp</param>
        /// <returns>Associated StateVariable: logproperty</returns>
        public System.String RetrievePropertyLog(System.String key, System.String From, System.String To)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SaveState
        /// </summary>
        /// <param name="key">Associated State Variable: savekey</param>
        public void SaveState(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetLogModel
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        /// <param name="logmodel">Associated State Variable: logmodel</param>
        public void SetLogModel(System.String key, System.String logmodel)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: StartModelLog
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        public void StartModelLog(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: StopModelLog
        /// </summary>
        /// <param name="key">Associated State Variable: logkey</param>
        public void StopModelLog(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}