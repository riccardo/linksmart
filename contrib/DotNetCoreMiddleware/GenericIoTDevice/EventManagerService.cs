/*
 * In case of German law being applicable to this license agreement, the following warranty and liability terms shall apply:
 *
 * 1. Licensor shall be liable for any damages caused by wilful intent or malicious concealment of defects.
 * 2. Licensor's liability for gross negligence is limited to foreseeable, contractually typical damages.
 * 3. Licensor shall not be liable for damages caused by slight negligence, except in cases 
 *    of violation of essential contractual obligations (cardinal obligations). Licensee's claims for 
 *    such damages shall be statute barred within 12 months subsequent to the delivery of the software.
 * 4. As the Software is licensed on a royalty free basis, any liability of the Licensor for indirect damages 
 *    and consequential damages - except in cases of intent - is excluded.
 *
 * This limitation of liability shall also apply if this license agreement shall be subject to law 
 * stipulating liability clauses corresponding to German law.
 */
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:2.0.50727.1433
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace EventManager {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EventManagerPortBinding", Namespace="http://eventmanager.IoT.eu.com")]
    public partial class EventManagerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback subscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback subscribeWithHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback unsubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback unsubscribeWithHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearSubscriptionsWithHIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPriorityOperationCompleted;
        
        /// <remarks/>
        public EventManagerService() {
            this.Url = "http://localhost";
        }
        
        /// <remarks/>
        public event subscribeCompletedEventHandler subscribeCompleted;
        
        /// <remarks/>
        public event subscribeWithHIDCompletedEventHandler subscribeWithHIDCompleted;
        
        /// <remarks/>
        public event unsubscribeCompletedEventHandler unsubscribeCompleted;
        
        /// <remarks/>
        public event unsubscribeWithHIDCompletedEventHandler unsubscribeWithHIDCompleted;
        
        /// <remarks/>
        public event getSubscriptionsCompletedEventHandler getSubscriptionsCompleted;
        
        /// <remarks/>
        public event clearSubscriptionsCompletedEventHandler clearSubscriptionsCompleted;
        
        /// <remarks/>
        public event clearSubscriptionsWithHIDCompletedEventHandler clearSubscriptionsWithHIDCompleted;
        
        /// <remarks/>
        public event publishCompletedEventHandler publishCompleted;
        
        /// <remarks/>
        public event setPriorityCompletedEventHandler setPriorityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("subscribe", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool subscribe(string topic, [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")] string subscriber) {
            object[] results = this.Invoke("subscribe", new object[] {
                        topic,
                        subscriber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginsubscribe(string topic, string subscriber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("subscribe", new object[] {
                        topic,
                        subscriber}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool Endsubscribe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void subscribeAsync(string topic, string subscriber) {
            this.subscribeAsync(topic, subscriber, null);
        }
        
        /// <remarks/>
        public void subscribeAsync(string topic, string subscriber, object userState) {
            if ((this.subscribeOperationCompleted == null)) {
                this.subscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubscribeOperationCompleted);
            }
            this.InvokeAsync("subscribe", new object[] {
                        topic,
                        subscriber}, this.subscribeOperationCompleted, userState);
        }
        
        private void OnsubscribeOperationCompleted(object arg) {
            if ((this.subscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.subscribeCompleted(this, new subscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("subscribeWithHID", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool subscribeWithHID(string topic, string hid) {
            object[] results = this.Invoke("subscribeWithHID", new object[] {
                        topic,
                        hid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsubscribeWithHID(string topic, string hid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("subscribeWithHID", new object[] {
                        topic,
                        hid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndsubscribeWithHID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void subscribeWithHIDAsync(string topic, string hid) {
            this.subscribeWithHIDAsync(topic, hid, null);
        }
        
        /// <remarks/>
        public void subscribeWithHIDAsync(string topic, string hid, object userState) {
            if ((this.subscribeWithHIDOperationCompleted == null)) {
                this.subscribeWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubscribeWithHIDOperationCompleted);
            }
            this.InvokeAsync("subscribeWithHID", new object[] {
                        topic,
                        hid}, this.subscribeWithHIDOperationCompleted, userState);
        }
        
        private void OnsubscribeWithHIDOperationCompleted(object arg) {
            if ((this.subscribeWithHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.subscribeWithHIDCompleted(this, new subscribeWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("unsubscribe", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool unsubscribe(string topic, [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")] string subscriber) {
            object[] results = this.Invoke("unsubscribe", new object[] {
                        topic,
                        subscriber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginunsubscribe(string topic, string subscriber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("unsubscribe", new object[] {
                        topic,
                        subscriber}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool Endunsubscribe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void unsubscribeAsync(string topic, string subscriber) {
            this.unsubscribeAsync(topic, subscriber, null);
        }
        
        /// <remarks/>
        public void unsubscribeAsync(string topic, string subscriber, object userState) {
            if ((this.unsubscribeOperationCompleted == null)) {
                this.unsubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunsubscribeOperationCompleted);
            }
            this.InvokeAsync("unsubscribe", new object[] {
                        topic,
                        subscriber}, this.unsubscribeOperationCompleted, userState);
        }
        
        private void OnunsubscribeOperationCompleted(object arg) {
            if ((this.unsubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unsubscribeCompleted(this, new unsubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("unsubscribeWithHID", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool unsubscribeWithHID(string topic, string hid) {
            object[] results = this.Invoke("unsubscribeWithHID", new object[] {
                        topic,
                        hid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginunsubscribeWithHID(string topic, string hid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("unsubscribeWithHID", new object[] {
                        topic,
                        hid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndunsubscribeWithHID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void unsubscribeWithHIDAsync(string topic, string hid) {
            this.unsubscribeWithHIDAsync(topic, hid, null);
        }
        
        /// <remarks/>
        public void unsubscribeWithHIDAsync(string topic, string hid, object userState) {
            if ((this.unsubscribeWithHIDOperationCompleted == null)) {
                this.unsubscribeWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunsubscribeWithHIDOperationCompleted);
            }
            this.InvokeAsync("unsubscribeWithHID", new object[] {
                        topic,
                        hid}, this.unsubscribeWithHIDOperationCompleted, userState);
        }
        
        private void OnunsubscribeWithHIDOperationCompleted(object arg) {
            if ((this.unsubscribeWithHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unsubscribeWithHIDCompleted(this, new unsubscribeWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getSubscriptions", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("subscriptions", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public subscription[] getSubscriptions() {
            object[] results = this.Invoke("getSubscriptions", new object[0]);
            return ((subscription[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetSubscriptions(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSubscriptions", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public subscription[] EndgetSubscriptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((subscription[])(results[0]));
        }
        
        /// <remarks/>
        public void getSubscriptionsAsync() {
            this.getSubscriptionsAsync(null);
        }
        
        /// <remarks/>
        public void getSubscriptionsAsync(object userState) {
            if ((this.getSubscriptionsOperationCompleted == null)) {
                this.getSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("getSubscriptions", new object[0], this.getSubscriptionsOperationCompleted, userState);
        }
        
        private void OngetSubscriptionsOperationCompleted(object arg) {
            if ((this.getSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSubscriptionsCompleted(this, new getSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("clearSubscriptions", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool clearSubscriptions([System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")] string subscriber) {
            object[] results = this.Invoke("clearSubscriptions", new object[] {
                        subscriber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginclearSubscriptions(string subscriber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("clearSubscriptions", new object[] {
                        subscriber}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndclearSubscriptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void clearSubscriptionsAsync(string subscriber) {
            this.clearSubscriptionsAsync(subscriber, null);
        }
        
        /// <remarks/>
        public void clearSubscriptionsAsync(string subscriber, object userState) {
            if ((this.clearSubscriptionsOperationCompleted == null)) {
                this.clearSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("clearSubscriptions", new object[] {
                        subscriber}, this.clearSubscriptionsOperationCompleted, userState);
        }
        
        private void OnclearSubscriptionsOperationCompleted(object arg) {
            if ((this.clearSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearSubscriptionsCompleted(this, new clearSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("clearSubscriptionsWithHID", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool clearSubscriptionsWithHID(string hid) {
            object[] results = this.Invoke("clearSubscriptionsWithHID", new object[] {
                        hid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginclearSubscriptionsWithHID(string hid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("clearSubscriptionsWithHID", new object[] {
                        hid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndclearSubscriptionsWithHID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void clearSubscriptionsWithHIDAsync(string hid) {
            this.clearSubscriptionsWithHIDAsync(hid, null);
        }
        
        /// <remarks/>
        public void clearSubscriptionsWithHIDAsync(string hid, object userState) {
            if ((this.clearSubscriptionsWithHIDOperationCompleted == null)) {
                this.clearSubscriptionsWithHIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearSubscriptionsWithHIDOperationCompleted);
            }
            this.InvokeAsync("clearSubscriptionsWithHID", new object[] {
                        hid}, this.clearSubscriptionsWithHIDOperationCompleted, userState);
        }
        
        private void OnclearSubscriptionsWithHIDOperationCompleted(object arg) {
            if ((this.clearSubscriptionsWithHIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearSubscriptionsWithHIDCompleted(this, new clearSubscriptionsWithHIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("publish", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool publish(string topicPattern, [System.Xml.Serialization.XmlArrayItemAttribute("parts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] part[] @event) {
            object[] results = this.Invoke("publish", new object[] {
                        topicPattern,
                        @event});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginpublish(string topicPattern, part[] @event, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("publish", new object[] {
                        topicPattern,
                        @event}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool Endpublish(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void publishAsync(string topicPattern, part[] @event) {
            this.publishAsync(topicPattern, @event, null);
        }
        
        /// <remarks/>
        public void publishAsync(string topicPattern, part[] @event, object userState) {
            if ((this.publishOperationCompleted == null)) {
                this.publishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishOperationCompleted);
            }
            this.InvokeAsync("publish", new object[] {
                        topicPattern,
                        @event}, this.publishOperationCompleted, userState);
        }
        
        private void OnpublishOperationCompleted(object arg) {
            if ((this.publishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishCompleted(this, new publishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("setPriority", RequestNamespace="http://eventmanager.IoT.eu.com", ResponseNamespace="http://eventmanager.IoT.eu.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool setPriority(string topic, int priority) {
            object[] results = this.Invoke("setPriority", new object[] {
                        topic,
                        priority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsetPriority(string topic, int priority, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("setPriority", new object[] {
                        topic,
                        priority}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndsetPriority(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setPriorityAsync(string topic, int priority) {
            this.setPriorityAsync(topic, priority, null);
        }
        
        /// <remarks/>
        public void setPriorityAsync(string topic, int priority, object userState) {
            if ((this.setPriorityOperationCompleted == null)) {
                this.setPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPriorityOperationCompleted);
            }
            this.InvokeAsync("setPriority", new object[] {
                        topic,
                        priority}, this.setPriorityOperationCompleted, userState);
        }
        
        private void OnsetPriorityOperationCompleted(object arg) {
            if ((this.setPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPriorityCompleted(this, new setPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://eventmanager.IoT.eu.com")]
    public partial class subscription {
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private string topicField;
        
        private string uRLField;
        
        private string hIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string topic {
            get {
                return this.topicField;
            }
            set {
                this.topicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string HID {
            get {
                return this.hIDField;
            }
            set {
                this.hIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://eventmanager.IoT.eu.com")]
    public partial class part {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void subscribeCompletedEventHandler(object sender, subscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class subscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal subscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void subscribeWithHIDCompletedEventHandler(object sender, subscribeWithHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class subscribeWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal subscribeWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void unsubscribeCompletedEventHandler(object sender, unsubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unsubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unsubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void unsubscribeWithHIDCompletedEventHandler(object sender, unsubscribeWithHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unsubscribeWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unsubscribeWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void getSubscriptionsCompletedEventHandler(object sender, getSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public subscription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((subscription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void clearSubscriptionsCompletedEventHandler(object sender, clearSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clearSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clearSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void clearSubscriptionsWithHIDCompletedEventHandler(object sender, clearSubscriptionsWithHIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clearSubscriptionsWithHIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clearSubscriptionsWithHIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void publishCompletedEventHandler(object sender, publishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void setPriorityCompletedEventHandler(object sender, setPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
