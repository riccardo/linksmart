using OpenSource.UPnP;

namespace IoT
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvLocationService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvLocationService _S;
        public static string URN = "urn:schemas-upnp-org:locationservice::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(DvLocationService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_locationproperty;
        public event OnStateVariableModifiedHandler OnStateVariableModified_locationmodel;
        public event OnStateVariableModifiedHandler OnStateVariableModified_currentposition;
        public System.String locationproperty
        {
            get
            {
               return((System.String)_S.GetStateVariable("locationproperty"));
            }
            set
            {
               _S.SetStateVariable("locationproperty", value);
            }
        }
        public System.String locationmodel
        {
            get
            {
               return((System.String)_S.GetStateVariable("locationmodel"));
            }
            set
            {
               _S.SetStateVariable("locationmodel", value);
            }
        }
        public System.String currentposition
        {
            get
            {
               return((System.String)_S.GetStateVariable("currentposition"));
            }
            set
            {
               _S.SetStateVariable("currentposition", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_locationproperty
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationproperty")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationproperty")).Accumulator = value;
            }
        }
        public double ModerationDuration_locationproperty
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationproperty")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationproperty")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_locationmodel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationmodel")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationmodel")).Accumulator = value;
            }
        }
        public double ModerationDuration_locationmodel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationmodel")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("locationmodel")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_currentposition
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("currentposition")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("currentposition")).Accumulator = value;
            }
        }
        public double ModerationDuration_currentposition
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("currentposition")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("currentposition")).ModerationPeriod = value;
            }
        }
        public delegate System.String Delegate_GetCurrentPosition();
        public delegate System.String Delegate_GetLocationModel();
        public delegate System.String Delegate_GetLocationProperty(System.String key);
        public delegate void Delegate_SetCurrentPosition(System.String currentposition);
        public delegate void Delegate_SetLocationModel(System.String locationmodel);
        public delegate void Delegate_SetLocationProperty(System.String locationproperty, System.String value);

        public Delegate_GetCurrentPosition External_GetCurrentPosition = null;
        public Delegate_GetLocationModel External_GetLocationModel = null;
        public Delegate_GetLocationProperty External_GetLocationProperty = null;
        public Delegate_SetCurrentPosition External_SetCurrentPosition = null;
        public Delegate_SetLocationModel External_SetLocationModel = null;
        public Delegate_SetLocationProperty External_SetLocationProperty = null;

        public void RemoveStateVariable_locationproperty()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("locationproperty"));
        }
        public void RemoveStateVariable_locationmodel()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("locationmodel"));
        }
        public void RemoveStateVariable_currentposition()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("currentposition"));
        }
        public void RemoveAction_GetCurrentPosition()
        {
             _S.GetUPnPService().RemoveMethod("GetCurrentPosition");
        }
        public void RemoveAction_GetLocationModel()
        {
             _S.GetUPnPService().RemoveMethod("GetLocationModel");
        }
        public void RemoveAction_GetLocationProperty()
        {
             _S.GetUPnPService().RemoveMethod("GetLocationProperty");
        }
        public void RemoveAction_SetCurrentPosition()
        {
             _S.GetUPnPService().RemoveMethod("SetCurrentPosition");
        }
        public void RemoveAction_SetLocationModel()
        {
             _S.GetUPnPService().RemoveMethod("SetLocationModel");
        }
        public void RemoveAction_SetLocationProperty()
        {
             _S.GetUPnPService().RemoveMethod("SetLocationProperty");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvLocationService
        {
            private DvLocationService Outer = null;
            private UPnPService S;
            internal _DvLocationService(DvLocationService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[3];
                RetVal[0] = new UPnPModeratedStateVariable("locationproperty", typeof(System.String), false);
                RetVal[0].AddAssociation("GetLocationProperty", "key");
                RetVal[0].AddAssociation("GetLocationProperty", "locationproperty");
                RetVal[0].AddAssociation("SetLocationProperty", "locationproperty");
                RetVal[0].AddAssociation("SetLocationProperty", "value");
                RetVal[1] = new UPnPModeratedStateVariable("locationmodel", typeof(System.String), false);
                RetVal[1].AddAssociation("GetLocationModel", "locationmodel");
                RetVal[1].AddAssociation("SetLocationModel", "locationmodel");
                RetVal[2] = new UPnPModeratedStateVariable("currentposition", typeof(System.String), false);
                RetVal[2].AddAssociation("GetCurrentPosition", "position");
                RetVal[2].AddAssociation("SetCurrentPosition", "currentposition");

                UPnPService S = new UPnPService(1, "urn:schemas-upnp-org:locationservice:1", "urn:schemas-upnp-org:locationservice::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetCurrentPosition");
                S.AddMethod("GetLocationModel");
                S.AddMethod("GetLocationProperty");
                S.AddMethod("SetCurrentPosition");
                S.AddMethod("SetLocationModel");
                S.AddMethod("SetLocationProperty");
                return(S);
            }

            [OpenSource.UPnP.ReturnArgument("position")]
            public System.String GetCurrentPosition()
            {
                object RetObj = null;
                if(Outer.External_GetCurrentPosition != null)
                {
                    RetObj = Outer.External_GetCurrentPosition();
                }
                else
                {
                    RetObj = Sink_GetCurrentPosition();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("locationmodel")]
            public System.String GetLocationModel()
            {
                object RetObj = null;
                if(Outer.External_GetLocationModel != null)
                {
                    RetObj = Outer.External_GetLocationModel();
                }
                else
                {
                    RetObj = Sink_GetLocationModel();
                }
                return((System.String)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("locationproperty")]
            public System.String GetLocationProperty(System.String key)
            {
                object RetObj = null;
                if(Outer.External_GetLocationProperty != null)
                {
                    RetObj = Outer.External_GetLocationProperty(key);
                }
                else
                {
                    RetObj = Sink_GetLocationProperty(key);
                }
                return((System.String)RetObj);
            }
            public void SetCurrentPosition(System.String currentposition)
            {
                if(Outer.External_SetCurrentPosition != null)
                {
                    Outer.External_SetCurrentPosition(currentposition);
                }
                else
                {
                    Sink_SetCurrentPosition(currentposition);
                }
            }
            public void SetLocationModel(System.String locationmodel)
            {
                if(Outer.External_SetLocationModel != null)
                {
                    Outer.External_SetLocationModel(locationmodel);
                }
                else
                {
                    Sink_SetLocationModel(locationmodel);
                }
            }
            public void SetLocationProperty(System.String locationproperty, System.String value)
            {
                if(Outer.External_SetLocationProperty != null)
                {
                    Outer.External_SetLocationProperty(locationproperty, value);
                }
                else
                {
                    Sink_SetLocationProperty(locationproperty, value);
                }
            }

            public Delegate_GetCurrentPosition Sink_GetCurrentPosition;
            public Delegate_GetLocationModel Sink_GetLocationModel;
            public Delegate_GetLocationProperty Sink_GetLocationProperty;
            public Delegate_SetCurrentPosition Sink_SetCurrentPosition;
            public Delegate_SetLocationModel Sink_SetLocationModel;
            public Delegate_SetLocationProperty Sink_SetLocationProperty;
        }
        public DvLocationService()
        {
            _S = new _DvLocationService(this);
            _S.GetUPnPService().GetStateVariableObject("locationproperty").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_locationproperty);
            _S.GetUPnPService().GetStateVariableObject("locationmodel").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_locationmodel);
            _S.GetUPnPService().GetStateVariableObject("currentposition").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_currentposition);
            _S.Sink_GetCurrentPosition = new Delegate_GetCurrentPosition(GetCurrentPosition);
            _S.Sink_GetLocationModel = new Delegate_GetLocationModel(GetLocationModel);
            _S.Sink_GetLocationProperty = new Delegate_GetLocationProperty(GetLocationProperty);
            _S.Sink_SetCurrentPosition = new Delegate_SetCurrentPosition(SetCurrentPosition);
            _S.Sink_SetLocationModel = new Delegate_SetLocationModel(SetLocationModel);
            _S.Sink_SetLocationProperty = new Delegate_SetLocationProperty(SetLocationProperty);
        }
        public DvLocationService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_locationproperty(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_locationproperty != null) OnStateVariableModified_locationproperty(this);
        }
        private void OnModifiedSink_locationmodel(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_locationmodel != null) OnStateVariableModified_locationmodel(this);
        }
        private void OnModifiedSink_currentposition(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_currentposition != null) OnStateVariableModified_currentposition(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: GetCurrentPosition
        /// </summary>
        /// <returns>Associated StateVariable: currentposition</returns>
        public System.String GetCurrentPosition()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetLocationModel
        /// </summary>
        /// <returns>Associated StateVariable: locationmodel</returns>
        public System.String GetLocationModel()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetLocationProperty
        /// </summary>
        /// <param name="key">Associated State Variable: locationproperty</param>
        /// <returns>Associated StateVariable: locationproperty</returns>
        public System.String GetLocationProperty(System.String key)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetCurrentPosition
        /// </summary>
        /// <param name="currentposition">Associated State Variable: currentposition</param>
        public void SetCurrentPosition(System.String currentposition)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetLocationModel
        /// </summary>
        /// <param name="locationmodel">Associated State Variable: locationmodel</param>
        public void SetLocationModel(System.String locationmodel)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetLocationProperty
        /// </summary>
        /// <param name="locationproperty">Associated State Variable: locationproperty</param>
        /// <param name="value">Associated State Variable: locationproperty</param>
        public void SetLocationProperty(System.String locationproperty, System.String value)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}