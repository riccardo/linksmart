package $package;

$imports

public class $class implements DiscoveryListener  {
	
	static String theHost;
	static int thePort;

#foreach($PortType in $portTypes)
	private ${PortType.getQName().getLocalPart()}LimboClientPortImpl the${PortType.getQName().getLocalPart().toLowerCase()}Client;
#end
	static final boolean DEBUG = false;
	
	private UUID UUID_STRING = new UUID("1101",true);
	
	protected int inquiryMode = DiscoveryAgent.GIAC; 

	protected int connectionOptions = ServiceRecord.NOAUTHENTICATE_NOENCRYPT;
	
	protected JTextArea infoArea = null;

	protected Vector deviceList = new Vector();

	protected JComboBox combo;

	
	static final String DEBUG_address = "0013FDC157C8"; // N6630



	public $class() {
		
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				createGUI();
				if (DEBUG) // skip inquiry in debug mode
					startServiceSearch(new RemoteDevice(DEBUG_address) {
					});
				else
					startDeviceInquiry();
			}
		});
	}
	
	protected ItemListener comboSelectionListener = new ItemListener() {
		public void itemStateChanged(ItemEvent e) {
			startServiceSearch((RemoteDevice) combo.getSelectedItem());
			combo.removeItemListener(this);
			combo.setEnabled(false);
		}
	};
	
	private void startDeviceInquiry() {
		try {
			deviceList.removeAllElements();
			log("Start inquiry method - this will take few seconds...");
			getAgent().startInquiry(inquiryMode, this);
		} catch (Exception e) {
			log(e);
		}
	}

	public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod) {
		log("A device discovered (" + getDeviceStr(btDevice) + ")");
		deviceList.addElement(btDevice);
		if (!combo.isEnabled()) {
			combo.setEnabled(true);
			combo.addItemListener(comboSelectionListener);
		}
	}

	public void inquiryCompleted(int discType) {
		log("Inquiry compeleted. Please select device from combo box.");
	}

	/*-
	 *   -------  Service search section -------
	 */

	private void startServiceSearch(RemoteDevice device) {
		try {
			log("Start search for Serial Port Profile service from "
					+ getDeviceStr(device));
			UUID uuids[] = new UUID[] { UUID_STRING };
			int[] attrSet = {0x0100}; //service name
			getAgent().searchServices(attrSet, uuids, device, this);
		} catch (Exception e) {
			log(e);
		}
	}

	/**
	 * This method is called when a service(s) are discovered.This method starts
	 * a thread that handles the data exchange with the server.
	 */
	public void servicesDiscovered(int transId, ServiceRecord[] records) {
		log("Service discovered.");
		for (int i=0; i < records.length; i++) {
			if (records[i] != null) {
				// get the service record's name
				DataElement servNameElem =
				records[i].getAttributeValue(0x0100);
				String servName = (String)servNameElem.getValue();
#foreach($PortType in $portTypes)
				if (servName.equals("${PortType.getQName().getLocalPart()}")) { // check the name
					handle${PortType.getQName().getLocalPart()}Connection(records[i].getConnectionURL(connectionOptions, false));
				}
#end
			}
		}
	}

#foreach($PortType in $portTypes)
	public void handle${PortType.getQName().getLocalPart()}Connection(String url) {
	    String path = "";
	    this.the${PortType.getQName().getLocalPart().toLowerCase()}Client = new ${PortType.getQName().getLocalPart()}LimboClientPortImpl(new BTProtocol(),url);
	    //Insert your client code here 
		
	}
#end

	public void serviceSearchCompleted(int transID, int respCode) {
		String msg = null;
		switch (respCode) {
		case SERVICE_SEARCH_COMPLETED:
			msg = "the service search completed normally";
			break;
		case SERVICE_SEARCH_TERMINATED:
			msg = "the service search request was cancelled by a call to DiscoveryAgent.cancelServiceSearch()";
			break;
		case SERVICE_SEARCH_ERROR:
			msg = "an error occurred while processing the request";
			break;
		case SERVICE_SEARCH_NO_RECORDS:
			msg = "no records were found during the service search";
			break;
		case SERVICE_SEARCH_DEVICE_NOT_REACHABLE:
			msg = "the device specified in the search request could not be reached or the local device could not establish a connection to the remote device";
			break;
		}
		log("Service search completed - " + msg);
	}

	private void createGUI() {
		JFrame.setDefaultLookAndFeelDecorated(true);
		JFrame frame = new JFrame("Bluetooth Client");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new BorderLayout());
		frame.setSize(new Dimension(400, 400));

		JPanel margin = new JPanel(new BorderLayout());
		margin.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
		frame.getContentPane().add(margin);

		infoArea = new JTextArea();
		infoArea.setLineWrap(true);
		JScrollPane pane = new JScrollPane(infoArea,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		margin.add(pane);

		combo = new JComboBox(this.deviceList);
		combo.setEnabled(false);
		combo.setEditable(false);
		combo.setSelectedItem(null);
		combo.setRenderer(new DefaultListCellRenderer() {
			public Component getListCellRendererComponent(JList list,
					Object value, int index, boolean isSelected,
					boolean cellHasFocus) {
				RemoteDevice remote = (RemoteDevice) value;
				if (remote == null)
					setText("No remote devices available.");
				else
					setText(getDeviceStr(remote));
				return this;
			}
		});
		margin.add(combo, BorderLayout.SOUTH);

		frame.setVisible(true);
	}

	private void log(String msg) {
		infoArea.insert(msg + "\n", infoArea.getDocument().getLength());
	}

	private void log(Exception e) {
		log(e.getMessage());
		e.printStackTrace();
	}

	/*-
	 *   -------  Utils section - contains utility functions -------
	 */

	private DiscoveryAgent getAgent() {
		try {
			return LocalDevice.getLocalDevice().getDiscoveryAgent();
		} catch (BluetoothStateException e) {
			log(e);
			log("ERROR detected and all operations stopped.");
			throw new Error("No discovery agent available.");
		}
	}

	private String getDeviceStr(RemoteDevice btDevice) {
		return getFriendlyName(btDevice) + " - 0x"
				+ btDevice.getBluetoothAddress();
	}

	private String getFriendlyName(RemoteDevice btDevice) {
		try {
			return btDevice.getFriendlyName(false);
		} catch (IOException e) {
			return "no name available";
		}
	}
	
	public static void main(String[] args) {
		new $class();
	}
	
}