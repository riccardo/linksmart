package $package;

$imports

public class $class implements $interface {


	private boolean acknowledge;

	public $class() {
		super();
		this.acknowledge = false;
	}

	public String communicateWithServer(String request, String host, int port) {
		String response = "";
		if((this.acknowledge == true) && (request.indexOf("<")!= -1)) {
			StringTokenizer tok = new StringTokenizer(request);
			String headers = tok.nextToken("<");
			headers = headers.substring(0, headers.length()-2).concat("Connection: keep-alive");
			request = headers.concat(request.substring(request.indexOf("\r\n\r\n")));
		}
		try {
			StreamConnection stream = null;
			stream = (StreamConnection) Connector.open(host);
			OutputStream cos = stream.openOutputStream();
			cos.write(request.getBytes());
			cos.flush();
			if(this.acknowledge == true) 
				response = receiveWithAcknowledge(stream,cos);
			else 		
				response = receiveWithoutAcknowledge(stream,cos);
			
		}catch(IOException e) {
			e.printStackTrace();
		}
		if(response == "")
			return null;
		return response;
	}


	private String receiveWithAcknowledge(StreamConnection stream, OutputStream cos) throws IOException {
		String response = "";
		InputStream cis = null;
		cis = stream.openInputStream();
		int ch = 0;
		int chCount = 0;
		boolean condition = true;
		int content = -1;
        	StringBuffer sb = new StringBuffer();
		StringBuffer auxiliar = new StringBuffer();
		while(condition){
			ch = cis.read();
			sb.append((char)ch);
			auxiliar.append((char)ch);
			if((char)ch == '\n'){
				String line = auxiliar.toString();
				if(line.toLowerCase().startsWith("content-length")){
					line = line.substring(0,line.length()-2);
					StringTokenizer st = new StringTokenizer(line,": ");
					st.nextToken();
					content = Integer.parseInt(st.nextToken());
				}
				else if(line.equalsIgnoreCase("\r\n"))
						condition = false;
				auxiliar = new StringBuffer();
			}
		}
		while(chCount<content){
			ch = cis.read();
			sb.append((char)ch);
			chCount++;
		}
		response = sb.toString();
		cos.write("$OK".getBytes());
		cos.flush();
		cis.close();
		cos.close();
		stream.close();
		return response;
	}

	private String receiveWithoutAcknowledge(StreamConnection stream, OutputStream cos) throws IOException {
		String response = "";
		InputStream cis = null;
		cis = stream.openInputStream();
		int ch = 0;
		int chCount = 0;
		boolean condition = true;
		int content = -1;
        	StringBuffer sb = new StringBuffer();
		StringBuffer auxiliar = new StringBuffer();
		while(condition){
			ch = cis.read();
			sb.append((char)ch);
			auxiliar.append((char)ch);
			if((char)ch == '\n'){
				String line = auxiliar.toString();
				if(line.toLowerCase().startsWith("content-length")){
					line = line.substring(0,line.length()-2);
					StringTokenizer st = new StringTokenizer(line,": ");
					st.nextToken();
					content = Integer.parseInt(st.nextToken());
				}
				else if(line.equalsIgnoreCase("\r\n"))
						condition = false;
				auxiliar = new StringBuffer();
			}
		}
		while(chCount<content){
			ch = cis.read();
			sb.append((char)ch);
			chCount++;
		}
		response = sb.toString();
		cis.close();
		cos.close();
		stream.close();
		return response;
	}
	

	public void setAcknowledge(boolean newValue) {
		this.acknowledge = newValue;
	}

	public boolean getAcknowledge() {
		return this.acknowledge;
	}

}
