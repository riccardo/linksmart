package eu.linksmart.limbo.upnp;

import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.util.StringTokenizer;

import eu.linksmart.upnp.*;

/**
 * <b>Class UPnPMulticastThread</b>
 * This class is responsible to make SSDP announcements to make the device discoverable by UPnP.
 * It joins the SSDP multicast address "239.255.255.250" port:1900 used for devices to make announcements 
 * of its capabilities.   
 * @author Joao Fernandes, Daimi UAAR
 */

public class UPnPMulticastThread extends Thread {
	
	  private UPnPDeviceImpl device;
	  private MulticastSocket multicastSocket;
	  private int multicastPort = 1900;
	  private String multicastAddress = "239.255.255.250";
	  private int serverPort;
	  private InetAddress add; 
	  
	  
	  /**
	   * <b>MulticastThread Constructor</b>
	   * Creates a new MulticastThread instance.
	   * @param serverPort The server port.
	   * @param device The UPnPDeviceImpl variable representing the UPnP device.
	   * @param deviceDescFilePath The file path of the UPnP device description file.
	   * @param servicesDescFilePath The file paths of the UPnP service description files.
	   */
	  public UPnPMulticastThread(int serverPort, UPnPDeviceImpl device,
								String deviceDescFilePath, String[] servicesDescFilePath){
			this.device = device;
			this.serverPort = serverPort;
			
		
			
			try {
				Thread  mThread = this;
		    	  mThread.start();
		      }catch(Exception e) {e.printStackTrace();}
		}

	  	/**
	  	 * <b>run</b>
	  	 * This method creates a multicast socket and joins the SSDP multicast address, used for discovery
	  	 * of devices by UPnP. First the device sends alive messages announcing that a new device joined the network
	  	 * After making these announcements it listens to messages on this multicast address and if it is a M-SEARCH
	  	 * message (sent by control points, servers that find UPnP devices), it sends specific messages to the requester.  
	  	 */
		@Override
		public void run(){
			try {
				this.multicastSocket = new MulticastSocket(this.multicastPort); 
				this.add = InetAddress.getByName(multicastAddress);
			    this.multicastSocket.joinGroup(add);
			  
	            //alive messages
	            String aliveRootMessage = "NOTIFY * HTTP/1.1\r\n"+
	            						  "HOST: 239.255.255.250:1900\r\n"+
	            					      "CACHE-CONTROL: max-age=1800\r\n"+
	            					      "LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
	            					      "NT: upnp:rootdevice\r\n"+
	            					      "NTS: ssdp:alive\r\n"+
	            					      "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
	            					      "USN: "+this.device.getUDN()+"::upnp:rootdevice\r\n\r\n";
	            String[] aliveServiceMessages = new String[device.getServicesImpl().length];
	            UPnPServiceImpl[] services = device.getServicesImpl();
	            for(int i = 0; i < services.length; i++) {
	            	aliveServiceMessages[i] = "NOTIFY * HTTP/1.1\r\n"+
	            	 					   "HOST: 239.255.255.250:1900\r\n"+
	            	 					   "CACHE-CONTROL: max-age = 1800\r\n"+
	            	 					   "LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
	            	 					   "NT: urn:schemas-upnp-org:service:"+services[i].getId()+":1\r\n"+
	            	 					   "NTS: ssdp:alive\r\n"+
	            	 					   "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
	            	 					   "USN: "+device.getUDN()+"::urn:schemas-upnp-org:service:"+services[i].getId()+":1\r\n\r\n";
	            }
	            String aliveDeviceMessage = "NOTIFY * HTTP/1.1\r\n"+
	            					   "HOST: 239.255.255.250:1900\r\n"+
	            					   "CACHE-CONTROL: max-age=900\r\n"+
	            					   "LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
	            					   "NT: urn:schemas-upnp-org:device:linksmart"+device.getFriendlyName()+":1\r\n"+
	            					   "NTS: ssdp:alive\r\n"+
	            					   "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
	            					   "USN: "+device.getUDN()+"::urn:schemas-upnp-org:device:linksmart"+device.getFriendlyName()+":1\r\n\r\n";
	            
	            String aliveuuidMessage = "NOTIFY * HTTP/1.1\r\n"+
	            						"HOST: 239.255.255.250:1900\r\n"+
	            						"CACHE-CONTROL: max-age=900\r\n"+
	            						"LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
	            					    "NT: "+device.getUDN()+"\r\n"+
	            					    "NTS: ssdp:alive\r\n"+
	            					    "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n\r\n"+
	            					    "USN: "+device.getUDN()+"\r\n\r\n";
	            
	            this.multicastSocket.send(new DatagramPacket(aliveRootMessage.getBytes(),aliveRootMessage.length(), add, this.multicastPort));
	            for(int j = 0; j < services.length; j++) 
	            	this.multicastSocket.send(new DatagramPacket(aliveServiceMessages[j].getBytes(),aliveServiceMessages[j].length(), add, this.multicastPort));
	            this.multicastSocket.send(new DatagramPacket(aliveDeviceMessage.getBytes(),aliveDeviceMessage.length(), add, this.multicastPort));
	            this.multicastSocket.send(new DatagramPacket(aliveuuidMessage.getBytes(),aliveuuidMessage.length(), add, this.multicastPort));
	            
	            byte[] buffer = new byte[10240];
	            
				while(true) {
					
					buffer = new byte[10240];
				    DatagramPacket packet = new DatagramPacket(buffer, buffer.length, add, this.multicastPort);
					this.multicastSocket.receive(packet);
				    String message = new String(buffer).trim();
					StringTokenizer tokMessage = new StringTokenizer(message);
					String requestLine = tokMessage.nextToken("\n");
					
			     	//PROCESS M-SEARCH MESSAGE
					if(requestLine.startsWith("M-SEARCH")) {
						String[] headerLines = new String[4];
						String searchTarget = new String();
						for(int i = 0; i < 4 ; i++) {
							headerLines[i] = tokMessage.nextToken("\n");
							StringTokenizer tok;
							if(headerLines[i].startsWith("ST:")) {
								tok = new StringTokenizer(headerLines[i]);
								while(tok.hasMoreTokens())
									searchTarget = tok.nextToken(" ");
								break;
							}
						}
						searchTarget = searchTarget.trim();
							
						//if is to respond to the search message
						if(searchTarget.equals("ssdp:all") || searchTarget.equals("upnp:rootdevice") || searchTarget.equals(this.device.getUDN())) {
					
							InetAddress sourceAddress = packet.getAddress();
							int sourcePort = packet.getPort();
					
							String sendInfoRootDevice = "HTTP/1.1 200 OK\r\n"+
										  "CACHE-CONTROL: max-age=1800\r\n"+
										  "EXT:\r\n"+
										  "LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
										  "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
										  "ST: upnp:rootdevice\r\n"+
		            					  "USN: "+device.getUDN()+"\r\n\r\n";
							
							String[] sendInfoServices = new String[device.getServicesImpl().length];
				            for(int i = 0; i < services.length; i++) {
				            	sendInfoServices[i] = "HTTP/1.1 200 OK\r\n"+
								  					  "CACHE-CONTROL: max-age=1800\r\n"+
								                      "EXT:\r\n"+
								                      "LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
								                      "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
				            	 					  "ST: urn:schemas-upnp-org:service:"+services[i].getId()+":1\r\n"+
				            	 					  "USN: "+device.getUDN()+"\r\n\r\n";
				            }
				            String sendInfoDevice = "HTTP/1.1 200 OK\r\n"+
		  					  						"CACHE-CONTROL: max-age=1800\r\n"+
		  					  						"EXT:\r\n"+
		  					  						"LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
		  					  					    "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
     					   							"ST: urn:schemas-upnp-org:device:linksmart"+device.getFriendlyName()+":1\r\n"+
     					   							"USN: "+device.getUDN()+"::urn:schemas-upnp-org:device:linksmart"+device.getFriendlyName()+":1\r\n\r\n";
				            
     
				            String sendInfoUUID = "HTTP/1.1 200 OK\r\n"+
		  										  "CACHE-CONTROL: max-age=1800\r\n"+
			  						              "EXT:\r\n"+
			  						              "LOCATION: http://"+InetAddress.getLocalHost().getHostAddress()+":"+this.serverPort+"/\r\n"+
			  					                  "SERVER: Windows XP, UPnP/1.0, LinkSmart Plugin 1.0\r\n"+
     											  "ST: "+device.getUDN()+"\r\n"+
     											  "USN: "+device.getUDN()+"\r\n\r\n";
				           
				       this.multicastSocket.send(new DatagramPacket(sendInfoRootDevice.getBytes(),sendInfoRootDevice.length(), sourceAddress, sourcePort));
				     
				       for(int i = 0; i < services.length; i++) 
				    	   this.multicastSocket.send(new DatagramPacket(sendInfoServices[i].getBytes(),sendInfoServices[i].length(), sourceAddress, sourcePort));
				       this.multicastSocket.send(new DatagramPacket(sendInfoDevice.getBytes(),sendInfoDevice.length(), sourceAddress, sourcePort));
				       this.multicastSocket.send(new DatagramPacket(sendInfoUUID.getBytes(),sendInfoUUID.length(), sourceAddress, sourcePort));
						}
					}
				}
				
			}catch(Exception e ) {
				
			
				e.printStackTrace();}
		}
		
		public void sendByeByeMessages() {
			try {
			
				UPnPServiceImpl[] services = device.getServicesImpl();
			
				String byebyeRootDevice = "NOTIFY * HTTP/1.1\r\n"+
					"NT: upnp:rootdevice\r\n"+
					"USN: "+this.device.getUDN()+"::upnp:rootdevice\r\n"+
					"NTS: ssdp:byebye\r\n"+
					"HOST: 239.255.255.250:1900\r\n"+
					"Content-Lenght: 0\r\n\r\n";

				String[] byebyeServices = new String[device.getServicesImpl().length];
				for(int i = 0; i < services.length; i++) {
					byebyeServices[i] = "NOTIFY * HTTP/1.1\r\n"+
	                      "NT: urn:schemas-upnp-org:service:"+services[i].getId()+":1\r\n"+
	                      "USN: "+device.getUDN()+"::urn:schemas-upnp-org:service:"+services[i].getId()+":1\r\n"+
	                      "NTS: ssdp:byebye\r\n"+
	                      "HOST: 239.255.255.250:1900\r\n"+
	  					  "Content-Lenght: 0\r\n\r\n";
				}
				String byebyeDevice = "NOTIFY * HTTP/1.1\r\n"+
  						"NT: urn:schemas-upnp-org:device:linksmart"+device.getFriendlyName()+":1\r\n"+
  						"USN: "+device.getUDN()+"::urn:schemas-upnp-org:device:linksmart"+device.getFriendlyName()+":1\r\n"+
  						"NTS: ssdp:byebye\r\n"+
	                    "HOST: 239.255.255.250:1900\r\n"+
	  					"Content-Lenght: 0\r\n\r\n";

				String byebyeUUID = "NOTIFY * HTTP/1.1\r\n"+
				          "NT: "+device.getUDN()+"\r\n"+
				          "USN: "+device.getUDN()+"\r\n"+
				          "NTS: ssdp:byebye\r\n"+
				          "HOST: 239.255.255.250:1900\r\n"+
		  			      "Content-Lenght: 0\r\n\r\n";

				this.multicastSocket.send(new DatagramPacket(byebyeRootDevice.getBytes(),byebyeRootDevice.length(), this.add, this.multicastPort));

				for(int i = 0; i < services.length; i++) 
					this.multicastSocket.send(new DatagramPacket(byebyeServices[i].getBytes(),byebyeServices[i].length(), this.add, this.multicastPort));
				this.multicastSocket.send(new DatagramPacket(byebyeDevice.getBytes(),byebyeDevice.length(), this.add, this.multicastPort));
				this.multicastSocket.send(new DatagramPacket(byebyeUUID.getBytes(),byebyeUUID.length(), this.add, this.multicastPort));

				
				this.multicastSocket.leaveGroup(this.add);
				this.stop();
			}catch(Exception e ) {e.printStackTrace();}
		}
  }
