package $package;

import java.util.Dictionary;
import java.util.HashSet;
import java.util.Properties;
import java.util.Random;

import org.apache.felix.upnp.extra.util.UPnPEventNotifier;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.framework.ServiceEvent;
import org.osgi.framework.ServiceListener;
import org.osgi.framework.ServiceRegistration;
import org.osgi.service.upnp.UPnPDevice;
import org.osgi.service.upnp.UPnPEventListener;
import org.osgi.service.upnp.UPnPIcon;
import org.osgi.service.upnp.UPnPService;

import eu.linksmart.limbo.${webServiceName}Activator;

public class $class implements UPnPDevice,UPnPEventListener,ServiceListener  {

	final private String DEVICE_ID = "uuid:$class+" +Integer.toHexString(new Random(System.currentTimeMillis()).nextInt());
	private final static String ${webServiceName.toUpperCase()}_DEVICE_TYPE = "urn:schemas-upnp-org:linksmartdevice:${device.getDeviceType()}:1";
#foreach($UPnPServiceImpl in $services)
	private final static String ${UPnPServiceImpl.getServiceName().toUpperCase()}_TYPE = "$UPnPServiceImpl.getType()";
#end
	private final String devicesFilter = 
		"(&"+
			"("+Constants.OBJECTCLASS+"="+UPnPDevice.class.getName()+"))";
	
	private BundleContext context;
#foreach($UPnPServiceImpl in $services)
	private $UPnPServiceImpl.getServiceName()UPnPService $UPnPServiceImpl.getServiceName();
	private UPnPEventNotifier ${UPnPServiceImpl.getServiceName()}Notifier;
#end
	
	private UPnPService[] services;
	private Dictionary dictionary;
	
#foreach($UPnPServiceImpl in $services)
#foreach($UPnPStateVariableImpl in $UPnPServiceImpl.getStateVariablesImpl())
	private ${UPnPStateVariableImpl.getName()}StateVariable ${UPnPStateVariableImpl.getName()}State;
#end
#end
	private ServiceRegistration serviceRegistration;
	private ${webServiceName}Activator deviceActivator;
	
	public $class(BundleContext context) {
		this.context = context;
#foreach($UPnPServiceImpl in $services)
		$UPnPServiceImpl.getServiceName() = new ${UPnPServiceImpl.getServiceName()}UPnPService(this);
#end
#set($comma =",")
		services = new UPnPService[]{#set($i = $services.size())#set($n = 0)#foreach($UPnPServiceImpl in $services)#set($n=$n+1)#if($n<$i)${UPnPServiceImpl.getServiceName()}$comma#else$UPnPServiceImpl.getServiceName()#end#end};		
#foreach($UPnPServiceImpl in $services)
#foreach($UPnPStateVariableImpl in $UPnPServiceImpl.getStateVariablesImpl())
		${UPnPStateVariableImpl.getName()}State = (${UPnPStateVariableImpl.getName()}StateVariable) ${UPnPServiceImpl.getServiceName()}.getStateVariable("$UPnPStateVariableImpl.getName()");
#end
#end
		setupDeviceProperties();
		buildEventNotifyer();
		try {
			${webServiceName}UPnPActivator.context.addServiceListener(this,devicesFilter);
		} catch (InvalidSyntaxException e) {
			System.out.println(e);		
		}
	}
	
	private void buildEventNotifyer() {
#foreach($UPnPServiceImpl in $services)
		${UPnPServiceImpl.getServiceName()}Notifier = new UPnPEventNotifier(${webServiceName}UPnPActivator.context, this, $UPnPServiceImpl.getServiceName());
#foreach($UPnPStateVariableImpl in $UPnPServiceImpl.getStateVariablesImpl())
		${UPnPStateVariableImpl.getName()}State.setNotifier(${UPnPServiceImpl.getServiceName()}Notifier);
#end
#end
	}
	
	private void setupDeviceProperties(){
		dictionary = new Properties();
		dictionary.put(UPnPDevice.UPNP_EXPORT,"");
		dictionary.put(
	        org.osgi.service.device.Constants.DEVICE_CATEGORY,
        	new String[]{UPnPDevice.DEVICE_CATEGORY}
        );
		dictionary.put(UPnPDevice.FRIENDLY_NAME,"$device.getFriendlyName()");
		dictionary.put(UPnPDevice.MANUFACTURER,"$device.getManufacturer()");
		dictionary.put(UPnPDevice.MANUFACTURER_URL,"$device.getManufacturerURL()");
		dictionary.put(UPnPDevice.MODEL_DESCRIPTION,"$device.getModelDescription()");
		dictionary.put(UPnPDevice.MODEL_NAME,"$device.getModelName()");
		dictionary.put(UPnPDevice.MODEL_NUMBER,"$device.getModelNumber()");
		dictionary.put(UPnPDevice.TYPE,${webServiceName.toUpperCase()}_DEVICE_TYPE);
		dictionary.put(UPnPDevice.UDN,DEVICE_ID);
		dictionary.put(UPnPDevice.UPC,"1213456789");
		

		HashSet types = new HashSet(services.length);
		String[] ids = new String[services.length];
		for (int i = 0; i < services.length; i++) {
			ids[i]=services[i].getId();
			types.add(services[i].getType());
		}
		
		dictionary.put(UPnPService.TYPE, types.toArray(new String[]{}));
		dictionary.put(UPnPService.ID, ids);		
	}
	
	public Dictionary getDescriptions(String locale) {
		return dictionary;
	}
	
	public UPnPIcon[] getIcons(String locale) {
		return null;
	}

	public UPnPService getService(String serviceId) {
#foreach($UPnPServiceImpl in $services)
		if  (serviceId.equals(${UPnPServiceImpl.getServiceName()}.getId())) return ${UPnPServiceImpl.getServiceName()};
#end
		return null;
	}
	
	public UPnPService[] getServices() {
		return services;
	}
	
	public void notifyUPnPEvent(String deviceId, String serviceId,
			Dictionary events) {
		System.out.println("Received event" + events.toString());
		
	}
	
	public void serviceChanged(ServiceEvent event) {
		switch(event.getType()){
		case ServiceEvent.REGISTERED:{
		};break;
		
		case ServiceEvent.MODIFIED:{				
		};break;
		
		case ServiceEvent.UNREGISTERING:{	
	 	};break;
	}
		
	}
	
	public void changeProperty(String key, String value) {
		dictionary.put(key, value);
		serviceRegistration.setProperties(dictionary);
	}
	
	public void doServiceRegistration() {

		
		serviceRegistration = context.registerService(UPnPDevice.class
				.getName(), this,  this.getDescriptions(null));
		
		try {

			this.deviceActivator = new ${webServiceName}Activator(this);
			this.deviceActivator.start(context);

		} catch (Exception e) {
			e.printStackTrace();
		}
		 
	}
	public void doServiceUnregistration() {
		serviceRegistration.unregister();
		try {
			this.deviceActivator.stop(context);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
}
