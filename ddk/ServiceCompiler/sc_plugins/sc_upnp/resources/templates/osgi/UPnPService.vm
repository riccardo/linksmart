package $package;

import java.util.HashMap;
import java.util.Enumeration;

$importTypes

import org.osgi.service.upnp.UPnPAction;
import org.osgi.service.upnp.UPnPService;
import org.osgi.service.upnp.UPnPStateVariable;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Hashtable;


import eu.linksmart.limbo.*;


public class $class implements UPnPService {

	final private String SERVICE_ID = "${service.getId()}";
	final private String SERVICE_TYPE = "${service.getType()}";
	final private String VERSION ="1";
	
#foreach($UPnPStateVariableImpl in $service.getStateVariablesImpl())
	private ${UPnPStateVariableImpl.getName()}StateVariable ${UPnPStateVariableImpl.getName()};
#end
	private UPnPStateVariable[] states;
	private HashMap actions = new HashMap();
	private $device device;
	
#if($class == "LinkSmartServicePortUPnPService")
	private Hashtable<String, String> properties = new Hashtable<String, String>();
#end

	public $class($device device) {
		this.device = device;
#foreach($UPnPStateVariableImpl in $service.getStateVariablesImpl())
		${UPnPStateVariableImpl.getName()} = new ${UPnPStateVariableImpl.getName()}StateVariable();
#end
#set($comma = ",")
		this.states = new UPnPStateVariable[]{#set($i = $nStateVars)#set($n = 0)#foreach($UPnPStateVariableImpl in $service.getStateVariablesImpl())#set($n=$n+1)#if($n<$i)${UPnPStateVariableImpl.getName()}$comma#else$UPnPStateVariableImpl.getName()#end#end};

#foreach($UPnPActionImpl in $service.getActionsImpl())
		UPnPAction ${UPnPActionImpl.getName()} = new ${UPnPActionImpl.getName()}Action(#foreach($ActionArgument in $UPnPActionImpl.getArgumentsList())$ActionArgument.getArgumentName()${comma}#end this);
		actions.put(${UPnPActionImpl.getName()}.getName(),${UPnPActionImpl.getName()});
#end
#if($class == "LinkSmartServicePortUPnPService")
		DiscoveryInfo.set("Limbo generated WS code");
		HasError.set(false);
		
		InputStream is = LinkSmartServicePortUPnPService.class.getResourceAsStream("/resources/${webServiceName}.wsdl");
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
	        StringBuilder sb = new StringBuilder();
		String line;
		try {
			while ((line = reader.readLine()) != null) {
				sb.append(line);
		    }
		} catch (IOException e) {
		   e.printStackTrace();
		}           
		try {
			is.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
#end
	}

	public UPnPAction getAction(String name) {
		return (UPnPAction)actions.get(name);
	}

	public UPnPAction[] getActions() {
		return (UPnPAction[])(actions.values()).toArray(new UPnPAction[]{});
	}

	public String getId() {
		return SERVICE_ID;
	}

	public UPnPStateVariable getStateVariable(String name) {

#set($n=0)
#foreach($UPnPStateVariableImpl in $service.getStateVariablesImpl())
#if($n == 0)
		if (name.equals(${UPnPStateVariableImpl.getName()}.getName())) return ${UPnPStateVariableImpl.getName()};
#else
		else if (name.equals(${UPnPStateVariableImpl.getName()}.getName())) return ${UPnPStateVariableImpl.getName()};
#end
#set($n=$n+1)
#end
#if($service.getStateVariablesImpl().length != 0)
		else return null;
#else
		return null;
#end
	}

	public UPnPStateVariable[] getStateVariables() {
		return states;
	}

	public String getType() {
		return SERVICE_TYPE;
	}

	public String getVersion() {
		return VERSION;
	}

#if($class != "LinkSmartServicePortUPnPService")
$methods
#else
	public String GetLinkSmartID(){
		return this.LinkSmartID.get();
	}

	public String CreateWS(){
		this.WSEndpoint.set(${webServiceName}Servlet.getEndpoint());
		this.LinkSmartWSEndpoint.set(LinkSmartServicePortServlet.getEndpoint());
		return this.WSEndpoint.get();
	}

	public String GetStatus(){
		return this.Status.get();
	}

	public String GetProperty(String Property ){
		if (Property.equals("devicepropertyxml")) {
			String props = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><root>";
			
			Enumeration<String> en =properties.keys();
			while (en.hasMoreElements()) {
				String key = en.nextElement();
				String value = properties.get(key);
				props+= "<" + key +" xmlns=\"linksmart\">"+ value+ "</"+key +">";
			}
			props+="</root>";
			return props;
			
			
		}
		else {
			String res = this.properties.get(Property);
			if (res == null) res = "";
			return res;
		}
	}

	public boolean GetHasError(){
		return this.HasError.get();
	}

	public String GetErrorMessage(){
		return this.ErrorMessage.get();
	}

	public String GetDiscoveryInfo(){
		return this.DiscoveryInfo.get();
	}

	public String GetDACEndpoint(){
		return this.DACEndpoint.get();
	}

	public String GetWSEndpoint(){
		return this.WSEndpoint.get();
	}

	public String GetLinkSmartWSEndpoint(){
		return this.LinkSmartWSEndpoint.get();
	}

	public String GetWSDL(){
		return this.wsdl.get();
	}

	public void SetLinkSmartID(String LinkSmartID ){
		this.LinkSmartID.set(LinkSmartID);
	}

	public void SetStatus(String Status ){
		this.Status.set(Status);
	}

	public void SetDACEndpoint(String DACEndpoint ){
		this.DACEndpoint.set(DACEndpoint);
	}

	public void SetProperty(String Property, String Value ){
		this.properties.put(Property, Value);
		this.device.changeProperty("linksmart", Property + "_&%_" + Value);
	}

	public void Stop(){
		//TODO
	}

	public void StopWS(){
		//TODO
	}

	public void StopLinkSmartWS(){
		//TODO
	}
	
#end


}



