package $package;

import org.osgi.service.http.HttpService;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.util.tracker.ServiceTracker;
import java.net.InetAddress;
import java.net.UnknownHostException;
#if($withUPnP == "true")
import eu.linksmart.limbo.upnp.*;
#end
import org.osgi.framework.ServiceRegistration;
public class $class implements BundleActivator {

	private BundleContext context;
#foreach($PortType in $portTypes)
	private ${PortType.getQName().getLocalPart()}Servlet ${PortType.getQName().getLocalPart()}servlet;
#end
#if($transport == "TCP")
	private ServiceTracker tracker;
	private HttpService http; 
#foreach($Port in $ports)
	private ServiceRegistration ${Port}Service;
#end
#end

#if($withUPnP == "true")
	private static $device device;
	public $class($device device) {
		${class}.device = device;
	}
	
	public static $device getDevice() {
		return ${class}.device;
	}
#end

	public void start(BundleContext context) throws Exception {
#if($transport == "TCP")
		tracker = new ServiceTracker(context, HttpService.class.getName(), null);
		tracker.open();
		this.http = (HttpService) tracker.getService();
		this.context = context;
#end
		createInstance();
		
	}
	
	public void createInstance() throws Exception {
#if($transport == "TCP")
	 	String host = "";
		try {
			host = InetAddress.getLocalHost().getHostAddress();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
#foreach($Port in $ports)
		this.${Port}servlet = new ${Port}Servlet(host, new Integer(context.getProperty("org.osgi.service.http.port").toString()), "${servlets.get("${Port}")}");
		this.http.registerServlet("${servlets.get("${Port}")}", this.${Port}servlet, null, null);
		${Port}Service = this.context.registerService(${Port}Servlet.class.getName(), this.${Port}servlet, null);      
#end
#end
#if($transport == "UDP")
#set($i = 8082)
#foreach($Port in $ports)
             this.${Port}servlet = new ${Port}Servlet(new ${protocol}(),$i,"${servlets.get(${Port})}");
	     this.${Port}servlet.runServer();
#set($i = $i+1)
#end
#end
#if($transport == "BT")
#foreach($Port in $ports)
	     BTProtocol ${Port.toLowerCase()}Protocol = new BTProtocol();
	     ${Port.toLowerCase()}Protocol.setServiceName("${Port}"); 
             this.${Port}servlet = new ${Port}Servlet(${Port.toLowerCase()}Protocol,-1,"${servlets.get(${Port})}");
	     this.${Port}servlet.runServer();
#end
#end
	}
	
	
	public void stop(BundleContext context) throws Exception {
#if($transport == "TCP")
#foreach($Port in $ports)
		${Port}Service.unregister();
		this.http.unregister("${servlets.get("${Port}")}");
#end
		tracker.close();
		tracker = null;
#end
	}
}
